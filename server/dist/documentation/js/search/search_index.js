var COMPODOC_SEARCH_INDEX = {
    "index": { "version": "2.3.9", "fields": ["title", "body"], "fieldVectors": [["title/modules/AppModule.html", [0, 1.043, 1, 1.999]], ["body/modules/AppModule.html", [0, 1.713, 1, 4.001, 2, 1.501, 3, 1.501, 4, 1.805, 5, 1.805, 6, 1.501, 7, 2.383, 8, 1.805, 9, 2.887, 10, 2.887, 11, 3.348, 12, 0.034, 13, 3.03, 14, 3.348, 15, 2.758, 16, 2.383, 17, 1.805, 18, 1.805, 19, 0.257, 20, 0.257, 21, 0.214, 22, 3.465, 23, 2.169, 24, 2.933, 25, 2.633, 26, 2.633, 27, 3.309, 28, 0.541, 29, 0.75, 30, 3.465, 31, 3.465, 32, 2.221, 33, 1.501, 34, 2.506, 35, 2.887, 36, 3.465, 37, 2.933, 38, 3.465, 39, 3.465, 40, 2.506, 41, 3.465, 42, 3.465, 43, 3.465, 44, 3.465, 45, 3.465, 46, 0.257, 47, 0.132, 48, 0.018, 49, 0.024, 50, 0.018]], ["title/controllers/AuthController.html", [24, 1.999, 51, 1.479]], ["body/controllers/AuthController.html", [12, 0.034, 19, 0.271, 20, 0.271, 21, 0.225, 23, 1.734, 24, 3.038, 28, 0.459, 29, 0.792, 46, 0.271, 47, 0.139, 48, 0.019, 49, 0.024, 50, 0.019, 51, 2.493, 52, 3.047, 53, 2.645, 54, 5.905, 55, 4.74, 56, 4.74, 57, 4.74, 58, 4.74, 59, 0.421, 60, 2.053, 61, 1.915, 62, 3.658, 63, 0.942, 64, 1.124, 65, 4.74, 66, 0.655, 67, 3.658, 68, 1.332, 69, 1.332, 70, 0.475, 71, 1.223, 72, 4.801, 73, 4.74, 74, 3.949, 75, 4.74, 76, 2.053, 77, 3.566, 78, 2.645, 79, 2.645, 80, 0.946, 81, 3.047, 82, 2.493, 83, 2.645, 84, 3.658, 85, 2.105, 86, 2.645, 87, 3.658, 88, 1.332, 89, 1.332, 90, 3.658]], ["title/modules/AuthModule.html", [0, 1.043, 11, 1.795]], ["body/modules/AuthModule.html", [0, 1.7, 2, 1.479, 3, 1.479, 4, 1.778, 5, 1.778, 6, 1.479, 7, 2.648, 8, 2.648, 11, 3.584, 12, 0.034, 15, 2.747, 16, 2.36, 17, 1.778, 18, 1.778, 19, 0.253, 20, 0.253, 21, 0.21, 27, 3.276, 28, 0.516, 29, 0.739, 34, 2.469, 46, 0.336, 47, 0.13, 48, 0.018, 49, 0.023, 50, 0.018, 82, 2.953, 83, 2.469, 91, 2.844, 92, 2.844, 93, 3.414, 94, 2.844, 95, 3.584, 96, 2.469, 97, 3.414, 98, 2.469, 99, 3.414, 100, 2.188, 101, 2.904, 102, 2.469, 103, 3.414, 104, 1.479, 105, 3.276, 106, 2.844, 107, 2.844, 108, 2.188, 109, 2.469, 110, 1.618, 111, 2.844, 112, 2.469, 113, 2.844, 114, 2.844, 115, 2.844]], ["title/injectables/AuthService.html", [82, 1.479, 116, 0.958]], ["body/injectables/AuthService.html", [12, 0.034, 19, 0.192, 20, 0.192, 21, 0.16, 28, 0.478, 29, 0.561, 46, 0.192, 47, 0.099, 48, 0.013, 49, 0.019, 50, 0.013, 59, 0.299, 61, 1.6, 63, 0.914, 66, 0.952, 68, 0.945, 69, 1.6, 70, 0.337, 71, 0.867, 72, 2.161, 80, 1.137, 82, 1.775, 88, 1.937, 89, 1.858, 98, 1.876, 101, 2.4, 102, 1.876, 104, 2.211, 110, 1.23, 112, 1.876, 116, 1.15, 117, 1.351, 118, 2.161, 119, 0.969, 120, 4.395, 121, 4.395, 122, 4.395, 123, 4.395, 124, 4.395, 125, 1.775, 126, 1.876, 127, 2.304, 128, 5.483, 129, 2.594, 130, 1.32, 131, 2.658, 132, 2.594, 133, 2.594, 134, 2.594, 135, 2.594, 136, 2.594, 137, 3.178, 138, 3.12, 139, 1.23, 140, 1.876, 141, 2.155, 142, 2.161, 143, 1.951, 144, 3.661, 145, 3.745, 146, 4.395, 147, 2.289, 148, 2.594, 149, 2.594, 150, 2.594, 151, 2.594, 152, 2.594, 153, 2.594, 154, 2.161, 155, 1.753, 156, 1.876, 157, 2.594, 158, 2.594, 159, 2.594, 160, 2.594, 161, 2.594, 162, 2.594, 163, 2.817, 164, 1.493, 165, 2.594, 166, 3.745, 167, 3.745, 168, 2.4, 169, 2.594, 170, 2.594, 171, 2.594, 172, 2.594, 173, 2.594, 174, 1.663, 175, 1.876]], ["title/classes/JwtGaurd.html", [47, 0.118, 176, 1.795]], ["body/classes/JwtGaurd.html", [12, 0.032, 19, 0.35, 20, 0.35, 21, 0.291, 28, 0.412, 46, 0.412, 47, 0.179, 48, 0.024, 49, 0.029, 50, 0.024, 100, 3.025, 130, 1.221, 176, 3.392, 177, 1.578, 178, 3.931, 179, 4.719, 180, 2.237, 181, 4.719]], ["title/interfaces/JwtPayload.html", [141, 1.795, 182, 1.999]], ["body/interfaces/JwtPayload.html", [12, 0.032, 19, 0.348, 20, 0.348, 21, 0.289, 46, 0.348, 48, 0.024, 49, 0.028, 50, 0.024, 59, 0.539, 63, 0.99, 70, 0.609, 119, 1.43, 141, 3.18, 144, 4.897, 182, 3.005, 183, 4.687, 184, 3.905, 185, 4.687]], ["title/injectables/JwtStrategy.html", [95, 1.795, 116, 0.958]], ["body/injectables/JwtStrategy.html", [12, 0.034, 19, 0.27, 20, 0.27, 21, 0.224, 28, 0.515, 29, 0.788, 46, 0.27, 47, 0.138, 48, 0.019, 49, 0.024, 50, 0.019, 59, 0.419, 60, 2.046, 61, 1.91, 66, 0.846, 68, 1.72, 69, 1.72, 70, 0.614, 71, 1.58, 76, 1.576, 85, 2.094, 88, 1.325, 89, 1.325, 95, 2.718, 100, 2.332, 101, 3.028, 102, 2.631, 104, 1.576, 108, 2.332, 110, 1.725, 116, 1.451, 117, 1.895, 125, 1.725, 126, 2.631, 127, 2.405, 140, 2.631, 141, 3.195, 142, 3.031, 147, 1.895, 154, 3.031, 155, 1.72, 156, 2.631, 168, 2.332, 180, 1.725, 186, 3.031, 187, 4.724, 188, 3.638, 189, 4.724, 190, 3.638, 191, 3.638, 192, 3.638, 193, 3.031, 194, 3.638, 195, 3.416, 196, 3.638, 197, 3.638, 198, 3.638, 199, 3.638, 200, 3.638, 201, 3.638, 202, 3.638, 203, 3.638]], ["title/classes/NewQuestionDto.html", [47, 0.118, 204, 1.351]], ["body/classes/NewQuestionDto.html", [12, 0.033, 19, 0.287, 20, 0.287, 21, 0.238, 28, 0.428, 46, 0.364, 47, 0.186, 48, 0.02, 49, 0.025, 50, 0.02, 59, 0.445, 63, 1.073, 64, 1.657, 66, 0.966, 70, 0.701, 119, 1.27, 130, 0.999, 177, 1.292, 204, 2.337, 205, 3.217, 206, 3.902, 207, 3.459, 208, 3.902, 209, 4.908, 210, 3.862, 211, 3.862, 212, 3.862, 213, 3.862, 214, 4.73, 215, 2.476, 216, 4.106, 217, 3.862, 218, 2.793, 219, 3.862, 220, 2.793, 221, 3.217, 222, 3.902, 223, 4.089, 224, 2.476, 225, 4.089, 226, 4.089, 227, 3.217]], ["title/classes/NewQuizDto.html", [47, 0.118, 228, 1.795]], ["body/classes/NewQuizDto.html", [12, 0.033, 19, 0.281, 20, 0.281, 21, 0.233, 28, 0.467, 46, 0.281, 47, 0.184, 48, 0.019, 49, 0.025, 50, 0.019, 59, 0.436, 63, 1.067, 64, 1.732, 66, 1.009, 70, 0.733, 119, 1.254, 177, 1.267, 204, 2.316, 214, 4.854, 215, 2.428, 216, 4.213, 218, 2.739, 220, 2.739, 222, 3.506, 224, 2.428, 228, 2.79, 229, 3.156, 230, 3.428, 231, 3.867, 232, 3.867, 233, 3.428, 234, 4.848, 235, 3.788, 236, 3.788, 237, 3.788, 238, 3.788, 239, 3.788, 240, 3.788, 241, 5.347, 242, 3.788, 243, 3.788]], ["title/classes/QuestionAttemptEntity.html", [47, 0.118, 244, 1.625]], ["body/classes/QuestionAttemptEntity.html", [12, 0.033, 19, 0.275, 20, 0.275, 21, 0.228, 28, 0.417, 46, 0.355, 47, 0.141, 48, 0.019, 49, 0.025, 50, 0.019, 59, 0.427, 63, 1.061, 64, 1.718, 66, 1.001, 70, 0.752, 119, 1.237, 130, 0.959, 177, 1.24, 180, 2.267, 244, 2.757, 245, 3.088, 246, 3.045, 247, 5.292, 248, 5.292, 249, 3.045, 250, 3.584, 251, 3.045, 252, 3.707, 253, 2.751, 254, 3.707, 255, 4.781, 256, 3.707, 257, 2.651, 258, 2.68, 259, 1.931, 260, 3.065, 261, 3.065, 262, 3.707, 263, 2.751, 264, 3.065, 265, 2.133, 266, 1.35, 267, 3.088, 268, 3.707]], ["title/controllers/QuestionController.html", [25, 1.795, 51, 1.479]], ["body/controllers/QuestionController.html", [12, 0.033, 19, 0.226, 20, 0.226, 21, 0.188, 23, 1.447, 25, 2.417, 28, 0.473, 29, 0.661, 46, 0.226, 47, 0.116, 48, 0.016, 49, 0.022, 50, 0.016, 51, 1.447, 53, 2.207, 59, 0.351, 60, 1.819, 61, 2.162, 63, 1.004, 64, 1.475, 66, 0.86, 68, 1.749, 69, 1.749, 70, 0.624, 71, 1.606, 76, 2.08, 78, 3.037, 79, 2.207, 85, 1.756, 86, 2.207, 88, 1.749, 89, 1.749, 176, 1.756, 204, 2.241, 269, 2.543, 270, 2.207, 271, 4.2, 272, 4.2, 273, 4.802, 274, 3.052, 275, 4.455, 276, 4.519, 277, 3.052, 278, 3.052, 279, 3.681, 280, 3.052, 281, 2.543, 282, 3.052, 283, 5.606, 284, 3.052, 285, 2.977, 286, 3.052, 287, 3.052, 288, 2.207, 289, 2.543, 290, 2.543, 291, 2.543, 292, 2.543, 293, 2.543, 294, 2.543, 295, 2.543, 296, 2.543, 297, 2.277, 298, 2.543, 299, 3.052, 300, 2.543, 301, 4.001, 302, 4.001, 303, 3.052, 304, 3.052, 305, 3.052, 306, 3.052, 307, 3.052, 308, 2.543, 309, 3.052, 310, 3.052, 311, 3.052]], ["title/classes/QuestionEntity.html", [47, 0.118, 312, 1.625]], ["body/classes/QuestionEntity.html", [12, 0.033, 19, 0.256, 20, 0.256, 21, 0.213, 28, 0.446, 46, 0.256, 47, 0.174, 48, 0.018, 49, 0.024, 50, 0.018, 59, 0.398, 63, 1.078, 64, 1.738, 66, 1.013, 70, 0.756, 80, 1.408, 119, 1.182, 130, 0.894, 139, 1.639, 155, 1.259, 177, 1.156, 180, 2.166, 206, 3.7, 207, 3.28, 208, 3.7, 246, 2.944, 249, 2.944, 251, 3.132, 253, 2.629, 259, 1.8, 260, 2.928, 261, 2.928, 263, 2.629, 264, 2.928, 265, 1.989, 266, 1.259, 312, 2.665, 313, 2.88, 314, 2.944, 315, 3.456, 316, 3.456, 317, 3.456, 318, 3.456, 319, 4.568, 320, 4.568, 321, 1.979, 322, 3.456, 323, 3.456, 324, 3.456, 325, 3.7, 326, 3.456, 327, 1.989, 328, 3.456]], ["title/modules/QuestionModule.html", [0, 1.043, 13, 1.625]], ["body/modules/QuestionModule.html", [0, 1.828, 2, 1.721, 3, 1.721, 4, 2.069, 5, 2.069, 6, 1.721, 7, 2.847, 8, 2.603, 12, 0.033, 13, 3.19, 16, 2.603, 17, 2.069, 18, 2.069, 19, 0.295, 20, 0.295, 21, 0.245, 23, 2.369, 25, 3.146, 28, 0.516, 29, 0.86, 32, 2.547, 33, 1.721, 46, 0.295, 47, 0.151, 48, 0.02, 49, 0.026, 50, 0.02, 297, 3.002, 298, 3.31, 312, 2.069, 329, 3.31, 330, 3.31, 331, 3.31, 332, 3.973, 333, 3.973, 334, 3.31, 335, 3.973, 336, 3.973]], ["title/injectables/QuestionService.html", [116, 0.958, 297, 1.479]], ["body/injectables/QuestionService.html", [12, 0.034, 19, 0.174, 20, 0.174, 21, 0.145, 28, 0.464, 29, 0.508, 33, 1.017, 46, 0.258, 47, 0.089, 48, 0.012, 49, 0.018, 50, 0.012, 59, 0.27, 60, 1.508, 61, 1.785, 63, 0.919, 66, 0.952, 68, 1.267, 69, 1.267, 70, 0.539, 71, 1.164, 76, 1.017, 77, 2.231, 80, 1.073, 88, 1.511, 89, 1.671, 104, 2.123, 116, 1.069, 117, 1.223, 119, 0.9, 125, 1.65, 130, 1.328, 131, 2.553, 137, 2.517, 139, 1.113, 143, 2.768, 147, 2.553, 155, 1.671, 164, 1.351, 168, 2.231, 195, 2.517, 204, 1.508, 207, 1.505, 249, 3.058, 266, 0.855, 270, 4.162, 279, 2.659, 285, 1.351, 295, 1.955, 296, 1.955, 297, 1.967, 312, 1.813, 314, 2.003, 321, 1.017, 334, 1.955, 337, 1.955, 338, 4.149, 339, 4.149, 340, 3.712, 341, 4.149, 342, 3.481, 343, 4.149, 344, 2.347, 345, 3.318, 346, 2.347, 347, 3.481, 348, 3.481, 349, 2.347, 350, 2.347, 351, 2.347, 352, 3.481, 353, 2.347, 354, 2.347, 355, 2.347, 356, 1.697, 357, 2.347, 358, 3.481, 359, 3.481, 360, 2.347, 361, 1.697, 362, 2.347, 363, 1.955, 364, 1.697, 365, 2.347, 366, 2.347, 367, 2.347, 368, 1.955, 369, 1.697, 370, 2.347, 371, 2.9, 372, 3.823, 373, 3.481, 374, 3.456, 375, 2.347, 376, 2.347, 377, 2.347, 378, 2.347, 379, 3.481, 380, 2.347, 381, 3.481, 382, 1.955, 383, 3.481, 384, 2.347, 385, 2.347, 386, 1.955, 387, 2.347, 388, 2.347, 389, 2.347, 390, 2.347, 391, 1.697, 392, 2.347, 393, 2.347]], ["title/classes/QuizAttemptGateway.html", [37, 1.999, 47, 0.118]], ["body/classes/QuizAttemptGateway.html", [12, 0.034, 19, 0.14, 20, 0.14, 21, 0.116, 28, 0.457, 29, 0.409, 37, 1.891, 46, 0.14, 47, 0.112, 48, 0.01, 49, 0.015, 50, 0.01, 59, 0.217, 60, 1.278, 61, 2.02, 63, 0.528, 64, 1.449, 66, 0.978, 68, 1.856, 69, 1.856, 70, 0.775, 71, 1.705, 76, 2.208, 80, 0.939, 85, 1.087, 88, 1.322, 89, 1.074, 104, 1.278, 119, 0.763, 125, 0.895, 130, 0.489, 131, 0.984, 139, 0.895, 143, 1.89, 147, 1.536, 155, 1.62, 156, 3.218, 163, 3.647, 164, 2.089, 174, 1.891, 175, 2.133, 177, 0.632, 275, 1.366, 288, 1.366, 314, 1.087, 327, 1.087, 340, 3.411, 374, 2.457, 394, 4.621, 395, 1.573, 396, 2.457, 397, 3.629, 398, 3.629, 399, 3.629, 400, 6.106, 401, 4.102, 402, 2.457, 403, 2.95, 404, 3.629, 405, 3.629, 406, 2.95, 407, 2.95, 408, 2.95, 409, 1.889, 410, 1.945, 411, 1.889, 412, 2.457, 413, 2.95, 414, 1.889, 415, 3.629, 416, 1.889, 417, 1.889, 418, 3.629, 419, 1.889, 420, 5.358, 421, 1.889, 422, 1.889, 423, 1.889, 424, 1.889, 425, 1.889, 426, 1.889, 427, 2.95, 428, 1.889, 429, 1.889, 430, 2.95, 431, 1.889, 432, 2.95, 433, 4.927, 434, 3.629, 435, 1.889, 436, 4.102, 437, 2.95, 438, 1.889, 439, 1.889, 440, 1.889, 441, 1.889, 442, 1.889, 443, 1.889, 444, 1.366, 445, 1.573, 446, 1.211, 447, 1.889, 448, 1.366, 449, 1.366, 450, 1.366, 451, 1.366, 452, 1.366, 453, 1.366, 454, 1.366, 455, 1.366, 456, 1.366, 457, 1.366, 458, 1.573, 459, 1.366, 460, 1.889, 461, 1.278, 462, 1.366, 463, 1.889, 464, 1.889, 465, 1.889, 466, 1.889, 467, 1.889, 468, 1.889, 469, 1.889, 470, 2.95, 471, 2.95, 472, 1.889, 473, 2.457, 474, 1.889, 475, 1.366, 476, 1.573, 477, 1.889, 478, 2.625, 479, 1.891, 480, 1.889, 481, 1.889, 482, 1.889, 483, 1.889, 484, 1.889, 485, 1.889, 486, 1.573, 487, 1.889, 488, 1.889, 489, 1.889, 490, 1.573, 491, 1.573, 492, 1.573, 493, 1.573, 494, 1.889]], ["title/controllers/QuizController.html", [26, 1.795, 51, 1.479]], ["body/controllers/QuizController.html", [12, 0.033, 19, 0.155, 20, 0.155, 21, 0.129, 23, 0.992, 26, 1.836, 28, 0.446, 29, 0.453, 46, 0.155, 47, 0.079, 48, 0.011, 49, 0.016, 50, 0.011, 51, 0.992, 53, 1.512, 59, 0.241, 60, 1.383, 61, 2.217, 63, 1.085, 64, 1.57, 66, 0.915, 68, 1.861, 69, 1.861, 70, 0.664, 71, 1.71, 76, 2.214, 78, 2.308, 79, 1.512, 80, 0.541, 81, 1.742, 85, 1.203, 86, 1.512, 88, 1.861, 89, 1.861, 163, 2.481, 176, 1.203, 204, 1.876, 228, 2.492, 230, 2.481, 233, 2.046, 249, 2.227, 266, 0.762, 275, 4.499, 276, 5.134, 279, 1.341, 281, 1.742, 288, 1.512, 289, 1.742, 290, 1.742, 291, 1.742, 292, 1.742, 293, 1.742, 294, 1.742, 300, 1.742, 301, 4.259, 302, 3.885, 308, 1.742, 363, 3.224, 364, 2.798, 410, 1.513, 412, 1.742, 459, 1.512, 495, 1.742, 496, 1.742, 497, 2.659, 498, 2.659, 499, 3.224, 500, 3.224, 501, 3.87, 502, 2.091, 503, 2.091, 504, 2.091, 505, 2.091, 506, 3.607, 507, 2.091, 508, 2.091, 509, 2.798, 510, 2.091, 511, 4.841, 512, 2.091, 513, 2.091, 514, 2.091, 515, 2.091, 516, 2.091, 517, 2.091, 518, 2.091, 519, 2.091, 520, 2.091, 521, 2.091, 522, 2.091, 523, 2.091, 524, 2.091, 525, 2.091, 526, 1.512, 527, 1.512, 528, 1.742, 529, 1.742, 530, 2.091, 531, 2.091, 532, 2.091, 533, 3.191, 534, 2.091, 535, 4.33, 536, 2.091, 537, 2.091, 538, 2.091, 539, 2.091, 540, 4.33, 541, 2.091, 542, 2.091, 543, 2.091, 544, 2.091, 545, 2.091, 546, 2.091, 547, 2.091, 548, 2.091, 549, 2.091, 550, 2.091, 551, 2.091, 552, 2.091, 553, 2.091, 554, 2.091]], ["title/classes/QuizzAttemptEntity.html", [47, 0.118, 257, 1.479]], ["body/classes/QuizzAttemptEntity.html", [12, 0.034, 19, 0.23, 20, 0.23, 21, 0.191, 28, 0.454, 46, 0.315, 47, 0.118, 48, 0.016, 49, 0.022, 50, 0.016, 59, 0.357, 63, 0.76, 64, 1.73, 66, 1.009, 70, 0.774, 80, 1.347, 110, 2.295, 119, 1.098, 130, 1.252, 139, 1.47, 155, 1.896, 177, 1.037, 180, 2.013, 244, 2.712, 246, 2.786, 251, 2.786, 253, 2.443, 257, 2.295, 258, 3.07, 259, 2.522, 260, 3.103, 261, 2.721, 263, 2.443, 264, 3.103, 265, 1.784, 266, 1.129, 321, 1.839, 461, 2.256, 479, 1.987, 496, 4.033, 555, 2.582, 556, 4.841, 557, 4.841, 558, 4.033, 559, 4.841, 560, 3.537, 561, 4.245, 562, 3.1, 563, 2.582, 564, 3.501, 565, 3.1, 566, 2.582, 567, 3.1, 568, 3.1, 569, 3.537, 570, 3.07, 571, 3.1, 572, 3.1, 573, 3.07, 574, 3.1, 575, 3.1, 576, 3.1, 577, 3.1, 578, 3.1, 579, 3.1, 580, 2.582, 581, 2.582, 582, 3.1]], ["title/classes/QuizzEntity.html", [47, 0.118, 461, 1.351]], ["body/classes/QuizzEntity.html", [12, 0.033, 19, 0.215, 20, 0.215, 21, 0.179, 28, 0.465, 46, 0.301, 47, 0.154, 48, 0.015, 49, 0.021, 50, 0.015, 59, 0.334, 63, 0.907, 64, 1.804, 66, 1.052, 70, 0.781, 80, 1.31, 119, 1.05, 130, 0.751, 139, 1.377, 155, 1.058, 177, 0.971, 180, 1.924, 230, 2.998, 231, 3.382, 232, 3.382, 233, 2.998, 246, 2.692, 250, 1.862, 251, 3.26, 253, 2.335, 258, 2.1, 259, 2.114, 260, 2.601, 261, 2.601, 263, 2.335, 264, 2.601, 265, 1.671, 266, 1.058, 267, 2.42, 312, 2.638, 314, 2.692, 321, 1.258, 325, 3.853, 327, 1.671, 461, 2.026, 478, 3.382, 564, 2.935, 573, 2.935, 583, 2.42, 584, 4.678, 585, 3.897, 586, 4.678, 587, 5.78, 588, 2.904, 589, 2.904, 590, 2.904, 591, 2.904, 592, 2.904, 593, 2.904, 594, 2.904, 595, 5.064, 596, 2.42, 597, 2.904, 598, 2.904, 599, 2.904, 600, 2.904, 601, 2.904, 602, 2.904, 603, 4.058, 604, 4.058, 605, 2.904, 606, 4.058, 607, 2.1, 608, 2.904, 609, 2.904, 610, 2.904]], ["title/modules/QuizzModule.html", [0, 1.043, 14, 1.795]], ["body/modules/QuizzModule.html", [0, 1.724, 2, 1.52, 3, 1.52, 4, 1.828, 5, 1.828, 6, 1.52, 7, 2.685, 8, 2.685, 12, 0.034, 13, 3.041, 14, 3.576, 15, 2.768, 16, 2.403, 17, 1.828, 18, 1.828, 19, 0.26, 20, 0.26, 21, 0.216, 23, 2.187, 26, 2.966, 27, 3.336, 28, 0.533, 29, 0.76, 32, 2.249, 33, 1.52, 34, 2.538, 35, 2.923, 46, 0.26, 47, 0.133, 48, 0.018, 49, 0.024, 50, 0.018, 244, 2.403, 257, 2.187, 410, 2.965, 459, 2.538, 461, 1.999, 462, 2.538, 611, 2.923, 612, 2.923, 613, 3.509, 614, 2.923, 615, 3.509, 616, 2.923, 617, 3.509, 618, 2.923, 619, 3.509]], ["title/injectables/QuizzService.html", [116, 0.958, 410, 1.479]], ["body/injectables/QuizzService.html", [12, 0.034, 19, 0.072, 20, 0.072, 21, 0.06, 28, 0.404, 29, 0.211, 33, 0.422, 46, 0.072, 47, 0.037, 48, 0.012, 49, 0.009, 50, 0.005, 59, 0.112, 60, 0.737, 61, 1.913, 63, 1.007, 66, 0.88, 68, 1.234, 69, 1.234, 70, 0.474, 71, 1.134, 76, 1.336, 77, 1.09, 80, 1.385, 88, 1.845, 89, 1.967, 104, 2.224, 110, 1.074, 116, 0.522, 117, 0.507, 119, 0.44, 125, 0.806, 130, 1.132, 131, 2.28, 137, 2.451, 139, 0.462, 143, 1.9, 147, 2.876, 155, 1.967, 164, 0.56, 168, 3.248, 174, 0.624, 175, 0.704, 195, 2.639, 204, 0.737, 228, 0.979, 230, 1.452, 231, 1.23, 232, 1.638, 233, 1.452, 244, 0.886, 249, 2.1, 250, 2.806, 257, 0.806, 259, 0.886, 266, 0.619, 270, 3.346, 279, 2.173, 297, 1.607, 314, 1.951, 321, 1.336, 340, 2.451, 345, 3.059, 356, 0.704, 361, 1.23, 364, 0.704, 369, 3.346, 371, 2.569, 372, 3.224, 382, 1.417, 386, 1.417, 391, 1.964, 402, 2.263, 410, 0.806, 444, 0.704, 461, 1.336, 462, 0.704, 473, 2.824, 476, 0.811, 478, 3.166, 479, 3.54, 490, 1.417, 491, 1.887, 492, 1.417, 493, 0.811, 497, 1.887, 498, 1.417, 499, 1.887, 500, 1.887, 506, 2.263, 509, 1.964, 511, 1.887, 526, 0.704, 527, 1.23, 528, 0.811, 529, 0.811, 558, 0.811, 560, 1.887, 569, 2.263, 570, 1.964, 580, 2.263, 581, 0.811, 585, 0.811, 607, 0.704, 616, 0.811, 618, 0.811, 620, 0.811, 621, 2.265, 622, 2.265, 623, 2.265, 624, 2.265, 625, 2.265, 626, 2.265, 627, 2.265, 628, 2.716, 629, 3.084, 630, 1.701, 631, 0.973, 632, 2.265, 633, 2.265, 634, 2.265, 635, 0.973, 636, 0.973, 637, 2.716, 638, 0.973, 639, 1.701, 640, 0.973, 641, 0.973, 642, 2.716, 643, 0.973, 644, 0.973, 645, 3.39, 646, 0.973, 647, 1.701, 648, 0.973, 649, 0.973, 650, 0.973, 651, 0.973, 652, 0.973, 653, 0.973, 654, 0.973, 655, 1.701, 656, 0.973, 657, 0.973, 658, 0.973, 659, 0.973, 660, 1.417, 661, 0.973, 662, 0.973, 663, 0.973, 664, 0.973, 665, 0.973, 666, 0.973, 667, 0.973, 668, 1.701, 669, 2.265, 670, 0.973, 671, 2.265, 672, 0.973, 673, 1.701, 674, 1.701, 675, 1.701, 676, 0.973, 677, 0.973, 678, 1.701, 679, 0.973, 680, 0.973, 681, 0.973, 682, 0.973, 683, 1.701, 684, 0.973, 685, 0.973, 686, 0.973, 687, 0.973, 688, 0.973, 689, 0.973, 690, 0.973, 691, 2.265, 692, 1.701, 693, 0.973, 694, 1.701, 695, 0.973, 696, 0.973, 697, 0.973, 698, 1.701, 699, 2.265, 700, 0.973, 701, 0.973, 702, 1.701, 703, 0.973, 704, 0.973, 705, 0.973, 706, 0.973, 707, 0.973, 708, 0.973, 709, 0.973, 710, 0.973, 711, 0.973, 712, 0.973, 713, 0.973, 714, 0.973, 715, 1.701, 716, 0.973, 717, 0.973, 718, 3.084, 719, 3.39, 720, 0.973, 721, 3.87, 722, 0.973, 723, 3.084, 724, 2.716, 725, 0.973, 726, 2.716, 727, 0.973, 728, 0.973, 729, 0.973, 730, 0.973, 731, 0.973, 732, 0.973, 733, 0.973, 734, 0.973, 735, 0.973, 736, 0.973, 737, 0.973, 738, 0.973, 739, 0.973, 740, 0.973, 741, 0.973, 742, 0.973, 743, 0.973, 744, 0.973, 745, 0.973]], ["title/classes/UpdateQuestionDto.html", [47, 0.118, 285, 1.795]], ["body/classes/UpdateQuestionDto.html", [12, 0.033, 19, 0.283, 20, 0.283, 21, 0.235, 28, 0.425, 46, 0.362, 47, 0.185, 48, 0.02, 49, 0.025, 50, 0.02, 59, 0.44, 63, 1.07, 64, 1.649, 66, 0.961, 70, 0.698, 71, 1.998, 119, 1.261, 130, 0.988, 177, 1.277, 206, 3.882, 207, 3.441, 208, 3.882, 215, 2.448, 216, 4.089, 218, 2.762, 220, 2.762, 221, 3.182, 222, 3.882, 223, 4.06, 224, 2.448, 225, 4.06, 226, 4.06, 227, 3.182, 285, 3.089, 746, 3.182, 747, 4.874, 748, 3.819, 749, 3.819, 750, 3.819, 751, 3.819, 752, 5.654]], ["title/classes/UserEntity.html", [47, 0.118, 80, 0.807]], ["body/classes/UserEntity.html", [12, 0.034, 19, 0.226, 20, 0.226, 21, 0.188, 28, 0.473, 46, 0.226, 47, 0.159, 48, 0.016, 49, 0.022, 50, 0.016, 59, 0.552, 63, 1.047, 64, 1.763, 66, 1.028, 70, 0.78, 80, 1.241, 119, 1.085, 130, 0.788, 177, 1.018, 180, 1.988, 246, 2.76, 250, 1.952, 251, 3.119, 253, 2.413, 257, 2.45, 259, 2.498, 263, 2.413, 265, 1.752, 266, 1.109, 321, 2.427, 325, 3.469, 327, 1.752, 391, 3.469, 461, 2.239, 479, 1.952, 563, 3.494, 564, 3.033, 566, 2.537, 573, 3.737, 596, 2.537, 607, 2.202, 660, 4.305, 753, 2.537, 754, 4.797, 755, 4.797, 756, 3.996, 757, 3.996, 758, 4.797, 759, 4.797, 760, 3.045, 761, 3.045, 762, 3.045, 763, 3.045, 764, 3.045, 765, 3.045, 766, 3.045, 767, 3.045, 768, 3.045, 769, 3.045, 770, 3.045, 771, 3.045, 772, 3.045, 773, 3.045, 774, 3.045, 775, 3.045]], ["title/modules/UserModule.html", [0, 1.043, 15, 1.479]], ["body/modules/UserModule.html", [0, 1.853, 2, 1.772, 3, 1.772, 4, 2.131, 5, 2.131, 6, 1.772, 7, 2.651, 8, 2.651, 12, 0.033, 15, 2.922, 16, 2.651, 17, 2.131, 18, 2.131, 19, 0.304, 20, 0.304, 21, 0.252, 28, 0.506, 29, 0.885, 32, 2.622, 33, 1.772, 46, 0.304, 47, 0.155, 48, 0.021, 49, 0.026, 50, 0.021, 80, 1.058, 127, 2.74, 776, 3.408, 777, 3.408, 778, 3.408, 779, 4.091, 780, 3.408, 781, 4.091, 782, 4.091, 783, 4.091, 784, 4.091]], ["title/injectables/UserService.html", [116, 0.958, 127, 1.351]], ["body/injectables/UserService.html", [12, 0.034, 19, 0.286, 20, 0.286, 21, 0.237, 28, 0.495, 29, 0.834, 33, 1.668, 46, 0.286, 47, 0.146, 48, 0.02, 49, 0.025, 50, 0.02, 59, 0.443, 61, 1.402, 63, 0.877, 66, 0.877, 68, 1.402, 69, 1.402, 70, 0.5, 71, 1.288, 80, 0.996, 88, 1.402, 89, 1.402, 104, 1.668, 116, 1.505, 117, 2.006, 119, 1.267, 125, 2.323, 127, 2.123, 130, 0.996, 131, 2.006, 143, 2.006, 155, 1.784, 266, 1.402, 345, 4.101, 356, 2.785, 369, 3.543, 756, 4.082, 780, 3.208, 785, 3.208, 786, 5.389, 787, 3.851, 788, 3.851, 789, 4.9, 790, 3.851, 791, 3.851, 792, 3.851]], ["title/guards/WsGuard.html", [446, 1.999, 793, 2.256]], ["body/guards/WsGuard.html", [12, 0.034, 19, 0.262, 20, 0.262, 21, 0.217, 28, 0.479, 29, 0.763, 46, 0.262, 47, 0.134, 48, 0.018, 49, 0.024, 50, 0.018, 59, 0.406, 60, 2.005, 61, 1.882, 66, 0.829, 68, 1.686, 69, 1.686, 70, 0.602, 71, 1.548, 76, 1.528, 77, 2.967, 82, 2.825, 83, 2.551, 88, 1.686, 89, 1.284, 104, 2.238, 110, 1.672, 116, 1.422, 125, 2.195, 126, 2.551, 127, 2.533, 140, 2.551, 143, 2.411, 155, 1.686, 163, 2.261, 164, 2.03, 174, 2.261, 321, 1.528, 396, 2.938, 446, 2.967, 458, 2.938, 486, 2.938, 794, 3.527, 795, 2.938, 796, 5.486, 797, 3.527, 798, 4.629, 799, 3.527, 800, 3.527, 801, 2.551, 802, 3.527, 803, 3.527, 804, 3.527, 805, 3.527, 806, 3.527, 807, 3.527, 808, 3.527, 809, 3.527, 810, 3.527, 811, 3.527, 812, 3.527]], ["title/coverage.html", [813, 3.552]], ["body/coverage.html", [6, 1.161, 12, 0.033, 21, 0.165, 24, 1.717, 25, 1.542, 26, 1.542, 37, 1.717, 40, 1.937, 47, 0.222, 48, 0.014, 49, 0.02, 50, 0.014, 51, 2.122, 52, 2.232, 70, 0.348, 80, 0.693, 82, 1.27, 95, 1.542, 96, 1.937, 105, 1.937, 116, 1.588, 118, 2.232, 127, 1.161, 141, 1.542, 147, 1.395, 176, 1.542, 178, 2.232, 182, 1.717, 184, 2.232, 186, 2.232, 204, 1.161, 205, 2.232, 228, 1.542, 229, 2.232, 244, 1.395, 245, 2.232, 257, 1.27, 269, 2.232, 285, 1.542, 297, 1.27, 312, 1.395, 313, 2.232, 337, 2.232, 394, 2.232, 395, 2.232, 410, 1.27, 446, 1.717, 448, 1.937, 449, 1.937, 450, 1.937, 451, 1.937, 452, 1.937, 453, 1.937, 454, 1.937, 455, 1.937, 456, 1.937, 457, 1.937, 461, 1.161, 475, 1.937, 495, 2.232, 555, 2.232, 570, 4.682, 583, 2.232, 620, 2.232, 746, 2.232, 753, 2.232, 785, 2.232, 793, 1.937, 795, 2.232, 801, 1.937, 813, 2.232, 814, 2.679, 815, 2.679, 816, 2.679, 817, 5.062, 818, 6.211, 819, 6.259, 820, 1.937, 821, 2.232, 822, 2.232, 823, 2.232, 824, 2.232, 825, 2.232, 826, 4.476, 827, 2.679, 828, 2.679, 829, 3.833, 830, 2.679, 831, 2.232, 832, 2.679, 833, 4.476, 834, 2.679, 835, 4.476, 836, 3.833, 837, 2.679, 838, 2.679, 839, 2.679, 840, 2.679, 841, 2.679]], ["title/dependencies.html", [3, 1.626, 842, 2.602]], ["body/dependencies.html", [3, 1.516, 12, 0.034, 29, 0.758, 33, 1.516, 47, 0.196, 48, 0.018, 49, 0.024, 50, 0.018, 74, 2.916, 98, 2.531, 100, 2.244, 108, 2.952, 109, 3.331, 138, 2.916, 193, 4.289, 215, 2.244, 224, 2.952, 266, 1.677, 327, 2.65, 444, 2.531, 445, 2.916, 526, 2.531, 527, 2.531, 820, 2.531, 843, 5.148, 844, 3.5, 845, 4.606, 846, 4.606, 847, 5.148, 848, 4.606, 849, 3.5, 850, 3.5, 851, 3.5, 852, 3.5, 853, 3.5, 854, 4.289, 855, 3.5, 856, 3.5, 857, 3.5, 858, 3.5, 859, 3.5, 860, 3.5, 861, 3.5, 862, 3.5, 863, 3.5, 864, 3.5, 865, 3.5, 866, 3.5, 867, 3.5, 868, 3.5, 869, 3.5, 870, 3.5, 871, 3.5, 872, 3.5, 873, 3.5, 874, 3.5, 875, 3.5, 876, 3.5, 877, 3.5, 878, 3.5, 879, 3.5, 880, 3.5, 881, 4.606, 882, 3.5, 883, 3.5, 884, 3.5, 885, 3.5, 886, 3.5, 887, 3.5, 888, 3.5, 889, 3.5, 890, 3.5, 891, 3.5]], ["title/miscellaneous/functions.html", [892, 1.668, 893, 3.127]], ["body/miscellaneous/functions.html", [6, 2.598, 12, 0.029, 48, 0.025, 49, 0.029, 50, 0.025, 59, 0.566, 831, 4.099, 892, 3.154, 893, 4.099, 894, 4.921]], ["title/index.html", [59, 0.359, 895, 2.599]], ["body/index.html", [0, 1.13, 1, 3.926, 2, 1.464, 3, 1.464, 4, 1.761, 5, 1.761, 6, 1.464, 7, 1.761, 8, 1.761, 9, 2.816, 10, 2.816, 11, 3.554, 12, 0.033, 13, 3.072, 14, 3.525, 15, 2.84, 16, 2.344, 17, 1.761, 18, 1.761, 23, 1.603, 48, 0.017, 49, 0.023, 50, 0.017, 82, 2.796, 91, 2.816, 92, 2.816, 94, 2.816, 95, 3.393, 117, 1.761, 127, 2.555, 177, 1.13, 182, 2.167, 297, 2.796, 329, 2.816, 330, 2.816, 331, 2.816, 361, 3.255, 410, 2.796, 611, 2.816, 612, 2.816, 614, 2.816, 776, 2.816, 777, 2.816, 778, 2.816, 793, 2.444, 895, 2.816, 896, 4.501, 897, 3.38, 898, 3.38]], ["title/modules.html", [2, 1.847]], ["body/modules.html", [1, 2.964, 2, 2.003, 11, 2.661, 12, 0.028, 13, 2.409, 14, 2.661, 15, 2.192, 48, 0.024, 49, 0.028, 50, 0.024, 899, 6.17, 900, 6.17, 901, 6.17, 902, 6.17]], ["title/miscellaneous/variables.html", [892, 1.668, 903, 3.127]], ["body/miscellaneous/variables.html", [12, 0.034, 40, 2.827, 48, 0.014, 49, 0.02, 50, 0.014, 59, 0.317, 63, 1.093, 70, 0.81, 96, 1.992, 101, 1.765, 105, 2.827, 106, 2.294, 107, 2.294, 108, 1.765, 109, 1.992, 110, 1.306, 111, 2.294, 112, 1.992, 113, 2.294, 114, 2.294, 115, 2.294, 130, 1.612, 131, 3.246, 321, 1.193, 368, 2.294, 448, 3.286, 449, 3.286, 450, 3.286, 451, 3.286, 452, 3.286, 453, 3.286, 454, 3.286, 455, 3.286, 456, 3.286, 457, 3.286, 475, 3.286, 509, 1.992, 757, 2.294, 801, 3.286, 817, 2.294, 820, 3.286, 821, 3.786, 822, 2.294, 823, 2.294, 824, 2.294, 825, 3.257, 854, 2.294, 892, 1.765, 903, 2.294, 904, 6.103, 905, 2.754, 906, 2.754, 907, 2.754, 908, 2.754, 909, 2.754, 910, 2.754, 911, 2.754, 912, 2.754, 913, 3.909, 914, 2.754, 915, 3.909, 916, 2.754, 917, 2.754, 918, 2.754, 919, 2.754, 920, 2.754, 921, 2.754, 922, 2.754, 923, 2.754, 924, 2.754, 925, 2.754, 926, 2.754, 927, 2.754, 928, 2.754, 929, 2.754]]], "invertedIndex": [["", { "_index": 12, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "classes/JwtGaurd.html": {}, "interfaces/JwtPayload.html": {}, "injectables/JwtStrategy.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "controllers/QuestionController.html": {}, "classes/QuestionEntity.html": {}, "modules/QuestionModule.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {}, "coverage.html": {}, "dependencies.html": {}, "miscellaneous/functions.html": {}, "index.html": {}, "modules.html": {}, "miscellaneous/variables.html": {} } }], ["0", { "_index": 570, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {}, "injectables/QuizzService.html": {}, "coverage.html": {} } }], ["0.0.14", { "_index": 855, "title": {}, "body": { "dependencies.html": {} } }], ["0.1.13", { "_index": 884, "title": {}, "body": { "dependencies.html": {} } }], ["0.12.2", { "_index": 867, "title": {}, "body": { "dependencies.html": {} } }], ["0.14.0", { "_index": 852, "title": {}, "body": { "dependencies.html": {} } }], ["0.2.26", { "_index": 891, "title": {}, "body": { "dependencies.html": {} } }], ["0.20.0", { "_index": 864, "title": {}, "body": { "dependencies.html": {} } }], ["0.3.1", { "_index": 865, "title": {}, "body": { "dependencies.html": {} } }], ["0.4.1", { "_index": 875, "title": {}, "body": { "dependencies.html": {} } }], ["0.9.1", { "_index": 866, "title": {}, "body": { "dependencies.html": {} } }], ["0/1", { "_index": 819, "title": {}, "body": { "coverage.html": {} } }], ["0/10", { "_index": 837, "title": {}, "body": { "coverage.html": {} } }], ["0/12", { "_index": 838, "title": {}, "body": { "coverage.html": {} } }], ["0/17", { "_index": 839, "title": {}, "body": { "coverage.html": {} } }], ["0/2", { "_index": 830, "title": {}, "body": { "coverage.html": {} } }], ["0/3", { "_index": 826, "title": {}, "body": { "coverage.html": {} } }], ["0/4", { "_index": 833, "title": {}, "body": { "coverage.html": {} } }], ["0/5", { "_index": 836, "title": {}, "body": { "coverage.html": {} } }], ["0/6", { "_index": 834, "title": {}, "body": { "coverage.html": {} } }], ["0/7", { "_index": 829, "title": {}, "body": { "coverage.html": {} } }], ["0/8", { "_index": 835, "title": {}, "body": { "coverage.html": {} } }], ["1", { "_index": 361, "title": {}, "body": { "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {}, "index.html": {} } }], ["1.17.0", { "_index": 857, "title": {}, "body": { "dependencies.html": {} } }], ["1.17.1", { "_index": 871, "title": {}, "body": { "dependencies.html": {} } }], ["1/2", { "_index": 828, "title": {}, "body": { "coverage.html": {} } }], ["10", { "_index": 898, "title": {}, "body": { "index.html": {} } }], ["2.0.0", { "_index": 877, "title": {}, "body": { "dependencies.html": {} } }], ["2.2.1", { "_index": 874, "title": {}, "body": { "dependencies.html": {} } }], ["2.8.27", { "_index": 863, "title": {}, "body": { "dependencies.html": {} } }], ["3", { "_index": 897, "title": {}, "body": { "index.html": {} } }], ["3.0.2", { "_index": 881, "title": {}, "body": { "dependencies.html": {} } }], ["3.0.3", { "_index": 861, "title": {}, "body": { "dependencies.html": {} } }], ["4.0.0", { "_index": 878, "title": {}, "body": { "dependencies.html": {} } }], ["4.1.5", { "_index": 890, "title": {}, "body": { "dependencies.html": {} } }], ["4.7.5", { "_index": 849, "title": {}, "body": { "dependencies.html": {} } }], ["5", { "_index": 896, "title": {}, "body": { "index.html": {} } }], ["5.0.0", { "_index": 868, "title": {}, "body": { "dependencies.html": {} } }], ["5.1.0", { "_index": 873, "title": {}, "body": { "dependencies.html": {} } }], ["5.1.4", { "_index": 859, "title": {}, "body": { "dependencies.html": {} } }], ["50", { "_index": 827, "title": {}, "body": { "coverage.html": {} } }], ["6.5.4", { "_index": 887, "title": {}, "body": { "dependencies.html": {} } }], ["60000", { "_index": 925, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["7.0.0", { "_index": 843, "title": {}, "body": { "dependencies.html": {} } }], ["7.1.0", { "_index": 845, "title": {}, "body": { "dependencies.html": {} } }], ["7.1.4", { "_index": 850, "title": {}, "body": { "dependencies.html": {} } }], ["7.5.2", { "_index": 848, "title": {}, "body": { "dependencies.html": {} } }], ["7d", { "_index": 115, "title": {}, "body": { "modules/AuthModule.html": {}, "miscellaneous/variables.html": {} } }], ["8.2.0", { "_index": 870, "title": {}, "body": { "dependencies.html": {} } }], ["8.3.3", { "_index": 880, "title": {}, "body": { "dependencies.html": {} } }], ["accesstoken", { "_index": 158, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["addnewquestion", { "_index": 621, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["addoldquestion", { "_index": 622, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["afterinit", { "_index": 401, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["api/auth", { "_index": 58, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["apiproperty", { "_index": 214, "title": {}, "body": { "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {} } }], ["apiproperty()@isnotempty()@arrayminsize(1", { "_index": 236, "title": {}, "body": { "classes/NewQuizDto.html": {} } }], ["apiproperty()@isnotempty()@isarray()@arrayminsize(2", { "_index": 211, "title": {}, "body": { "classes/NewQuestionDto.html": {} } }], ["apiproperty()@isnotempty()@isdatestring", { "_index": 234, "title": {}, "body": { "classes/NewQuizDto.html": {} } }], ["apiproperty()@isnotempty()@isstring", { "_index": 238, "title": {}, "body": { "classes/NewQuizDto.html": {} } }], ["apiproperty()@isnotempty()@isstring()@minlength(5)@maxlength(100", { "_index": 209, "title": {}, "body": { "classes/NewQuestionDto.html": {} } }], ["apipropertyoptional", { "_index": 752, "title": {}, "body": { "classes/UpdateQuestionDto.html": {} } }], ["apipropertyoptional()@isnotempty()@isarray()@arrayminsize(2", { "_index": 749, "title": {}, "body": { "classes/UpdateQuestionDto.html": {} } }], ["apipropertyoptional()@isnotempty()@isstring()@minlength(5)@maxlength(100", { "_index": 747, "title": {}, "body": { "classes/UpdateQuestionDto.html": {} } }], ["appmodule", { "_index": 1, "title": { "modules/AppModule.html": {} }, "body": { "modules/AppModule.html": {}, "index.html": {}, "modules.html": {} } }], ["args", { "_index": 434, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["arr", { "_index": 358, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["array", { "_index": 320, "title": {}, "body": { "classes/QuestionEntity.html": {} } }], ["arrayminsize", { "_index": 220, "title": {}, "body": { "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/UpdateQuestionDto.html": {} } }], ["arrayminsize(1", { "_index": 243, "title": {}, "body": { "classes/NewQuizDto.html": {} } }], ["arrayminsize(2", { "_index": 227, "title": {}, "body": { "classes/NewQuestionDto.html": {}, "classes/UpdateQuestionDto.html": {} } }], ["async", { "_index": 61, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "controllers/QuestionController.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "injectables/QuizzService.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {} } }], ["attempt", { "_index": 694, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["attempt.gateway", { "_index": 39, "title": {}, "body": { "modules/AppModule.html": {} } }], ["attempt.gateway.ts", { "_index": 395, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "coverage.html": {} } }], ["attempt.gateway.ts:117", { "_index": 441, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["attempt.gateway.ts:134", { "_index": 425, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["attempt.gateway.ts:166", { "_index": 422, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["attempt.gateway.ts:33", { "_index": 411, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["attempt.gateway.ts:36", { "_index": 416, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["attempt.gateway.ts:37", { "_index": 414, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["attempt.gateway.ts:39", { "_index": 417, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["attempt.gateway.ts:43", { "_index": 438, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["attempt.gateway.ts:49", { "_index": 435, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["attempt.gateway.ts:56", { "_index": 431, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["attempt.gateway.ts:76", { "_index": 428, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["attempt_question", { "_index": 448, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["attemptfinished", { "_index": 556, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["attemptid", { "_index": 473, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {} } }], ["attemptquestion", { "_index": 402, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {} } }], ["attemptquestion(server", { "_index": 419, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["attemptquestion(user", { "_index": 636, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["attemptquiz", { "_index": 627, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["attemptquiz(user", { "_index": 639, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["auth", { "_index": 54, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["auth(id_token", { "_index": 62, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["auth.service", { "_index": 83, "title": {}, "body": { "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "guards/WsGuard.html": {} } }], ["auth/auth.controller", { "_index": 30, "title": {}, "body": { "modules/AppModule.html": {} } }], ["auth/auth.module", { "_index": 31, "title": {}, "body": { "modules/AppModule.html": {} } }], ["auth/jwt.gaurd", { "_index": 294, "title": {}, "body": { "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} } }], ["auth/ws.gaurd", { "_index": 447, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["authcontroller", { "_index": 24, "title": { "controllers/AuthController.html": {} }, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "coverage.html": {} } }], ["authcontroller,questioncontroller,quizcontroller", { "_index": 45, "title": {}, "body": { "modules/AppModule.html": {} } }], ["authenticateuser", { "_index": 120, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["authguard", { "_index": 179, "title": {}, "body": { "classes/JwtGaurd.html": {} } }], ["authguard('jwt", { "_index": 181, "title": {}, "body": { "classes/JwtGaurd.html": {} } }], ["authmodule", { "_index": 11, "title": { "modules/AuthModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "index.html": {}, "modules.html": {} } }], ["authorization", { "_index": 75, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["authservice", { "_index": 82, "title": { "injectables/AuthService.html": {} }, "body": { "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "guards/WsGuard.html": {}, "coverage.html": {}, "index.html": {} } }], ["await", { "_index": 89, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "controllers/QuestionController.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "injectables/QuizzService.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {} } }], ["axios", { "_index": 138, "title": {}, "body": { "injectables/AuthService.html": {}, "dependencies.html": {} } }], ["axios.get", { "_index": 161, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["badrequestexception", { "_index": 137, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {} } }], ["badrequestexception('invalid", { "_index": 720, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["badrequestexception('no", { "_index": 724, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["base", { "_index": 56, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["baseentity", { "_index": 246, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {}, "classes/QuestionEntity.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "classes/UserEntity.html": {} } }], ["baseurl", { "_index": 825, "title": {}, "body": { "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["bearertoken", { "_index": 802, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["body", { "_index": 78, "title": {}, "body": { "controllers/AuthController.html": {}, "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} } }], ["body('enddatetime", { "_index": 545, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["body('id_token", { "_index": 87, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["body('startdatetime", { "_index": 544, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["boolean", { "_index": 560, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {}, "injectables/QuizzService.html": {} } }], ["bootstrap", { "_index": 6, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/QuestionModule.html": {}, "modules/QuizzModule.html": {}, "modules/UserModule.html": {}, "coverage.html": {}, "miscellaneous/functions.html": {}, "index.html": {} } }], ["browse", { "_index": 902, "title": {}, "body": { "modules.html": {} } }], ["browser", { "_index": 899, "title": {}, "body": { "modules.html": {} } }], ["c", { "_index": 491, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {} } }], ["c.attemptfinished", { "_index": 493, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {} } }], ["c.optionchoosed", { "_index": 677, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["c.questionid", { "_index": 676, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["c.quizz.quizzid", { "_index": 492, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {} } }], ["cache", { "_index": 368, "title": {}, "body": { "injectables/QuestionService.html": {}, "miscellaneous/variables.html": {} } }], ["canactivate", { "_index": 796, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["canactivate(context", { "_index": 798, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["canattemptquiz", { "_index": 628, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["canattemptquiz(quiz", { "_index": 641, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["canattemptquizz", { "_index": 484, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["cascade", { "_index": 261, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {}, "classes/QuestionEntity.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {} } }], ["cascade',eager:true", { "_index": 582, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["catch", { "_index": 174, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {}, "guards/WsGuard.html": {} } }], ["checkforpreviousattempts", { "_index": 642, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["choosedoption", { "_index": 637, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["class", { "_index": 47, "title": { "classes/JwtGaurd.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "classes/QuestionEntity.html": {}, "classes/QuizAttemptGateway.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {} }, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "classes/JwtGaurd.html": {}, "injectables/JwtStrategy.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "controllers/QuestionController.html": {}, "classes/QuestionEntity.html": {}, "modules/QuestionModule.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {}, "coverage.html": {}, "dependencies.html": {} } }], ["classes", { "_index": 177, "title": {}, "body": { "classes/JwtGaurd.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "classes/QuestionEntity.html": {}, "classes/QuizAttemptGateway.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "index.html": {} } }], ["classtoplain", { "_index": 460, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["classtoplain(quiz", { "_index": 483, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["client", { "_index": 436, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["client.conn.remoteaddress", { "_index": 471, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["client.id", { "_index": 470, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["cluster_appmodule", { "_index": 9, "title": {}, "body": { "modules/AppModule.html": {}, "index.html": {} } }], ["cluster_appmodule_imports", { "_index": 10, "title": {}, "body": { "modules/AppModule.html": {}, "index.html": {} } }], ["cluster_authmodule", { "_index": 91, "title": {}, "body": { "modules/AuthModule.html": {}, "index.html": {} } }], ["cluster_authmodule_exports", { "_index": 94, "title": {}, "body": { "modules/AuthModule.html": {}, "index.html": {} } }], ["cluster_authmodule_imports", { "_index": 93, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["cluster_authmodule_providers", { "_index": 92, "title": {}, "body": { "modules/AuthModule.html": {}, "index.html": {} } }], ["cluster_questionmodule", { "_index": 329, "title": {}, "body": { "modules/QuestionModule.html": {}, "index.html": {} } }], ["cluster_questionmodule_exports", { "_index": 331, "title": {}, "body": { "modules/QuestionModule.html": {}, "index.html": {} } }], ["cluster_questionmodule_providers", { "_index": 330, "title": {}, "body": { "modules/QuestionModule.html": {}, "index.html": {} } }], ["cluster_quizzmodule", { "_index": 611, "title": {}, "body": { "modules/QuizzModule.html": {}, "index.html": {} } }], ["cluster_quizzmodule_exports", { "_index": 614, "title": {}, "body": { "modules/QuizzModule.html": {}, "index.html": {} } }], ["cluster_quizzmodule_imports", { "_index": 613, "title": {}, "body": { "modules/QuizzModule.html": {} } }], ["cluster_quizzmodule_providers", { "_index": 612, "title": {}, "body": { "modules/QuizzModule.html": {}, "index.html": {} } }], ["cluster_usermodule", { "_index": 776, "title": {}, "body": { "modules/UserModule.html": {}, "index.html": {} } }], ["cluster_usermodule_exports", { "_index": 778, "title": {}, "body": { "modules/UserModule.html": {}, "index.html": {} } }], ["cluster_usermodule_providers", { "_index": 777, "title": {}, "body": { "modules/UserModule.html": {}, "index.html": {} } }], ["column", { "_index": 251, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {}, "classes/QuestionEntity.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "classes/UserEntity.html": {} } }], ["column('text", { "_index": 319, "title": {}, "body": { "classes/QuestionEntity.html": {} } }], ["column('uuid", { "_index": 255, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {} } }], ["column()@exclude", { "_index": 315, "title": {}, "body": { "classes/QuestionEntity.html": {} } }], ["column({default", { "_index": 561, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["column({nullable", { "_index": 766, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["common/.../ws.event.types.ts", { "_index": 904, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["common/ws.event.types", { "_index": 458, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "guards/WsGuard.html": {} } }], ["common/ws.event.types.ts", { "_index": 817, "title": {}, "body": { "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["config/.../env.ts", { "_index": 908, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["config/.../typeorm.config.ts", { "_index": 907, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["config/.../url.ts", { "_index": 905, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["config/env", { "_index": 102, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {} } }], ["config/env.ts", { "_index": 822, "title": {}, "body": { "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["config/typeorm.config", { "_index": 41, "title": {}, "body": { "modules/AppModule.html": {} } }], ["config/typeorm.config.ts", { "_index": 823, "title": {}, "body": { "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["config/url.ts", { "_index": 824, "title": {}, "body": { "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["connect", { "_index": 820, "title": {}, "body": { "coverage.html": {}, "dependencies.html": {}, "miscellaneous/variables.html": {} } }], ["connected", { "_index": 472, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["console.debug(quiz.createdby.userid,userid", { "_index": 742, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["console.log(e", { "_index": 476, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {} } }], ["console.log(ex", { "_index": 811, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["const", { "_index": 104, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {} } }], ["constructor", { "_index": 125, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {} } }], ["constructor(private", { "_index": 85, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/JwtStrategy.html": {}, "controllers/QuestionController.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {} } }], ["constructor(questionentityrepository", { "_index": 344, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["constructor(questionservice", { "_index": 631, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["constructor(quizservice", { "_index": 409, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["constructor(userentityrepository", { "_index": 787, "title": {}, "body": { "injectables/UserService.html": {} } }], ["constructor(userservice", { "_index": 126, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "guards/WsGuard.html": {} } }], ["context", { "_index": 800, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["context.args[0]?.handshake?.query?.token", { "_index": 803, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["context.args[0]?.server?.emit(unauthorized", { "_index": 812, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["context.switchtows().getdata", { "_index": 807, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["controller", { "_index": 51, "title": { "controllers/AuthController.html": {}, "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} }, "body": { "controllers/AuthController.html": {}, "controllers/QuestionController.html": {}, "controllers/QuizController.html": {}, "coverage.html": {} } }], ["controller('auth", { "_index": 84, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["controller('question", { "_index": 299, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["controller('quizz", { "_index": 530, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["controllers", { "_index": 23, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "controllers/QuestionController.html": {}, "modules/QuestionModule.html": {}, "controllers/QuizController.html": {}, "modules/QuizzModule.html": {}, "index.html": {} } }], ["correctanswer", { "_index": 206, "title": {}, "body": { "classes/NewQuestionDto.html": {}, "classes/QuestionEntity.html": {}, "classes/UpdateQuestionDto.html": {} } }], ["coverage", { "_index": 813, "title": { "coverage.html": {} }, "body": { "coverage.html": {} } }], ["created", { "_index": 389, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["createdat", { "_index": 584, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["createdatecolumn", { "_index": 603, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["createdby", { "_index": 314, "title": {}, "body": { "classes/QuestionEntity.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {} } }], ["createnewquestion", { "_index": 338, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["createnewquiz", { "_index": 623, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["createuserentity", { "_index": 121, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["data", { "_index": 163, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "guards/WsGuard.html": {} } }], ["data.email", { "_index": 166, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["data.name", { "_index": 167, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["data.picture", { "_index": 172, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["data.user", { "_index": 486, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "guards/WsGuard.html": {} } }], ["data==='object", { "_index": 809, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["database", { "_index": 920, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["date", { "_index": 587, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["date(enddatetime", { "_index": 734, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["date(quizdata.enddatetime", { "_index": 708, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["date(quizdata.startdatetime", { "_index": 706, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["date(startdatetime", { "_index": 732, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["date.now", { "_index": 667, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["declarations", { "_index": 5, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/QuestionModule.html": {}, "modules/QuizzModule.html": {}, "modules/UserModule.html": {}, "index.html": {} } }], ["decoded", { "_index": 804, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["decorators", { "_index": 64, "title": {}, "body": { "controllers/AuthController.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "controllers/QuestionController.html": {}, "classes/QuestionEntity.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {} } }], ["default", { "_index": 130, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/JwtGaurd.html": {}, "classes/NewQuestionDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "classes/QuestionEntity.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "injectables/UserService.html": {}, "miscellaneous/variables.html": {} } }], ["defaultstrategy", { "_index": 107, "title": {}, "body": { "modules/AuthModule.html": {}, "miscellaneous/variables.html": {} } }], ["defined", { "_index": 66, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "controllers/QuestionController.html": {}, "classes/QuestionEntity.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {} } }], ["delete", { "_index": 293, "title": {}, "body": { "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} } }], ["delete(':id", { "_index": 308, "title": {}, "body": { "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} } }], ["delete(':id')@useguards(jwtgaurd", { "_index": 503, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["delete(':id')@useguards(jwtgaurd)@usepipes(validationpipe", { "_index": 277, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["delete(':qid/all/questions", { "_index": 541, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["delete(':qid/all/questions')@useguards(jwtgaurd)@usepipes(validationpipe", { "_index": 517, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["delete(':qid/question/:questionid", { "_index": 537, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["delete(':qid/question/:questionid')@useguards(jwtgaurd)@usepipes(validationpipe", { "_index": 520, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["deleteqa", { "_index": 271, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["deleteqa(@param('id", { "_index": 309, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["deleteqa(id", { "_index": 274, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["deletequestion", { "_index": 339, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["deletequiz", { "_index": 497, "title": {}, "body": { "controllers/QuizController.html": {}, "injectables/QuizzService.html": {} } }], ["deletequiz(@param('id", { "_index": 549, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["deletequiz(id", { "_index": 502, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["deleting", { "_index": 388, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["dependencies", { "_index": 3, "title": { "dependencies.html": {} }, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/QuestionModule.html": {}, "modules/QuizzModule.html": {}, "modules/UserModule.html": {}, "dependencies.html": {}, "index.html": {} } }], ["desc", { "_index": 739, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["description", { "_index": 55, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["disconnect", { "_index": 821, "title": {}, "body": { "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["disconnected", { "_index": 469, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["dist/**/*.entity{.js,.ts", { "_index": 923, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["documentation", { "_index": 814, "title": {}, "body": { "coverage.html": {} } }], ["dotenv", { "_index": 869, "title": {}, "body": { "dependencies.html": {} } }], ["dto/new.question", { "_index": 295, "title": {}, "body": { "controllers/QuestionController.html": {}, "injectables/QuestionService.html": {} } }], ["dto/new.quiz", { "_index": 529, "title": {}, "body": { "controllers/QuizController.html": {}, "injectables/QuizzService.html": {} } }], ["dto/update.question", { "_index": 296, "title": {}, "body": { "controllers/QuestionController.html": {}, "injectables/QuestionService.html": {} } }], ["duration", { "_index": 924, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["e", { "_index": 175, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {} } }], ["eager", { "_index": 564, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "classes/UserEntity.html": {} } }], ["email", { "_index": 144, "title": {}, "body": { "injectables/AuthService.html": {}, "interfaces/JwtPayload.html": {} } }], ["email:string", { "_index": 185, "title": {}, "body": { "interfaces/JwtPayload.html": {} } }], ["enddatetime", { "_index": 230, "title": {}, "body": { "classes/NewQuizDto.html": {}, "controllers/QuizController.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {} } }], ["entities", { "_index": 922, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["entities/question_attempt.entity", { "_index": 616, "title": {}, "body": { "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {} } }], ["entities/quizz.entity", { "_index": 462, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {} } }], ["entities/quizz_attempts.entity", { "_index": 618, "title": {}, "body": { "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {} } }], ["entity", { "_index": 263, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {}, "classes/QuestionEntity.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "classes/UserEntity.html": {} } }], ["env.db_cache_host", { "_index": 927, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["env.postgres_database", { "_index": 921, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["env.postgres_host", { "_index": 914, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["env.postgres_password", { "_index": 919, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["env.postgres_user", { "_index": 917, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["error", { "_index": 449, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["ex", { "_index": 810, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["exclude", { "_index": 325, "title": {}, "body": { "classes/QuestionEntity.html": {}, "classes/QuizzEntity.html": {}, "classes/UserEntity.html": {} } }], ["exclude()@createdatecolumn", { "_index": 588, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["exclude()@index()@column({unique", { "_index": 762, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["exclude()@manytomany(undefined", { "_index": 592, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["exclude()@manytoone(undefined", { "_index": 317, "title": {}, "body": { "classes/QuestionEntity.html": {} } }], ["exclude()@onetomany(undefined", { "_index": 596, "title": {}, "body": { "classes/QuizzEntity.html": {}, "classes/UserEntity.html": {} } }], ["exclude()@updatedatecolumn", { "_index": 601, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["expects", { "_index": 73, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["expiresin", { "_index": 114, "title": {}, "body": { "modules/AuthModule.html": {}, "miscellaneous/variables.html": {} } }], ["export", { "_index": 46, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "classes/JwtGaurd.html": {}, "interfaces/JwtPayload.html": {}, "injectables/JwtStrategy.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "controllers/QuestionController.html": {}, "classes/QuestionEntity.html": {}, "modules/QuestionModule.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {} } }], ["exports", { "_index": 8, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/QuestionModule.html": {}, "modules/QuizzModule.html": {}, "modules/UserModule.html": {}, "index.html": {} } }], ["exports:[questionservice", { "_index": 336, "title": {}, "body": { "modules/QuestionModule.html": {} } }], ["exports:[userservice", { "_index": 784, "title": {}, "body": { "modules/UserModule.html": {} } }], ["express", { "_index": 847, "title": {}, "body": { "dependencies.html": {} } }], ["extends", { "_index": 180, "title": {}, "body": { "classes/JwtGaurd.html": {}, "injectables/JwtStrategy.html": {}, "classes/QuestionAttemptEntity.html": {}, "classes/QuestionEntity.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "classes/UserEntity.html": {} } }], ["extractjwt", { "_index": 191, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["extractjwt.fromauthheaderasbearertoken", { "_index": 200, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["faker", { "_index": 872, "title": {}, "body": { "dependencies.html": {} } }], ["false", { "_index": 110, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "classes/QuizzAttemptEntity.html": {}, "injectables/QuizzService.html": {}, "guards/WsGuard.html": {}, "miscellaneous/variables.html": {} } }], ["fetch_attempt_id", { "_index": 450, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["fetch_question", { "_index": 451, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["fetch_quiz_details", { "_index": 452, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["fetchdata", { "_index": 122, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["fetchquestion", { "_index": 403, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["fetchquestion(server", { "_index": 423, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["fetchquestionforquizattempt", { "_index": 629, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["fetchquestionforquizattempt(attemptid", { "_index": 644, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["fetchquizdetails", { "_index": 404, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["fetchquizdetails(server", { "_index": 426, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["file", { "_index": 21, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "classes/JwtGaurd.html": {}, "interfaces/JwtPayload.html": {}, "injectables/JwtStrategy.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "controllers/QuestionController.html": {}, "classes/QuestionEntity.html": {}, "modules/QuestionModule.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {}, "coverage.html": {} } }], ["find", { "_index": 393, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["findbyemail", { "_index": 786, "title": {}, "body": { "injectables/UserService.html": {} } }], ["findbyid", { "_index": 343, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["findbyid(questionid", { "_index": 348, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["finish", { "_index": 456, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["finished", { "_index": 475, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["finishquiz", { "_index": 405, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["finishquiz(server", { "_index": 429, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["finishquizattempt", { "_index": 624, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["found", { "_index": 371, "title": {}, "body": { "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {} } }], ["function", { "_index": 832, "title": {}, "body": { "coverage.html": {} } }], ["functions", { "_index": 893, "title": { "miscellaneous/functions.html": {} }, "body": { "miscellaneous/functions.html": {} } }], ["get()@useguards(jwtgaurd", { "_index": 507, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["get(@query", { "_index": 547, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["get(options", { "_index": 505, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["getquiz", { "_index": 625, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["getquizzes", { "_index": 630, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["getquizzes(user", { "_index": 647, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["getuserandaccesstoken", { "_index": 123, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["given", { "_index": 726, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["google", { "_index": 74, "title": {}, "body": { "controllers/AuthController.html": {}, "dependencies.html": {} } }], ["guard", { "_index": 793, "title": { "guards/WsGuard.html": {} }, "body": { "coverage.html": {}, "index.html": {} } }], ["guards", { "_index": 794, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["handleconnection", { "_index": 406, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["handleconnection(client", { "_index": 432, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["handledisconnect", { "_index": 407, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["handledisconnect(client", { "_index": 437, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["him/her", { "_index": 378, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["host", { "_index": 913, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["http://localhost:5000/api", { "_index": 910, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${id_token.trim", { "_index": 162, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["httpstatus", { "_index": 291, "title": {}, "body": { "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} } }], ["id", { "_index": 279, "title": {}, "body": { "controllers/QuestionController.html": {}, "injectables/QuestionService.html": {}, "controllers/QuizController.html": {}, "injectables/QuizzService.html": {} } }], ["id:string,@req", { "_index": 550, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["id_token", { "_index": 72, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {} } }], ["id_token:string", { "_index": 160, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["identifier", { "_index": 815, "title": {}, "body": { "coverage.html": {} } }], ["if(!user", { "_index": 203, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["if(typeof", { "_index": 808, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["ignoreexpiration", { "_index": 154, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {} } }], ["implements", { "_index": 396, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "guards/WsGuard.html": {} } }], ["import", { "_index": 28, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "classes/JwtGaurd.html": {}, "injectables/JwtStrategy.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "controllers/QuestionController.html": {}, "classes/QuestionEntity.html": {}, "modules/QuestionModule.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {} } }], ["imports", { "_index": 27, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/QuizzModule.html": {} } }], ["imports:[typeormmodule.forfeature([questionentity", { "_index": 335, "title": {}, "body": { "modules/QuestionModule.html": {} } }], ["imports:[typeormmodule.forfeature([userentity", { "_index": 782, "title": {}, "body": { "modules/UserModule.html": {} } }], ["index", { "_index": 59, "title": { "index.html": {} }, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "interfaces/JwtPayload.html": {}, "injectables/JwtStrategy.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "controllers/QuestionController.html": {}, "classes/QuestionEntity.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {}, "miscellaneous/functions.html": {}, "miscellaneous/variables.html": {} } }], ["info", { "_index": 19, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "classes/JwtGaurd.html": {}, "interfaces/JwtPayload.html": {}, "injectables/JwtStrategy.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "controllers/QuestionController.html": {}, "classes/QuestionEntity.html": {}, "modules/QuestionModule.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {} } }], ["injectable", { "_index": 116, "title": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {}, "injectables/UserService.html": {} }, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {}, "coverage.html": {} } }], ["injectables", { "_index": 117, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {}, "injectables/UserService.html": {}, "index.html": {} } }], ["injectrepository", { "_index": 356, "title": {}, "body": { "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {}, "injectables/UserService.html": {} } }], ["injectrepository(questionattemptentity", { "_index": 665, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["injectrepository(questionentity", { "_index": 357, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["injectrepository(quizzattemptentity", { "_index": 664, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["injectrepository(quizzentity", { "_index": 663, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["injectrepository(userentity", { "_index": 791, "title": {}, "body": { "injectables/UserService.html": {} } }], ["interface", { "_index": 182, "title": { "interfaces/JwtPayload.html": {} }, "body": { "interfaces/JwtPayload.html": {}, "coverage.html": {}, "index.html": {} } }], ["interfaces", { "_index": 183, "title": {}, "body": { "interfaces/JwtPayload.html": {} } }], ["ipaginationoptions", { "_index": 506, "title": {}, "body": { "controllers/QuizController.html": {}, "injectables/QuizzService.html": {} } }], ["isarray", { "_index": 223, "title": {}, "body": { "classes/NewQuestionDto.html": {}, "classes/UpdateQuestionDto.html": {} } }], ["isdatestring", { "_index": 241, "title": {}, "body": { "classes/NewQuizDto.html": {} } }], ["isnew", { "_index": 691, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["isnotempty", { "_index": 216, "title": {}, "body": { "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/UpdateQuestionDto.html": {} } }], ["isnumber", { "_index": 219, "title": {}, "body": { "classes/NewQuestionDto.html": {} } }], ["isquizzattemptfinished", { "_index": 489, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["isstring", { "_index": 222, "title": {}, "body": { "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/UpdateQuestionDto.html": {} } }], ["jointable", { "_index": 604, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["jwt", { "_index": 108, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/JwtStrategy.html": {}, "dependencies.html": {}, "miscellaneous/variables.html": {} } }], ["jwt.payload", { "_index": 142, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {} } }], ["jwt.strategy", { "_index": 103, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["jwt_secret", { "_index": 101, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "miscellaneous/variables.html": {} } }], ["jwtfromrequest", { "_index": 199, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["jwtgaurd", { "_index": 176, "title": { "classes/JwtGaurd.html": {} }, "body": { "classes/JwtGaurd.html": {}, "controllers/QuestionController.html": {}, "controllers/QuizController.html": {}, "coverage.html": {} } }], ["jwtmodule", { "_index": 97, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["jwtmodule.register", { "_index": 111, "title": {}, "body": { "modules/AuthModule.html": {}, "miscellaneous/variables.html": {} } }], ["jwtpayload", { "_index": 141, "title": { "interfaces/JwtPayload.html": {} }, "body": { "injectables/AuthService.html": {}, "interfaces/JwtPayload.html": {}, "injectables/JwtStrategy.html": {}, "coverage.html": {} } }], ["jwtservice", { "_index": 128, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["jwtstrategy", { "_index": 95, "title": { "injectables/JwtStrategy.html": {} }, "body": { "modules/AuthModule.html": {}, "injectables/JwtStrategy.html": {}, "coverage.html": {}, "index.html": {} } }], ["legend", { "_index": 4, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/QuestionModule.html": {}, "modules/QuizzModule.html": {}, "modules/UserModule.html": {}, "index.html": {} } }], ["literal", { "_index": 420, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["logger", { "_index": 340, "title": {}, "body": { "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {} } }], ["logger('questionservice", { "_index": 352, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["logger('quizzgateway", { "_index": 413, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["logger('quizzservice", { "_index": 655, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["made", { "_index": 377, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["manytomany", { "_index": 605, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["manytomany(type", { "_index": 608, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["manytoone", { "_index": 264, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {}, "classes/QuestionEntity.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {} } }], ["manytoone(undefined", { "_index": 258, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {} } }], ["matching", { "_index": 49, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "classes/JwtGaurd.html": {}, "interfaces/JwtPayload.html": {}, "injectables/JwtStrategy.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "controllers/QuestionController.html": {}, "classes/QuestionEntity.html": {}, "modules/QuestionModule.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {}, "coverage.html": {}, "dependencies.html": {}, "miscellaneous/functions.html": {}, "index.html": {}, "modules.html": {}, "miscellaneous/variables.html": {} } }], ["maxlength", { "_index": 221, "title": {}, "body": { "classes/NewQuestionDto.html": {}, "classes/UpdateQuestionDto.html": {} } }], ["maxlength(100", { "_index": 226, "title": {}, "body": { "classes/NewQuestionDto.html": {}, "classes/UpdateQuestionDto.html": {} } }], ["metadata", { "_index": 883, "title": {}, "body": { "dependencies.html": {} } }], ["methods", { "_index": 60, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/JwtStrategy.html": {}, "controllers/QuestionController.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "injectables/QuizzService.html": {}, "guards/WsGuard.html": {} } }], ["min", { "_index": 217, "title": {}, "body": { "classes/NewQuestionDto.html": {} } }], ["minlength", { "_index": 218, "title": {}, "body": { "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/UpdateQuestionDto.html": {} } }], ["minlength(5", { "_index": 225, "title": {}, "body": { "classes/NewQuestionDto.html": {}, "classes/UpdateQuestionDto.html": {} } }], ["miscellaneous", { "_index": 892, "title": { "miscellaneous/functions.html": {}, "miscellaneous/variables.html": {} }, "body": { "miscellaneous/functions.html": {}, "miscellaneous/variables.html": {} } }], ["modify", { "_index": 376, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["module", { "_index": 0, "title": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/QuestionModule.html": {}, "modules/QuizzModule.html": {}, "modules/UserModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/QuestionModule.html": {}, "modules/QuizzModule.html": {}, "modules/UserModule.html": {}, "index.html": {} } }], ["modules", { "_index": 2, "title": { "modules.html": {} }, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/QuestionModule.html": {}, "modules/QuizzModule.html": {}, "modules/UserModule.html": {}, "index.html": {}, "modules.html": {} } }], ["multiplechoices", { "_index": 207, "title": {}, "body": { "classes/NewQuestionDto.html": {}, "classes/QuestionEntity.html": {}, "injectables/QuestionService.html": {}, "classes/UpdateQuestionDto.html": {} } }], ["multiplechoices.length", { "_index": 366, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["name", { "_index": 69, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "controllers/QuestionController.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "injectables/QuizzService.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {} } }], ["nestjs", { "_index": 526, "title": {}, "body": { "controllers/QuizController.html": {}, "injectables/QuizzService.html": {}, "dependencies.html": {} } }], ["nestjs/common", { "_index": 29, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "controllers/QuestionController.html": {}, "modules/QuestionModule.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {}, "dependencies.html": {} } }], ["nestjs/core", { "_index": 844, "title": {}, "body": { "dependencies.html": {} } }], ["nestjs/jwt", { "_index": 98, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "dependencies.html": {} } }], ["nestjs/passport", { "_index": 100, "title": {}, "body": { "modules/AuthModule.html": {}, "classes/JwtGaurd.html": {}, "injectables/JwtStrategy.html": {}, "dependencies.html": {} } }], ["nestjs/platform", { "_index": 846, "title": {}, "body": { "dependencies.html": {} } }], ["nestjs/swagger", { "_index": 215, "title": {}, "body": { "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/UpdateQuestionDto.html": {}, "dependencies.html": {} } }], ["nestjs/typeorm", { "_index": 33, "title": {}, "body": { "modules/AppModule.html": {}, "modules/QuestionModule.html": {}, "injectables/QuestionService.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "dependencies.html": {} } }], ["nestjs/websockets", { "_index": 444, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {}, "dependencies.html": {} } }], ["new", { "_index": 147, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {}, "coverage.html": {} } }], ["newarr", { "_index": 359, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["newarr.indexof(i", { "_index": 360, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["newarr.push(i", { "_index": 362, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["newqa", { "_index": 272, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["newqa(@body", { "_index": 303, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["newqa(qadata", { "_index": 280, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["newquestion", { "_index": 364, "title": {}, "body": { "injectables/QuestionService.html": {}, "controllers/QuizController.html": {}, "injectables/QuizzService.html": {} } }], ["newquestion(questiondata", { "_index": 510, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["newquestiondto", { "_index": 204, "title": { "classes/NewQuestionDto.html": {} }, "body": { "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "controllers/QuestionController.html": {}, "injectables/QuestionService.html": {}, "controllers/QuizController.html": {}, "injectables/QuizzService.html": {}, "coverage.html": {} } }], ["newquiz", { "_index": 498, "title": {}, "body": { "controllers/QuizController.html": {}, "injectables/QuizzService.html": {} } }], ["newquiz(@body", { "_index": 531, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["newquiz(data", { "_index": 514, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["newquiz.createdby", { "_index": 709, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["newquiz.enddatetime", { "_index": 707, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["newquiz.questions", { "_index": 716, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["newquiz.quizztitle", { "_index": 710, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["newquiz.save", { "_index": 717, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["newquiz.startdatetime", { "_index": 705, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["newquizattempt", { "_index": 684, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["newquizattempt.questionattempts", { "_index": 687, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["newquizattempt.quizz", { "_index": 686, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["newquizattempt.quizzattemptid", { "_index": 690, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["newquizattempt.save", { "_index": 688, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["newquizattempt.user", { "_index": 685, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["newquizdto", { "_index": 228, "title": { "classes/NewQuizDto.html": {} }, "body": { "classes/NewQuizDto.html": {}, "controllers/QuizController.html": {}, "injectables/QuizzService.html": {}, "coverage.html": {} } }], ["newuser", { "_index": 146, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["newuser.save", { "_index": 151, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["newuser.useremail", { "_index": 148, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["newuser.username", { "_index": 149, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["newuser.userphotourl", { "_index": 150, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["not_found", { "_index": 457, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["nullable", { "_index": 566, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {}, "classes/UserEntity.html": {} } }], ["number", { "_index": 569, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {}, "injectables/QuizzService.html": {} } }], ["oauth20", { "_index": 876, "title": {}, "body": { "dependencies.html": {} } }], ["ondelete", { "_index": 260, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {}, "classes/QuestionEntity.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {} } }], ["ondelete:'cascade", { "_index": 578, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["onetomany", { "_index": 573, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "classes/UserEntity.html": {} } }], ["onetomany(undefined", { "_index": 563, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {}, "classes/UserEntity.html": {} } }], ["ongatewayconnection", { "_index": 398, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["ongatewaydisconnect", { "_index": 399, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["ongatewayinit", { "_index": 397, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["optional", { "_index": 71, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "controllers/QuestionController.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {} } }], ["optionchoosed", { "_index": 247, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {} } }], ["options", { "_index": 509, "title": {}, "body": { "controllers/QuizController.html": {}, "injectables/QuizzService.html": {}, "miscellaneous/variables.html": {} } }], ["out", { "_index": 18, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/QuestionModule.html": {}, "modules/QuizzModule.html": {}, "modules/UserModule.html": {}, "index.html": {} } }], ["overview", { "_index": 895, "title": { "index.html": {} }, "body": { "index.html": {} } }], ["package", { "_index": 842, "title": { "dependencies.html": {} }, "body": {} }], ["paginate", { "_index": 527, "title": {}, "body": { "controllers/QuizController.html": {}, "injectables/QuizzService.html": {}, "dependencies.html": {} } }], ["paginate(q", { "_index": 740, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["param", { "_index": 86, "title": {}, "body": { "controllers/AuthController.html": {}, "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} } }], ["param('id", { "_index": 306, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["param('qid", { "_index": 535, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["param('questionid", { "_index": 538, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["parameters", { "_index": 68, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "controllers/QuestionController.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "injectables/QuizzService.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {} } }], ["parseint(env.db_cache_port", { "_index": 926, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["parseint(env.postgres_port", { "_index": 916, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["passport", { "_index": 193, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "dependencies.html": {} } }], ["passportauthmodules", { "_index": 105, "title": {}, "body": { "modules/AuthModule.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["passportmodule", { "_index": 99, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["passportmodule.register", { "_index": 106, "title": {}, "body": { "modules/AuthModule.html": {}, "miscellaneous/variables.html": {} } }], ["passportstrategy", { "_index": 194, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["passportstrategy(strategy", { "_index": 196, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["password", { "_index": 918, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["patch", { "_index": 292, "title": {}, "body": { "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} } }], ["patch(':id", { "_index": 305, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["patch(':id')@useguards(jwtgaurd)@usepipes(validationpipe", { "_index": 286, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["patch(':qid", { "_index": 543, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["patch(':qid')@useguards(jwtgaurd)@usepipes(validationpipe", { "_index": 523, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["path", { "_index": 57, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["payload", { "_index": 156, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "classes/QuizAttemptGateway.html": {} } }], ["pg", { "_index": 879, "title": {}, "body": { "dependencies.html": {} } }], ["photourl", { "_index": 145, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["polling", { "_index": 467, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["port", { "_index": 915, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["post", { "_index": 79, "title": {}, "body": { "controllers/AuthController.html": {}, "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} } }], ["post(':qid/question/new", { "_index": 534, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["post(':qid/question/new')@useguards(jwtgaurd)@usepipes(validationpipe", { "_index": 512, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["post('google", { "_index": 65, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["post('new", { "_index": 300, "title": {}, "body": { "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} } }], ["post('new')@useguards(jwtgaurd)@usepipes(validationpipe", { "_index": 281, "title": {}, "body": { "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} } }], ["postgres", { "_index": 912, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["prefix", { "_index": 53, "title": {}, "body": { "controllers/AuthController.html": {}, "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} } }], ["primarygeneratedcolumn", { "_index": 265, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {}, "classes/QuestionEntity.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "classes/UserEntity.html": {} } }], ["primarygeneratedcolumn('uuid", { "_index": 253, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {}, "classes/QuestionEntity.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "classes/UserEntity.html": {} } }], ["private", { "_index": 143, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {} } }], ["process.env", { "_index": 929, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["process.env.baseurl", { "_index": 909, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["promise", { "_index": 77, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {}, "guards/WsGuard.html": {} } }], ["properties", { "_index": 119, "title": {}, "body": { "injectables/AuthService.html": {}, "interfaces/JwtPayload.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "classes/QuestionEntity.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "injectables/UserService.html": {} } }], ["providers", { "_index": 7, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/QuestionModule.html": {}, "modules/QuizzModule.html": {}, "modules/UserModule.html": {}, "index.html": {} } }], ["providers:[userservice", { "_index": 783, "title": {}, "body": { "modules/UserModule.html": {} } }], ["q", { "_index": 735, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["q.orderby('q.updatedat", { "_index": 738, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["q.questionid", { "_index": 729, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["q.where('q.createdby", { "_index": 737, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["qa", { "_index": 774, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["qa.createdby", { "_index": 775, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["qadata", { "_index": 283, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["qaentity", { "_index": 660, "title": {}, "body": { "injectables/QuizzService.html": {}, "classes/UserEntity.html": {} } }], ["query", { "_index": 525, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["question", { "_index": 270, "title": {}, "body": { "controllers/QuestionController.html": {}, "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {} } }], ["question.controller", { "_index": 333, "title": {}, "body": { "modules/QuestionModule.html": {} } }], ["question.correctanswer", { "_index": 382, "title": {}, "body": { "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {} } }], ["question.createdby.userid", { "_index": 373, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["question.entity", { "_index": 334, "title": {}, "body": { "modules/QuestionModule.html": {}, "injectables/QuestionService.html": {} } }], ["question.multiplechoices", { "_index": 380, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["question.questionid", { "_index": 386, "title": {}, "body": { "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {} } }], ["question.questiontitle", { "_index": 384, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["question.save", { "_index": 387, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["question.service", { "_index": 298, "title": {}, "body": { "controllers/QuestionController.html": {}, "modules/QuestionModule.html": {} } }], ["question/dto/new.question", { "_index": 528, "title": {}, "body": { "controllers/QuizController.html": {}, "injectables/QuizzService.html": {} } }], ["question/question.controller", { "_index": 42, "title": {}, "body": { "modules/AppModule.html": {} } }], ["question/question.entity", { "_index": 607, "title": {}, "body": { "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {}, "classes/UserEntity.html": {} } }], ["question/question.module", { "_index": 35, "title": {}, "body": { "modules/AppModule.html": {}, "modules/QuizzModule.html": {} } }], ["question/question.service", { "_index": 661, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["question/quiz", { "_index": 725, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["question_attempt.entity", { "_index": 575, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["questionattempt", { "_index": 580, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {}, "injectables/QuizzService.html": {} } }], ["questionattempt.optionchoosed", { "_index": 699, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["questionattempt.questionid", { "_index": 697, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["questionattempt.quizattempt", { "_index": 581, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {}, "injectables/QuizzService.html": {} } }], ["questionattempt.save", { "_index": 701, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["questionattemptentity", { "_index": 244, "title": { "classes/QuestionAttemptEntity.html": {} }, "body": { "classes/QuestionAttemptEntity.html": {}, "classes/QuizzAttemptEntity.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {}, "coverage.html": {} } }], ["questionattemptid", { "_index": 248, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {} } }], ["questionattemptrepo", { "_index": 634, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["questionattempts", { "_index": 557, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["questioncontroller", { "_index": 25, "title": { "controllers/QuestionController.html": {} }, "body": { "modules/AppModule.html": {}, "controllers/QuestionController.html": {}, "modules/QuestionModule.html": {}, "coverage.html": {} } }], ["questiondata", { "_index": 363, "title": {}, "body": { "injectables/QuestionService.html": {}, "controllers/QuizController.html": {} } }], ["questiondata.correctanswer", { "_index": 381, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["questiondata.multiplechoices", { "_index": 379, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["questiondata.questiontitle", { "_index": 383, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["questionentity", { "_index": 312, "title": { "classes/QuestionEntity.html": {} }, "body": { "classes/QuestionEntity.html": {}, "modules/QuestionModule.html": {}, "injectables/QuestionService.html": {}, "classes/QuizzEntity.html": {}, "coverage.html": {} } }], ["questionentityrepository", { "_index": 347, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["questionid", { "_index": 249, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {}, "classes/QuestionEntity.html": {}, "injectables/QuestionService.html": {}, "controllers/QuizController.html": {}, "injectables/QuizzService.html": {} } }], ["questionmodule", { "_index": 13, "title": { "modules/QuestionModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/QuestionModule.html": {}, "modules/QuizzModule.html": {}, "index.html": {}, "modules.html": {} } }], ["questionnumber", { "_index": 645, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["questions", { "_index": 231, "title": {}, "body": { "classes/NewQuizDto.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {} } }], ["questions.push(await", { "_index": 714, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["questionservice", { "_index": 297, "title": { "injectables/QuestionService.html": {} }, "body": { "controllers/QuestionController.html": {}, "modules/QuestionModule.html": {}, "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {}, "coverage.html": {}, "index.html": {} } }], ["questiontitle", { "_index": 208, "title": {}, "body": { "classes/NewQuestionDto.html": {}, "classes/QuestionEntity.html": {}, "classes/UpdateQuestionDto.html": {} } }], ["quiz", { "_index": 479, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "classes/QuizzAttemptEntity.html": {}, "injectables/QuizzService.html": {}, "classes/UserEntity.html": {} } }], ["quiz.createdby", { "_index": 772, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["quiz.createdby.userid", { "_index": 719, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quiz.enddatetime", { "_index": 733, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quiz.enddatetime.gettime", { "_index": 494, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["quiz.questions", { "_index": 721, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quiz.questions.filter(q", { "_index": 728, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quiz.questions.length", { "_index": 488, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["quiz.questions.push(newquestion", { "_index": 722, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quiz.questions.push(question", { "_index": 727, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quiz.quizzattemptsbyusers", { "_index": 576, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["quiz.quizzid", { "_index": 668, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quiz.quizztitle", { "_index": 730, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quiz.save", { "_index": 723, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quiz.startdatetime", { "_index": 731, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quiz.startdatetime.gettime", { "_index": 666, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quizattempt", { "_index": 250, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {}, "classes/UserEntity.html": {} } }], ["quizattempt.attemptfinished", { "_index": 674, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quizattempt.questionattempts", { "_index": 268, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {} } }], ["quizattempt.questionattempts.push(questionattempt", { "_index": 700, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quizattempt.quizz", { "_index": 610, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["quizattempt.quizzattemptid", { "_index": 683, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quizattempt.save", { "_index": 702, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quizattempt.totalscore", { "_index": 698, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quizattempt.user", { "_index": 773, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["quizattempt.user.userid", { "_index": 675, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quizattemptentity", { "_index": 595, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["quizattemptgateway", { "_index": 37, "title": { "classes/QuizAttemptGateway.html": {} }, "body": { "modules/AppModule.html": {}, "classes/QuizAttemptGateway.html": {}, "coverage.html": {} } }], ["quizattemptrepo", { "_index": 633, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quizcontroller", { "_index": 26, "title": { "controllers/QuizController.html": {} }, "body": { "modules/AppModule.html": {}, "controllers/QuizController.html": {}, "modules/QuizzModule.html": {}, "coverage.html": {} } }], ["quizdata", { "_index": 704, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quizdata.questions", { "_index": 713, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quizdata.questions.length", { "_index": 712, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quizdata.quizztitle", { "_index": 711, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quizid", { "_index": 511, "title": {}, "body": { "controllers/QuizController.html": {}, "injectables/QuizzService.html": {} } }], ["quizrepo", { "_index": 632, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["quizservice", { "_index": 412, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {} } }], ["quizz", { "_index": 496, "title": {}, "body": { "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {} } }], ["quizz.controller", { "_index": 617, "title": {}, "body": { "modules/QuizzModule.html": {} } }], ["quizz.entity", { "_index": 574, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["quizz.service", { "_index": 459, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "modules/QuizzModule.html": {} } }], ["quizz/entities/quizz.entity", { "_index": 769, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["quizz/entities/quizz_attempts.entity", { "_index": 770, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["quizz/quizz", { "_index": 38, "title": {}, "body": { "modules/AppModule.html": {} } }], ["quizz/quizz.controller", { "_index": 43, "title": {}, "body": { "modules/AppModule.html": {} } }], ["quizz/quizz.module", { "_index": 36, "title": {}, "body": { "modules/AppModule.html": {} } }], ["quizz_attempts.entity", { "_index": 267, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {}, "classes/QuizzEntity.html": {} } }], ["quizzattemptentity", { "_index": 257, "title": { "classes/QuizzAttemptEntity.html": {} }, "body": { "classes/QuestionAttemptEntity.html": {}, "classes/QuizzAttemptEntity.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {}, "classes/UserEntity.html": {}, "coverage.html": {} } }], ["quizzattemptid", { "_index": 558, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {}, "injectables/QuizzService.html": {} } }], ["quizzattemptsbyusers", { "_index": 585, "title": {}, "body": { "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {} } }], ["quizzentity", { "_index": 461, "title": { "classes/QuizzEntity.html": {} }, "body": { "classes/QuizAttemptGateway.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {}, "classes/UserEntity.html": {}, "coverage.html": {} } }], ["quizzid", { "_index": 478, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {} } }], ["quizzmodule", { "_index": 14, "title": { "modules/QuizzModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/QuizzModule.html": {}, "index.html": {}, "modules.html": {} } }], ["quizzservice", { "_index": 410, "title": { "injectables/QuizzService.html": {} }, "body": { "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {}, "coverage.html": {}, "index.html": {} } }], ["quizztitle", { "_index": 232, "title": {}, "body": { "classes/NewQuizDto.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {} } }], ["received_question", { "_index": 455, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["received_quiz_details", { "_index": 453, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["redis", { "_index": 854, "title": {}, "body": { "dependencies.html": {}, "miscellaneous/variables.html": {} } }], ["reflect", { "_index": 882, "title": {}, "body": { "dependencies.html": {} } }], ["relations", { "_index": 369, "title": {}, "body": { "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {}, "injectables/UserService.html": {} } }], ["removeallquestions", { "_index": 499, "title": {}, "body": { "controllers/QuizController.html": {}, "injectables/QuizzService.html": {} } }], ["removeallquestions(quizid", { "_index": 516, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["removequestion", { "_index": 500, "title": {}, "body": { "controllers/QuizController.html": {}, "injectables/QuizzService.html": {} } }], ["removequestion(questionid", { "_index": 519, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["repository", { "_index": 345, "title": {}, "body": { "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {}, "injectables/UserService.html": {} } }], ["req", { "_index": 275, "title": {}, "body": { "controllers/QuestionController.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {} } }], ["req,@res", { "_index": 551, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["req.user", { "_index": 553, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["res", { "_index": 276, "title": {}, "body": { "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} } }], ["res.sendstatus(httpstatus.created", { "_index": 533, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["res.sendstatus(httpstatus.ok", { "_index": 540, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["res.status(httpstatus.ok).send", { "_index": 311, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["reset", { "_index": 17, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/QuestionModule.html": {}, "modules/QuizzModule.html": {}, "modules/UserModule.html": {}, "index.html": {} } }], ["result", { "_index": 48, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "classes/JwtGaurd.html": {}, "interfaces/JwtPayload.html": {}, "injectables/JwtStrategy.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "controllers/QuestionController.html": {}, "classes/QuestionEntity.html": {}, "modules/QuestionModule.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {}, "coverage.html": {}, "dependencies.html": {}, "miscellaneous/functions.html": {}, "index.html": {}, "modules.html": {}, "miscellaneous/variables.html": {} } }], ["results", { "_index": 50, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "classes/JwtGaurd.html": {}, "interfaces/JwtPayload.html": {}, "injectables/JwtStrategy.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "controllers/QuestionController.html": {}, "classes/QuestionEntity.html": {}, "modules/QuestionModule.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {}, "coverage.html": {}, "dependencies.html": {}, "miscellaneous/functions.html": {}, "index.html": {}, "modules.html": {}, "miscellaneous/variables.html": {} } }], ["return", { "_index": 88, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "controllers/QuestionController.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "injectables/QuizzService.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {} } }], ["returned", { "_index": 679, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["returns", { "_index": 76, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/JwtStrategy.html": {}, "controllers/QuestionController.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "injectables/QuizzService.html": {}, "guards/WsGuard.html": {} } }], ["rimraf", { "_index": 885, "title": {}, "body": { "dependencies.html": {} } }], ["rxjs", { "_index": 886, "title": {}, "body": { "dependencies.html": {} } }], ["secret", { "_index": 112, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "miscellaneous/variables.html": {} } }], ["secretorkey", { "_index": 201, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["selectedoption", { "_index": 680, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["server", { "_index": 400, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["server.emit(error", { "_index": 477, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["server.emit(not_found", { "_index": 481, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["server.emit(received_quiz_details", { "_index": 482, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["session", { "_index": 109, "title": {}, "body": { "modules/AuthModule.html": {}, "dependencies.html": {}, "miscellaneous/variables.html": {} } }], ["signoptions", { "_index": 113, "title": {}, "body": { "modules/AuthModule.html": {}, "miscellaneous/variables.html": {} } }], ["socket", { "_index": 433, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["socket.io", { "_index": 445, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "dependencies.html": {} } }], ["source", { "_index": 20, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "classes/JwtGaurd.html": {}, "interfaces/JwtPayload.html": {}, "injectables/JwtStrategy.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "controllers/QuestionController.html": {}, "classes/QuestionEntity.html": {}, "modules/QuestionModule.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "modules/QuizzModule.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {} } }], ["src/.../auth.module.ts", { "_index": 906, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["src/.../main.ts", { "_index": 894, "title": {}, "body": { "miscellaneous/functions.html": {} } }], ["src/app.module.ts", { "_index": 22, "title": {}, "body": { "modules/AppModule.html": {} } }], ["src/auth/auth.controller.ts", { "_index": 52, "title": {}, "body": { "controllers/AuthController.html": {}, "coverage.html": {} } }], ["src/auth/auth.controller.ts:18", { "_index": 67, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["src/auth/auth.module.ts", { "_index": 96, "title": {}, "body": { "modules/AuthModule.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["src/auth/auth.service.ts", { "_index": 118, "title": {}, "body": { "injectables/AuthService.html": {}, "coverage.html": {} } }], ["src/auth/auth.service.ts:10", { "_index": 129, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/auth/auth.service.ts:16", { "_index": 133, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/auth/auth.service.ts:28", { "_index": 136, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/auth/auth.service.ts:35", { "_index": 135, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/auth/auth.service.ts:40", { "_index": 134, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/auth/auth.service.ts:46", { "_index": 132, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/auth/jwt.gaurd.ts", { "_index": 178, "title": {}, "body": { "classes/JwtGaurd.html": {}, "coverage.html": {} } }], ["src/auth/jwt.payload.ts", { "_index": 184, "title": {}, "body": { "interfaces/JwtPayload.html": {}, "coverage.html": {} } }], ["src/auth/jwt.strategy.ts", { "_index": 186, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "coverage.html": {} } }], ["src/auth/jwt.strategy.ts:10", { "_index": 188, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["src/auth/jwt.strategy.ts:19", { "_index": 190, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["src/auth/ws.gaurd.ts", { "_index": 795, "title": {}, "body": { "guards/WsGuard.html": {}, "coverage.html": {} } }], ["src/auth/ws.gaurd.ts:13", { "_index": 799, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["src/auth/ws.gaurd.ts:7", { "_index": 797, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["src/main.ts", { "_index": 831, "title": {}, "body": { "coverage.html": {}, "miscellaneous/functions.html": {} } }], ["src/question/dto/new.question", { "_index": 242, "title": {}, "body": { "classes/NewQuizDto.html": {} } }], ["src/question/dto/new.question.ts", { "_index": 205, "title": {}, "body": { "classes/NewQuestionDto.html": {}, "coverage.html": {} } }], ["src/question/dto/new.question.ts:20", { "_index": 210, "title": {}, "body": { "classes/NewQuestionDto.html": {} } }], ["src/question/dto/new.question.ts:27", { "_index": 213, "title": {}, "body": { "classes/NewQuestionDto.html": {} } }], ["src/question/dto/new.question.ts:33", { "_index": 212, "title": {}, "body": { "classes/NewQuestionDto.html": {} } }], ["src/question/dto/update.question.ts", { "_index": 746, "title": {}, "body": { "classes/UpdateQuestionDto.html": {}, "coverage.html": {} } }], ["src/question/dto/update.question.ts:17", { "_index": 748, "title": {}, "body": { "classes/UpdateQuestionDto.html": {} } }], ["src/question/dto/update.question.ts:24", { "_index": 751, "title": {}, "body": { "classes/UpdateQuestionDto.html": {} } }], ["src/question/dto/update.question.ts:30", { "_index": 750, "title": {}, "body": { "classes/UpdateQuestionDto.html": {} } }], ["src/question/question.controller.ts", { "_index": 269, "title": {}, "body": { "controllers/QuestionController.html": {}, "coverage.html": {} } }], ["src/question/question.controller.ts:27", { "_index": 282, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["src/question/question.controller.ts:34", { "_index": 287, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["src/question/question.controller.ts:45", { "_index": 278, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["src/question/question.entity.ts", { "_index": 313, "title": {}, "body": { "classes/QuestionEntity.html": {}, "coverage.html": {} } }], ["src/question/question.entity.ts:14", { "_index": 323, "title": {}, "body": { "classes/QuestionEntity.html": {} } }], ["src/question/question.entity.ts:17", { "_index": 324, "title": {}, "body": { "classes/QuestionEntity.html": {} } }], ["src/question/question.entity.ts:21", { "_index": 316, "title": {}, "body": { "classes/QuestionEntity.html": {} } }], ["src/question/question.entity.ts:24", { "_index": 322, "title": {}, "body": { "classes/QuestionEntity.html": {} } }], ["src/question/question.entity.ts:32", { "_index": 318, "title": {}, "body": { "classes/QuestionEntity.html": {} } }], ["src/question/question.module.ts", { "_index": 332, "title": {}, "body": { "modules/QuestionModule.html": {} } }], ["src/question/question.service.ts", { "_index": 337, "title": {}, "body": { "injectables/QuestionService.html": {}, "coverage.html": {} } }], ["src/question/question.service.ts:102", { "_index": 349, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["src/question/question.service.ts:15", { "_index": 346, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["src/question/question.service.ts:21", { "_index": 353, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["src/question/question.service.ts:23", { "_index": 354, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["src/question/question.service.ts:33", { "_index": 350, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["src/question/question.service.ts:57", { "_index": 355, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["src/question/question.service.ts:92", { "_index": 351, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["src/quizz/dto/new.quiz.ts", { "_index": 229, "title": {}, "body": { "classes/NewQuizDto.html": {}, "coverage.html": {} } }], ["src/quizz/dto/new.quiz.ts:16", { "_index": 239, "title": {}, "body": { "classes/NewQuizDto.html": {} } }], ["src/quizz/dto/new.quiz.ts:21", { "_index": 240, "title": {}, "body": { "classes/NewQuizDto.html": {} } }], ["src/quizz/dto/new.quiz.ts:26", { "_index": 235, "title": {}, "body": { "classes/NewQuizDto.html": {} } }], ["src/quizz/dto/new.quiz.ts:31", { "_index": 237, "title": {}, "body": { "classes/NewQuizDto.html": {} } }], ["src/quizz/entities/question_attempt.entity.ts", { "_index": 245, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {}, "coverage.html": {} } }], ["src/quizz/entities/question_attempt.entity.ts:13", { "_index": 254, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {} } }], ["src/quizz/entities/question_attempt.entity.ts:16", { "_index": 256, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {} } }], ["src/quizz/entities/question_attempt.entity.ts:23", { "_index": 262, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {} } }], ["src/quizz/entities/question_attempt.entity.ts:26", { "_index": 252, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {} } }], ["src/quizz/entities/quizz.entity.ts", { "_index": 583, "title": {}, "body": { "classes/QuizzEntity.html": {}, "coverage.html": {} } }], ["src/quizz/entities/quizz.entity.ts:21", { "_index": 598, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["src/quizz/entities/quizz.entity.ts:24", { "_index": 599, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["src/quizz/entities/quizz.entity.ts:27", { "_index": 600, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["src/quizz/entities/quizz.entity.ts:30", { "_index": 591, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["src/quizz/entities/quizz.entity.ts:35", { "_index": 594, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["src/quizz/entities/quizz.entity.ts:42", { "_index": 590, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["src/quizz/entities/quizz.entity.ts:49", { "_index": 597, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["src/quizz/entities/quizz.entity.ts:53", { "_index": 589, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["src/quizz/entities/quizz.entity.ts:57", { "_index": 602, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["src/quizz/entities/quizz_attempts.entity.ts", { "_index": 555, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {}, "coverage.html": {} } }], ["src/quizz/entities/quizz_attempts.entity.ts:16", { "_index": 568, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["src/quizz/entities/quizz_attempts.entity.ts:23", { "_index": 567, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["src/quizz/entities/quizz_attempts.entity.ts:29", { "_index": 572, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["src/quizz/entities/quizz_attempts.entity.ts:36", { "_index": 565, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["src/quizz/entities/quizz_attempts.entity.ts:39", { "_index": 571, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["src/quizz/entities/quizz_attempts.entity.ts:42", { "_index": 562, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["src/quizz/quizz", { "_index": 394, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "coverage.html": {} } }], ["src/quizz/quizz.controller.ts", { "_index": 495, "title": {}, "body": { "controllers/QuizController.html": {}, "coverage.html": {} } }], ["src/quizz/quizz.controller.ts:31", { "_index": 515, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["src/quizz/quizz.controller.ts:40", { "_index": 513, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["src/quizz/quizz.controller.ts:53", { "_index": 521, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["src/quizz/quizz.controller.ts:66", { "_index": 518, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["src/quizz/quizz.controller.ts:78", { "_index": 524, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["src/quizz/quizz.controller.ts:91", { "_index": 508, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["src/quizz/quizz.controller.ts:98", { "_index": 504, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["src/quizz/quizz.module.ts", { "_index": 615, "title": {}, "body": { "modules/QuizzModule.html": {} } }], ["src/quizz/quizz.service.ts", { "_index": 620, "title": {}, "body": { "injectables/QuizzService.html": {}, "coverage.html": {} } }], ["src/quizz/quizz.service.ts:121", { "_index": 638, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["src/quizz/quizz.service.ts:180", { "_index": 654, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["src/quizz/quizz.service.ts:184", { "_index": 651, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["src/quizz/quizz.service.ts:202", { "_index": 649, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["src/quizz/quizz.service.ts:22", { "_index": 635, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["src/quizz/quizz.service.ts:231", { "_index": 650, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["src/quizz/quizz.service.ts:257", { "_index": 658, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["src/quizz/quizz.service.ts:283", { "_index": 657, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["src/quizz/quizz.service.ts:301", { "_index": 659, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["src/quizz/quizz.service.ts:33", { "_index": 656, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["src/quizz/quizz.service.ts:336", { "_index": 648, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["src/quizz/quizz.service.ts:344", { "_index": 652, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["src/quizz/quizz.service.ts:35", { "_index": 643, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["src/quizz/quizz.service.ts:359", { "_index": 653, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["src/quizz/quizz.service.ts:57", { "_index": 646, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["src/quizz/quizz.service.ts:92", { "_index": 640, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["src/user/user.entity", { "_index": 81, "title": {}, "body": { "controllers/AuthController.html": {}, "controllers/QuizController.html": {} } }], ["src/user/user.entity.ts", { "_index": 753, "title": {}, "body": { "classes/UserEntity.html": {}, "coverage.html": {} } }], ["src/user/user.entity.ts:17", { "_index": 764, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["src/user/user.entity.ts:20", { "_index": 765, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["src/user/user.entity.ts:25", { "_index": 763, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["src/user/user.entity.ts:28", { "_index": 767, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["src/user/user.entity.ts:34", { "_index": 761, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["src/user/user.entity.ts:42", { "_index": 768, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["src/user/user.entity.ts:48", { "_index": 760, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["src/user/user.module.ts", { "_index": 779, "title": {}, "body": { "modules/UserModule.html": {} } }], ["src/user/user.service.ts", { "_index": 785, "title": {}, "body": { "injectables/UserService.html": {}, "coverage.html": {} } }], ["src/user/user.service.ts:14", { "_index": 790, "title": {}, "body": { "injectables/UserService.html": {} } }], ["src/user/user.service.ts:7", { "_index": 788, "title": {}, "body": { "injectables/UserService.html": {} } }], ["start", { "_index": 454, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["startdatetime", { "_index": 233, "title": {}, "body": { "classes/NewQuizDto.html": {}, "controllers/QuizController.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {} } }], ["startquiz", { "_index": 408, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["startquiz(server", { "_index": 439, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["statements", { "_index": 816, "title": {}, "body": { "coverage.html": {} } }], ["strategy", { "_index": 192, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["string", { "_index": 63, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "interfaces/JwtPayload.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "controllers/QuestionController.html": {}, "classes/QuestionEntity.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "injectables/UserService.html": {}, "miscellaneous/variables.html": {} } }], ["subscribemessage", { "_index": 442, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["subscribemessage(attempt_question", { "_index": 421, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["subscribemessage(fetch_question", { "_index": 424, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["subscribemessage(fetch_quiz_details", { "_index": 427, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["subscribemessage(finish", { "_index": 430, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["subscribemessage(start", { "_index": 440, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["super", { "_index": 198, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["support", { "_index": 900, "title": {}, "body": { "modules.html": {} } }], ["svg", { "_index": 901, "title": {}, "body": { "modules.html": {} } }], ["swagger", { "_index": 888, "title": {}, "body": { "dependencies.html": {} } }], ["synchronize", { "_index": 928, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["t", { "_index": 669, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["table", { "_index": 841, "title": {}, "body": { "coverage.html": {} } }], ["tablesort(document.getelementbyid('coverage", { "_index": 840, "title": {}, "body": { "coverage.html": {} } }], ["this.authservice.authenticateuser(id_token", { "_index": 90, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["this.authservice.verifyjwt(bearertoken", { "_index": 805, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["this.canattemptquiz(quiz", { "_index": 682, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.canattemptquiz(quizattempt.quizz", { "_index": 673, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.createuserentity", { "_index": 171, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.fetchdata(id_token", { "_index": 165, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.getuserandaccesstoken(newuser", { "_index": 173, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.getuserandaccesstoken(user", { "_index": 170, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.jwtservice.sign(payload", { "_index": 159, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.jwtservice.verify(token", { "_index": 153, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.logger.debug", { "_index": 678, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.logger.debug(newquizattempt,\"[new", { "_index": 689, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.logger.debug(question,\"question", { "_index": 696, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.logger.debug(quizattempt", { "_index": 672, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.logger.debug(result", { "_index": 670, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.logger.error('cannot", { "_index": 693, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.logger.log", { "_index": 374, "title": {}, "body": { "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {} } }], ["this.logger.log('init", { "_index": 468, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["this.logger.log(`no", { "_index": 370, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["this.logger.log(`updated", { "_index": 385, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["this.questionattemptrepo.findone", { "_index": 695, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.questionentityrepository.delete", { "_index": 390, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["this.questionentityrepository.findone", { "_index": 367, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["this.questionentityrepository.findone(questionid", { "_index": 392, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["this.questionservice.createnewquestion(req.user", { "_index": 304, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["this.questionservice.createnewquestion(user", { "_index": 715, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.questionservice.deletequestion(req.user", { "_index": 310, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["this.questionservice.findbyid(questionid", { "_index": 692, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.questionservice.updatequestion(req.user", { "_index": 307, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["this.quizattemptrepo.findone(attemptid", { "_index": 671, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.quizrepo.createquerybuilder('q", { "_index": 736, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.quizrepo.delete(quizzid", { "_index": 743, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.quizrepo.findone", { "_index": 718, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.quizrepo.findone(quizid", { "_index": 681, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.quizrepo.findone(quizzid", { "_index": 741, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.quizrepo.findoneorfail(id", { "_index": 703, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["this.quizservice.addnewquestion(req.user", { "_index": 536, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["this.quizservice.canattemptquiz(quiz", { "_index": 485, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["this.quizservice.createnewquiz(req.user", { "_index": 532, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["this.quizservice.deletequiz(id", { "_index": 552, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["this.quizservice.finishquizattempt(attemptid", { "_index": 474, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["this.quizservice.getquiz(quizzid", { "_index": 480, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["this.quizservice.getquizzes(req.user", { "_index": 548, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["this.quizservice.removeallquestions(req.user", { "_index": 542, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["this.quizservice.removequestion(req.user", { "_index": 539, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["this.quizservice.updatequiz(req.user,quizid,startdatetime,enddatetime", { "_index": 546, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["this.uniqueelements(questiondata.multiplechoices", { "_index": 365, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["this.userentityrepository.findone", { "_index": 792, "title": {}, "body": { "injectables/UserService.html": {} } }], ["this.userservice.findbyemail(data.email", { "_index": 169, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.userservice.findbyemail(decoded.email", { "_index": 806, "title": {}, "body": { "guards/WsGuard.html": {} } }], ["this.userservice.findbyemail(payload.email", { "_index": 202, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["throw", { "_index": 168, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {} } }], ["token", { "_index": 152, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["totalnumberofquestions", { "_index": 487, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["totalscore", { "_index": 559, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["transform", { "_index": 326, "title": {}, "body": { "classes/QuestionEntity.html": {} } }], ["transformer", { "_index": 327, "title": {}, "body": { "classes/QuestionEntity.html": {}, "classes/QuizAttemptGateway.html": {}, "classes/QuizzEntity.html": {}, "classes/UserEntity.html": {}, "dependencies.html": {} } }], ["transports", { "_index": 465, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["tried", { "_index": 375, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["true", { "_index": 321, "title": {}, "body": { "classes/QuestionEntity.html": {}, "injectables/QuestionService.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {}, "classes/UserEntity.html": {}, "guards/WsGuard.html": {}, "miscellaneous/variables.html": {} } }], ["true,nullable:false", { "_index": 577, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["true})@jointable", { "_index": 593, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["try", { "_index": 164, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {}, "guards/WsGuard.html": {} } }], ["type", { "_index": 70, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "interfaces/JwtPayload.html": {}, "injectables/JwtStrategy.html": {}, "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/QuestionAttemptEntity.html": {}, "controllers/QuestionController.html": {}, "classes/QuestionEntity.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {}, "classes/UpdateQuestionDto.html": {}, "classes/UserEntity.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["typeorm", { "_index": 266, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {}, "classes/QuestionEntity.html": {}, "injectables/QuestionService.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {}, "classes/UserEntity.html": {}, "injectables/UserService.html": {}, "dependencies.html": {} } }], ["typeormconfig", { "_index": 40, "title": {}, "body": { "modules/AppModule.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["typeormmodule", { "_index": 32, "title": {}, "body": { "modules/AppModule.html": {}, "modules/QuestionModule.html": {}, "modules/QuizzModule.html": {}, "modules/UserModule.html": {} } }], ["typeormmodule.forfeature", { "_index": 619, "title": {}, "body": { "modules/QuizzModule.html": {} } }], ["typeormmodule.forroot(typeormconfig", { "_index": 44, "title": {}, "body": { "modules/AppModule.html": {} } }], ["typeormmoduleoptions", { "_index": 911, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["types/axios", { "_index": 851, "title": {}, "body": { "dependencies.html": {} } }], ["types/connect", { "_index": 853, "title": {}, "body": { "dependencies.html": {} } }], ["types/express", { "_index": 856, "title": {}, "body": { "dependencies.html": {} } }], ["types/faker", { "_index": 858, "title": {}, "body": { "dependencies.html": {} } }], ["types/passport", { "_index": 860, "title": {}, "body": { "dependencies.html": {} } }], ["types/redis", { "_index": 862, "title": {}, "body": { "dependencies.html": {} } }], ["ui", { "_index": 889, "title": {}, "body": { "dependencies.html": {} } }], ["unauthorized", { "_index": 801, "title": {}, "body": { "guards/WsGuard.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["unauthorizedexception", { "_index": 195, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {} } }], ["undefined", { "_index": 259, "title": {}, "body": { "classes/QuestionAttemptEntity.html": {}, "classes/QuestionEntity.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {}, "classes/UserEntity.html": {} } }], ["unique", { "_index": 771, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["uniqueelements", { "_index": 341, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["updatedat", { "_index": 586, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["updatedatecolumn", { "_index": 606, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["updateqa", { "_index": 273, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["updateqa(qadata", { "_index": 284, "title": {}, "body": { "controllers/QuestionController.html": {} } }], ["updatequestion", { "_index": 342, "title": {}, "body": { "injectables/QuestionService.html": {} } }], ["updatequestiondto", { "_index": 285, "title": { "classes/UpdateQuestionDto.html": {} }, "body": { "controllers/QuestionController.html": {}, "injectables/QuestionService.html": {}, "classes/UpdateQuestionDto.html": {}, "coverage.html": {} } }], ["updatequiz", { "_index": 626, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["updatequiztime", { "_index": 501, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["updatequiztime(startdatetime", { "_index": 522, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["useguards", { "_index": 288, "title": {}, "body": { "controllers/QuestionController.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {} } }], ["useguards(jwtgaurd", { "_index": 301, "title": {}, "body": { "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} } }], ["useguards(wsguard", { "_index": 463, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["usepipes", { "_index": 289, "title": {}, "body": { "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} } }], ["usepipes(validationpipe", { "_index": 302, "title": {}, "body": { "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} } }], ["user", { "_index": 155, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "classes/QuestionEntity.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {} } }], ["user.entity", { "_index": 780, "title": {}, "body": { "modules/UserModule.html": {}, "injectables/UserService.html": {} } }], ["user.service", { "_index": 781, "title": {}, "body": { "modules/UserModule.html": {} } }], ["user.usercreatedquestions", { "_index": 328, "title": {}, "body": { "classes/QuestionEntity.html": {} } }], ["user.usercreatedquizzes", { "_index": 609, "title": {}, "body": { "classes/QuizzEntity.html": {} } }], ["user.useremail", { "_index": 157, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["user.userid", { "_index": 372, "title": {}, "body": { "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {} } }], ["user.userquizattempts", { "_index": 579, "title": {}, "body": { "classes/QuizzAttemptEntity.html": {} } }], ["user.userquizattempts.reduce((t", { "_index": 490, "title": {}, "body": { "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {} } }], ["user/user.entity", { "_index": 139, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/QuestionEntity.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {} } }], ["user/user.module", { "_index": 34, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/QuizzModule.html": {} } }], ["user/user.service", { "_index": 140, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "guards/WsGuard.html": {} } }], ["usercreatedquestions", { "_index": 754, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["usercreatedquizzes", { "_index": 755, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["useremail", { "_index": 756, "title": {}, "body": { "classes/UserEntity.html": {}, "injectables/UserService.html": {} } }], ["userentity", { "_index": 80, "title": { "classes/UserEntity.html": {} }, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "classes/QuestionEntity.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "controllers/QuizController.html": {}, "classes/QuizzAttemptEntity.html": {}, "classes/QuizzEntity.html": {}, "injectables/QuizzService.html": {}, "classes/UserEntity.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "coverage.html": {} } }], ["userentity).userid", { "_index": 554, "title": {}, "body": { "controllers/QuizController.html": {} } }], ["userentityrepository", { "_index": 789, "title": {}, "body": { "injectables/UserService.html": {} } }], ["userid", { "_index": 391, "title": {}, "body": { "injectables/QuestionService.html": {}, "injectables/QuizzService.html": {}, "classes/UserEntity.html": {} } }], ["usermodule", { "_index": 15, "title": { "modules/UserModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/QuizzModule.html": {}, "modules/UserModule.html": {}, "index.html": {}, "modules.html": {} } }], ["username", { "_index": 757, "title": {}, "body": { "classes/UserEntity.html": {}, "miscellaneous/variables.html": {} } }], ["userphotourl", { "_index": 758, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["userquizattempts", { "_index": 759, "title": {}, "body": { "classes/UserEntity.html": {} } }], ["userservice", { "_index": 127, "title": { "injectables/UserService.html": {} }, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "guards/WsGuard.html": {}, "coverage.html": {}, "index.html": {} } }], ["userservice:userservice", { "_index": 197, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["validate", { "_index": 187, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["validate(payload", { "_index": 189, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["validationpipe", { "_index": 290, "title": {}, "body": { "controllers/QuestionController.html": {}, "controllers/QuizController.html": {} } }], ["validator", { "_index": 224, "title": {}, "body": { "classes/NewQuestionDto.html": {}, "classes/NewQuizDto.html": {}, "classes/UpdateQuestionDto.html": {}, "dependencies.html": {} } }], ["value", { "_index": 131, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/QuestionService.html": {}, "classes/QuizAttemptGateway.html": {}, "injectables/QuizzService.html": {}, "injectables/UserService.html": {}, "miscellaneous/variables.html": {} } }], ["variable", { "_index": 818, "title": {}, "body": { "coverage.html": {} } }], ["variables", { "_index": 903, "title": { "miscellaneous/variables.html": {} }, "body": { "miscellaneous/variables.html": {} } }], ["verifyjwt", { "_index": 124, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["void", { "_index": 418, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["websocket", { "_index": 466, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["websocketgateway", { "_index": 443, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["websocketgateway(undefined", { "_index": 464, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["websocketserver", { "_index": 415, "title": {}, "body": { "classes/QuizAttemptGateway.html": {} } }], ["wsexception", { "_index": 662, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["wsexception('forbidden", { "_index": 744, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["wsexception('no", { "_index": 745, "title": {}, "body": { "injectables/QuizzService.html": {} } }], ["wsguard", { "_index": 446, "title": { "guards/WsGuard.html": {} }, "body": { "classes/QuizAttemptGateway.html": {}, "guards/WsGuard.html": {}, "coverage.html": {} } }], ["zoom", { "_index": 16, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/QuestionModule.html": {}, "modules/QuizzModule.html": {}, "modules/UserModule.html": {}, "index.html": {} } }]], "pipeline": ["stemmer"] },
    "store": { "modules/AppModule.html": { "url": "modules/AppModule.html", "title": "module - AppModule", "body": "\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nQuestionModule\n\nQuestionModule\n\nAppModule -->\n\nQuestionModule->AppModule\n\n\n\n\n\nQuizzModule\n\nQuizzModule\n\nAppModule -->\n\nQuizzModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            QuestionController\n                        \n                        \n                            QuizController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            QuestionModule\n                        \n                        \n                            QuizzModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth/auth.controller';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserModule } from './user/user.module';\nimport { QuestionModule } from './question/question.module';\nimport { QuizzModule } from './quizz/quizz.module';\nimport { QuizAttemptGateway } from './quizz/quizz-attempt.gateway';\nimport TypeOrmConfig from '../config/typeorm.config';\nimport { QuestionController } from './question/question.controller';\nimport { QuizController } from './quizz/quizz.controller';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(TypeOrmConfig),\n    AuthModule,\n    UserModule,\n    QuestionModule,\n    QuizzModule,\n  ],\n  controllers: [AuthController,QuestionController,QuizController],\n  providers: [QuizAttemptGateway],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/AuthController.html": { "url": "controllers/AuthController.html", "title": "controller - AuthController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n            \n                Description\n            \n            \n                Auth Controller\nbase path  : /api/auth\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                auth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            auth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    auth(id_token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('google')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id_token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nexpects the id_token got after google authorization\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport UserEntity from 'src/user/user.entity';\nimport { AuthService } from './auth.service';\n\n/**\n * Auth Controller\n * base path  : /api/auth\n */\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  /**\n   * @param id_token - expects the id_token got after google authorization\n   * @returns Promise\n   */\n  @Post('google')\n  async auth(\n    @Body('id_token') id_token: string,\n  ): Promise {\n    return await this.authService.authenticateUser(id_token);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/AuthModule.html": { "url": "modules/AuthModule.html", "title": "module - AuthModule", "body": "\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserModule } from '../user/user.module';\nimport { JWT_SECRET } from '../../config/env';\nimport { JwtStrategy } from './Jwt.strategy';\nimport { AuthService } from './auth.service';\n\nexport const passportAuthModules = [\n  PassportModule.register({\n    defaultStrategy: 'jwt',\n    session: false,\n  }),\n  JwtModule.register({\n    secret: JWT_SECRET,\n    signOptions: {\n      expiresIn: '7d',\n    },\n  }),\n];\n\n@Module({\n  imports: [...passportAuthModules, UserModule],\n  providers: [JwtStrategy, AuthService],\n  exports: [JwtStrategy, AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/AuthService.html": { "url": "injectables/AuthService.html", "title": "injectable - AuthService", "body": "\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authenticateUser\n                            \n                            \n                                createUserEntity\n                            \n                            \n                                fetchData\n                            \n                            \n                                getUserAndAccessToken\n                            \n                            \n                                verifyJwt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            authenticateUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.service.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createUserEntity\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchData\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.service.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getUserAndAccessToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.service.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            verifyJwt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.service.ts:28\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport axios from 'axios';\nimport UserEntity from '../user/user.entity';\nimport { UserService } from '../user/user.service';\nimport { JwtPayload } from './jwt.payload';\nimport { JWT_SECRET } from '../../config/env';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private userService: UserService,\n    private jwtService: JwtService,\n  ) {}\n\n  createUserEntity = async (\n    email: string,\n    name: string,\n    photoURL: string,\n  ) => {\n    const newUser = new UserEntity();\n    newUser.userEmail = email;\n    newUser.userName = name;\n    newUser.userPhotoURL = photoURL || '';\n    await newUser.save();\n    return newUser;\n  };\n  verifyJwt = (token: string) => {\n    return this.jwtService.verify(token, {\n      ignoreExpiration: false,\n      secret: JWT_SECRET,\n    });\n  };\n\n  getUserAndAccessToken = (user: UserEntity) => {\n    const payload: JwtPayload = { email: user.userEmail };\n    return { user, accessToken: this.jwtService.sign(payload) };\n  };\n\n   fetchData = async (id_token:string) => {\n    return  (await axios.get(\n        `https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${id_token.trim()}`,\n      )).data;\n  }\n\n  authenticateUser = async (id_token: string) => {\n    try {\n      const  data  = await this.fetchData(id_token);\n\n      if (!data || !data.email || !data.name) {\n        throw new BadRequestException();\n      }\n\n      const user = await this.userService.findByEmail(data.email);\n\n      if (user) {\n        return this.getUserAndAccessToken(user);\n      } else {\n        const newUser = await this.createUserEntity(\n          data.email,\n          data.name,\n          data.picture,\n        );\n\n        return this.getUserAndAccessToken(newUser);\n      }\n    } catch (e) {\n      throw new BadRequestException();\n    }\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/JwtGaurd.html": { "url": "classes/JwtGaurd.html", "title": "class - JwtGaurd", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtGaurd\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.gaurd.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\n\nexport class JwtGaurd extends AuthGuard('jwt') {}\n\nexport default JwtGaurd;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "interfaces/JwtPayload.html": { "url": "interfaces/JwtPayload.html", "title": "interface - JwtPayload", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.payload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n    email:string\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/JwtStrategy.html": { "url": "injectables/JwtStrategy.html", "title": "injectable - JwtStrategy", "body": "\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/Jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/Jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/Jwt.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport {JWT_SECRET} from '../../config/env';\nimport { JwtPayload } from './jwt.payload';\nimport { UserService } from '../user/user.service';\n\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private userService:UserService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: JWT_SECRET,\n    });\n  }\n\n  async validate(payload: JwtPayload) {\n    const user = await this.userService.findByEmail(payload.email);\n    if(!user){\n        throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/NewQuestionDto.html": { "url": "classes/NewQuestionDto.html", "title": "class - NewQuestionDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/dto/new.question.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                correctAnswer\n                            \n                            \n                                multipleChoices\n                            \n                            \n                                questionTitle\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            correctAnswer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@IsString()@MinLength(5)@MaxLength(100)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/dto/new.question.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            multipleChoices\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@IsArray()@ArrayMinSize(2)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/dto/new.question.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionTitle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@IsString()@MinLength(5)@MaxLength(100)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/dto/new.question.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  Min,\n  MinLength,\n  IsNumber,\n  ArrayMinSize,\n  MaxLength,\n  IsString,\n  IsArray,\n} from 'class-validator';\n\nexport class NewQuestionDto {\n  \n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(5)\n  @MaxLength(100)\n  correctAnswer: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(5)\n  @MaxLength(100)\n  questionTitle: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsArray()\n  @ArrayMinSize(2)\n  multipleChoices: string[];\n}\n\nexport default NewQuestionDto;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/NewQuizDto.html": { "url": "classes/NewQuizDto.html", "title": "class - NewQuizDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewQuizDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/quizz/dto/new.quiz.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                endDatetime\n                            \n                            \n                                questions\n                            \n                            \n                                quizzTitle\n                            \n                            \n                                startDatetime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endDatetime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@IsDateString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/dto/new.quiz.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NewQuestionDto[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@ArrayMinSize(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/dto/new.quiz.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            quizzTitle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/dto/new.quiz.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startDatetime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@IsDateString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/dto/new.quiz.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsDateString,\n  MinLength,\n  ArrayMinSize,\n  IsString,\n} from 'class-validator';\n\nimport NewQuestionDto from 'src/question/dto/new.question';\n\nexport class NewQuizDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  quizzTitle: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsDateString()\n  startDatetime: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsDateString()\n  endDatetime: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @ArrayMinSize(1)\n  questions: NewQuestionDto[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/QuestionAttemptEntity.html": { "url": "classes/QuestionAttemptEntity.html", "title": "class - QuestionAttemptEntity", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionAttemptEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/quizz/entities/question_attempt.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                optionChoosed\n                            \n                            \n                                questionAttemptId\n                            \n                            \n                                questionId\n                            \n                            \n                                quizAttempt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            optionChoosed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/question_attempt.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionAttemptId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/question_attempt.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/question_attempt.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            quizAttempt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuizzAttemptEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/question_attempt.entity.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport  QuizzAttemptEntity  from './quizz_attempts.entity';\n\n@Entity()\nexport class QuestionAttemptEntity extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  questionAttemptId: string;\n  \n  @Column('uuid')\n  questionId: string;\n\n  @ManyToOne(\n    type => QuizzAttemptEntity,\n    quizAttempt => quizAttempt.questionAttempts,\n    { onDelete: 'CASCADE' },\n  )\n  quizAttempt: QuizzAttemptEntity;\n\n  @Column()\n  optionChoosed: string;\n}\n\n\nexport default QuestionAttemptEntity;\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/QuestionController.html": { "url": "controllers/QuestionController.html", "title": "controller - QuestionController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/question.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteQa\n                            \n                            \n                                    Async\n                                newQa\n                            \n                            \n                                    Async\n                                updateQa\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteQa\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteQa(id: string, req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtGaurd)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/question/question.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            newQa\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newQa(qaData: NewQuestionDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('new')@UseGuards(JwtGaurd)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/question/question.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    qaData\n                                    \n                                                NewQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateQa\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateQa(qaData: UpdateQuestionDto, id: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(JwtGaurd)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/question/question.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    qaData\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  Req,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n  Res,\n  HttpStatus,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport JwtGaurd from '../auth/jwt.gaurd';\nimport NewQuestionDto from './dto/new.question';\nimport UpdateQuestionDto from './dto/update.question';\nimport { QuestionService } from './question.service';\n\n@Controller('question')\nexport class QuestionController {\n  constructor(private questionService: QuestionService) {}\n\n  @Post('new')\n  @UseGuards(JwtGaurd)\n  @UsePipes(ValidationPipe)\n  async newQa(@Body() qaData: NewQuestionDto, @Req() req) {\n    return await this.questionService.createNewQuestion(req.user, qaData);\n  }\n\n  @Patch(':id')\n  @UseGuards(JwtGaurd)\n  @UsePipes(ValidationPipe)\n  async updateQa(\n    @Body() qaData: UpdateQuestionDto,\n    @Param('id') id: string,\n    @Req() req,\n  ) {\n    return await this.questionService.updateQuestion(req.user, qaData, id);\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtGaurd)\n  @UsePipes(ValidationPipe)\n  async deleteQa(@Param('id') id: string, @Req() req, @Res() res) {\n    await this.questionService.deleteQuestion(req.user, id);\n    return res.status(HttpStatus.OK).send();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/QuestionEntity.html": { "url": "classes/QuestionEntity.html", "title": "class - QuestionEntity", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/question.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                correctAnswer\n                            \n                            \n                                createdBy\n                            \n                            \n                                multipleChoices\n                            \n                            \n                                questionId\n                            \n                            \n                                questionTitle\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            correctAnswer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdBy\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            multipleChoices\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {array: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionTitle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.entity.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude, Transform } from 'class-transformer';\nimport UserEntity from '../user/user.entity';\nimport {\n  BaseEntity,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nclass QuestionEntity extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  questionId: string;\n\n  @Column()\n  questionTitle: string;\n\n  @Column()\n  @Exclude()\n  correctAnswer: string;\n\n  @Column('text', { array: true })\n  multipleChoices: string[];\n\n  @Exclude()\n  @ManyToOne(\n    type => UserEntity,\n    user => user.userCreatedQuestions,\n    { onDelete: 'CASCADE' },\n  )\n  createdBy: UserEntity;\n}\n\nexport default QuestionEntity;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/QuestionModule.html": { "url": "modules/QuestionModule.html", "title": "module - QuestionModule", "body": "\n                   \n\n\n\n\n    Modules\n    QuestionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuestionModule\n\n\n\ncluster_QuestionModule_providers\n\n\n\ncluster_QuestionModule_exports\n\n\n\n\nQuestionService \n\nQuestionService \n\n\n\nQuestionModule\n\nQuestionModule\n\nQuestionService  -->\n\nQuestionModule->QuestionService \n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionModule -->\n\nQuestionService->QuestionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/question/question.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QuestionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuestionController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QuestionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QuestionService } from './question.service';\nimport { QuestionController } from './question.controller';\nimport QuestionEntity from './question.entity';\n\n@Module({\n    imports:[TypeOrmModule.forFeature([QuestionEntity])],\n    providers:[ QuestionService],\n    exports:[QuestionService],\n    controllers: [QuestionController]\n})\nexport class QuestionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/QuestionService.html": { "url": "injectables/QuestionService.html", "title": "injectable - QuestionService", "body": "\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/question.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createNewQuestion\n                            \n                            \n                                deleteQuestion\n                            \n                            \n                                    Private\n                                logger\n                            \n                            \n                                    Private\n                                uniqueElements\n                            \n                            \n                                updateQuestion\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findbyID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(questionEntityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/question/question.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        questionEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findbyID\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findbyID(questionID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/question/question.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createNewQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.service.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.service.ts:92\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n                    \n                        \n                            Default value : new Logger('QuestionService')\n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.service.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            uniqueElements\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.service.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.service.ts:57\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport UserEntity from '../user/user.entity';\nimport { Repository } from 'typeorm';\nimport NewQuestionDto from './dto/new.question';\nimport UpdateQuestionDto from './dto/update.question';\nimport QuestionEntity from './question.entity';\n\n@Injectable()\nexport class QuestionService {\n  constructor(\n    @InjectRepository(QuestionEntity)\n    private questionEntityRepository: Repository,\n  ) {}\n\n  private logger: Logger = new Logger('QuestionService');\n\n  private uniqueElements = (arr: string[]) => {\n    const newArr: string[] = [];\n    for (let i of arr) {\n      if (newArr.indexOf(i) === -1) {\n        newArr.push(i);\n      }\n    }\n    return newArr;\n  };\n\n  createNewQuestion = async (\n    user: UserEntity,\n    questionData: NewQuestionDto,\n  ) => {\n    try {\n      const newQuestion = new QuestionEntity();\n      const multipleChoices = this.uniqueElements(questionData.multipleChoices);\n      if (multipleChoices.length  {\n    const question = await this.questionEntityRepository.findOne(\n      { questionId },\n      { cache: true, relations: ['createdBy'] },\n    );\n\n    if (!question) {\n      this.logger.log(`No question found with ID ${questionId}`);\n      throw new BadRequestException();\n    }\n\n    if (user.userId !== question.createdBy.userId) {\n      this.logger.log(\n        `User with ID - ${user.userId} tried to modify question not made by him/her of ${question.createdBy.userId}`,\n      );\n      throw new UnauthorizedException();\n    }\n\n    if (questionData.multipleChoices)\n      question.multipleChoices = questionData.multipleChoices;\n\n    if (questionData.correctAnswer)\n      question.correctAnswer = questionData.correctAnswer;\n\n    if (questionData.questionTitle)\n      question.questionTitle = questionData.questionTitle;\n    this.logger.log(`Updated Question ${question.questionId}`);\n    await question.save();\n    return question;\n  };\n\n  deleteQuestion = async (user: UserEntity, questionId: string) => {\n    this.logger.log(\n      `Deleting Question - ${questionId} created By user - ${user.userId}`,\n    );\n    await this.questionEntityRepository.delete({\n      questionId,\n      createdBy: { userId: user.userId },\n    });\n  };\n\n  async findbyID(questionID: string): Promise {\n    const question = await this.questionEntityRepository.findOne(questionID);\n    this.logger.log(\n      `[findByID] ${\n        question ? 'Found' : 'Did not find'\n      } a question with ID ${questionID} `,\n    );\n    return question;\n  }\n}\n\nexport default QuestionService;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/QuizAttemptGateway.html": { "url": "classes/QuizAttemptGateway.html", "title": "class - QuizAttemptGateway", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuizAttemptGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/quizz/quizz-attempt.gateway.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayInit\n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                afterInit\n                            \n                            \n                                    Async\n                                attemptQuestion\n                            \n                            \n                                    Async\n                                fetchQuestion\n                            \n                            \n                                    Async\n                                fetchQuizDetails\n                            \n                            \n                                    Async\n                                finishQuiz\n                            \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    Async\n                                startQuiz\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(quizService: QuizzService)\n                    \n                \n                        \n                            \n                                Defined in src/quizz/quizz-attempt.gateway.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        quizService\n                                                  \n                                                        \n                                                                        QuizzService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n                    \n                        \n                            Default value : new Logger('QuizzGateway')\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz-attempt.gateway.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Server\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @WebSocketServer()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz-attempt.gateway.ts:36\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            afterInit\n                        \n                        \n                    \n                \n            \n            \n                \nafterInit()\n                \n            \n\n\n            \n                \n                    Defined in src/quizz/quizz-attempt.gateway.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            attemptQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    attemptQuestion(server: Server, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(ATTEMPT_QUESTION)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz-attempt.gateway.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    server\n                                    \n                                            Server\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchQuestion(server: Server, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(FETCH_QUESTION)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz-attempt.gateway.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    server\n                                    \n                                            Server\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchQuizDetails\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchQuizDetails(server: Server, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(FETCH_QUIZ_DETAILS)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz-attempt.gateway.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    server\n                                    \n                                            Server\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            finishQuiz\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    finishQuiz(server: Server, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(FINISH)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz-attempt.gateway.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    server\n                                    \n                                            Server\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleConnection\n                        \n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket, ...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/quizz/quizz-attempt.gateway.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleDisconnect\n                        \n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/quizz/quizz-attempt.gateway.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            startQuiz\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    startQuiz(server: Server, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(START)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz-attempt.gateway.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    server\n                                    \n                                            Server\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  SubscribeMessage,\n  WebSocketGateway,\n  OnGatewayInit,\n  WebSocketServer,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Logger, Req, UseGuards } from '@nestjs/common';\nimport { Socket, Server } from 'socket.io';\n\nimport { WsGuard } from '../auth/ws.gaurd';\nimport {\n  ATTEMPT_QUESTION,\n  ERROR,\n  FETCH_ATTEMPT_ID,\n  FETCH_QUESTION,\n  FETCH_QUIZ_DETAILS,\n  RECEIVED_QUIZ_DETAILS,\n  START,\n  RECEIVED_QUESTION,\n  FINISH,\n  NOT_FOUND,\n} from '../../common/ws.event.types';\nimport UserEntity from '../user/user.entity';\nimport { QuizzService } from './quizz.service';\nimport { classToPlain } from 'class-transformer';\nimport QuizzEntity from './entities/quizz.entity';\n\n@UseGuards(WsGuard)\n@WebSocketGateway(undefined, { transports: ['websocket', 'polling'] })\nexport class QuizAttemptGateway\n  implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {\n  constructor(private quizService: QuizzService) {}\n\n  @WebSocketServer() server: Server;\n  private logger: Logger = new Logger('QuizzGateway');\n\n  afterInit() {\n    this.logger.log('Init');\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(\n      `Client disconnected: ${client.id} ${client.conn.remoteAddress}`,\n    );\n  }\n\n  handleConnection(client: Socket, ...args: any[]) {\n    this.logger.log(\n      `Client connected: ${client.id} ${client.conn.remoteAddress}`,\n    );\n  }\n\n  @SubscribeMessage(FINISH)\n  async finishQuiz(\n    server: Server,\n    data: { payload: { attemptId: string }; user: UserEntity },\n  ) {\n    try {\n      const {\n        payload: { attemptId },\n        user,\n      } = data;\n\n      await this.quizService.finishQuizAttempt(attemptId, user);\n   \n      return 'FINISHED';\n    } catch (e) {\n      console.log(e);\n      server.emit(ERROR);\n    }\n  }\n\n  @SubscribeMessage(FETCH_QUIZ_DETAILS)\n  async fetchQuizDetails(\n    server: Server,\n    data: { payload: { quizzId: string }; user: UserEntity },\n  ) {\n    const {\n      user,\n      payload: { quizzId },\n    } = data;\n    try {\n      let quiz: QuizzEntity;\n\n      try {\n        quiz = await this.quizService.getQuiz(quizzId, ['createdBy']);\n      } catch (e) {\n        return server.emit(NOT_FOUND);\n      }\n\n      server.emit(RECEIVED_QUIZ_DETAILS, {\n        payload: {\n          ...classToPlain(quiz),\n          canAttemptQuizz: this.quizService.canAttemptQuiz(quiz, data.user),\n          totalNumberOfQuestions: quiz.questions.length,\n          isQuizzAttemptFinished: user.userQuizAttempts.reduce((t, c) => {\n            if (c.quizz.quizzId === quizzId) {\n              return c.attemptFinished ||\n                quiz.endDatetime.getTime() \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/QuizController.html": { "url": "controllers/QuizController.html", "title": "controller - QuizController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  QuizController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/quizz/quizz.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                quizz\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteQuiz\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                newQuestion\n                            \n                            \n                                    Async\n                                newQuiz\n                            \n                            \n                                    Async\n                                removeAllQuestions\n                            \n                            \n                                    Async\n                                removeQuestion\n                            \n                            \n                                    Async\n                                updateQuizTime\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteQuiz\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteQuiz(id: string, req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtGaurd)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(options: IPaginationOptions, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtGaurd)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            IPaginationOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            newQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newQuestion(questionData: NewQuestionDto, quizId: string, req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':qid/question/new')@UseGuards(JwtGaurd)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questionData\n                                    \n                                                NewQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    quizId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            newQuiz\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newQuiz(data: NewQuizDto, req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('new')@UseGuards(JwtGaurd)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                NewQuizDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeAllQuestions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeAllQuestions(quizId: string, req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':qid/all/questions')@UseGuards(JwtGaurd)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    quizId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeQuestion(questionID: string, quizId: string, req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':qid/question/:questionID')@UseGuards(JwtGaurd)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    quizId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateQuizTime\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateQuizTime(startDatetime: string, endDatetime: string, quizId, req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':qid')@UseGuards(JwtGaurd)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    startDatetime\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    endDatetime\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    quizId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpStatus,\n  Param,\n  Post,\n  Req,\n  Res,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n  Delete,\n  Patch,\n  Get,\n  Query\n} from '@nestjs/common';\nimport { IPaginationOptions } from 'nestjs-typeorm-paginate';\nimport UserEntity from 'src/user/user.entity';\nimport JwtGaurd from '../auth/jwt.gaurd';\nimport NewQuestionDto from '../question/dto/new.question';\nimport { NewQuizDto } from './dto/new.quiz';\nimport { QuizzService } from './quizz.service';\n\n@Controller('quizz')\nexport class QuizController {\n  constructor(private quizService: QuizzService) {}\n\n  @Post('new')\n  @UseGuards(JwtGaurd)\n  @UsePipes(ValidationPipe)\n  async newQuiz(@Body() data: NewQuizDto, @Req() req, @Res() res) {\n   await this.quizService.createNewQuiz(req.user, data);\n  return res.sendStatus(HttpStatus.CREATED);\n  }\n\n\n  @Post(':qid/question/new')\n  @UseGuards(JwtGaurd)\n  @UsePipes(ValidationPipe)\n  async newQuestion(\n    @Body() questionData: NewQuestionDto,\n    @Param('qid') quizId: string,\n    @Req() req,\n    @Res() res,\n  ) {\n    await this.quizService.addNewQuestion(req.user, questionData, quizId);\n    return res.sendStatus(HttpStatus.CREATED);\n  }\n\n  @Delete(':qid/question/:questionID')\n  @UseGuards(JwtGaurd)\n  @UsePipes(ValidationPipe)\n  async removeQuestion(\n    @Param('questionID') questionID: string,\n    @Param('qid') quizId: string,\n    @Req() req,\n    @Res() res,\n  ) {\n    await this.quizService.removeQuestion(req.user, questionID, quizId);\n    return res.sendStatus(HttpStatus.OK);\n  }\n\n  @Delete(':qid/all/questions')\n  @UseGuards(JwtGaurd)\n  @UsePipes(ValidationPipe)\n  async removeAllQuestions(\n    @Param('qid') quizId: string,\n    @Req() req,\n    @Res() res,\n  ) {\n    await this.quizService.removeAllQuestions(req.user, quizId);\n    return res.sendStatus(HttpStatus.OK);\n  }\n\n  @Patch(':qid')\n  @UseGuards(JwtGaurd)\n  @UsePipes(ValidationPipe)\n  async updateQuizTime(\n    @Body('startDatetime') startDatetime: string,\n    @Body('endDatetime') endDatetime: string,\n    @Param('qid') quizId,\n    @Req() req,\n    @Res() res,\n  ) {\n    await this.quizService.updateQuiz(req.user,quizId,startDatetime,endDatetime );\n    return res.sendStatus(HttpStatus.OK);\n  }\n\n  @Get()\n  @UseGuards(JwtGaurd)\n  async get(@Query() options: IPaginationOptions, @Req() req) {\n   \n    return await  this.quizService.getQuizzes(req.user, options);\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtGaurd)\n  async deleteQuiz(@Param('id') id:string,@Req() req,@Res() res) {\n    await this.quizService.deleteQuiz(id, (req.user as UserEntity).userId);\n    return res.sendStatus(HttpStatus.OK);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/QuizzAttemptEntity.html": { "url": "classes/QuizzAttemptEntity.html", "title": "class - QuizzAttemptEntity", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuizzAttemptEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/quizz/entities/quizz_attempts.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                attemptFinished\n                            \n                            \n                                questionAttempts\n                            \n                            \n                                quizz\n                            \n                            \n                                quizzAttemptId\n                            \n                            \n                                totalScore\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attemptFinished\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz_attempts.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionAttempts\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuestionAttemptEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined, {onDelete: 'CASCADE', eager: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz_attempts.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            quizz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuizzEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {eager: true, nullable: false, onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz_attempts.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            quizzAttemptId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz_attempts.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            totalScore\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz_attempts.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz_attempts.entity.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { QuizzEntity } from './quizz.entity';\nimport { QuestionAttemptEntity } from './question_attempt.entity';\nimport UserEntity from '../../user/user.entity';\n\n@Entity()\nexport class QuizzAttemptEntity extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  quizzAttemptId: string;\n\n  @ManyToOne(\n    type => QuizzEntity,\n    quiz => quiz.quizzAttemptsByUsers,\n    { eager: true,nullable:false ,onDelete:'CASCADE'},\n  )\n  quizz: QuizzEntity;\n\n  @ManyToOne(\n    type => UserEntity,\n    user => user.userQuizAttempts,\n  )\n  user: UserEntity;\n\n  @OneToMany(\n    type => QuestionAttemptEntity,\n    questionAttempt => questionAttempt.quizAttempt,\n    { onDelete: 'CASCADE',eager:true },\n  )\n  questionAttempts: QuestionAttemptEntity[];\n\n  @Column({ default: 0 })\n  totalScore: number;\n\n  @Column({ default: false })\n  attemptFinished: boolean;\n}\n\nexport default QuizzAttemptEntity;\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/QuizzEntity.html": { "url": "classes/QuizzEntity.html", "title": "class - QuizzEntity", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuizzEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/quizz/entities/quizz.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                createdBy\n                            \n                            \n                                endDatetime\n                            \n                            \n                                questions\n                            \n                            \n                                quizzAttemptsByUsers\n                            \n                            \n                                quizzId\n                            \n                            \n                                quizzTitle\n                            \n                            \n                                startDatetime\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdBy\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endDatetime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuestionEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@ManyToMany(undefined, {eager: true})@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            quizzAttemptsByUsers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QuizAttemptEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            quizzId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            quizzTitle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startDatetime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:57\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport {\n  BaseEntity,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport QuestionEntity from '../../question/question.entity';\nimport UserEntity from '../../user/user.entity';\nimport  QuizAttemptEntity  from './quizz_attempts.entity';\n\n@Entity()\nexport class QuizzEntity extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  quizzId: string;\n\n  @Column()\n  quizzTitle: string;\n\n  @Column()\n  startDatetime: Date;\n\n  @Column()\n  endDatetime: Date;\n\n  @Exclude()\n  @ManyToMany(type => QuestionEntity, { eager: true })\n  @JoinTable()\n  questions: QuestionEntity[];\n\n  @ManyToOne(\n    type => UserEntity,\n    user => user.userCreatedQuizzes,\n    { onDelete: 'CASCADE' },\n  )\n  createdBy: UserEntity;\n\n  @Exclude()\n  @OneToMany(\n    type => QuizAttemptEntity,\n    quizAttempt => quizAttempt.quizz,\n  )\n  quizzAttemptsByUsers: QuizAttemptEntity[];\n\n  @Exclude()\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @Exclude()\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n\nexport default QuizzEntity;\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/QuizzModule.html": { "url": "modules/QuizzModule.html", "title": "module - QuizzModule", "body": "\n                   \n\n\n\n\n    Modules\n    QuizzModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuizzModule\n\n\n\ncluster_QuizzModule_providers\n\n\n\ncluster_QuizzModule_imports\n\n\n\ncluster_QuizzModule_exports\n\n\n\n\nQuestionModule\n\nQuestionModule\n\n\n\nQuizzModule\n\nQuizzModule\n\nQuizzModule -->\n\nQuestionModule->QuizzModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nQuizzModule -->\n\nUserModule->QuizzModule\n\n\n\n\n\nQuizzService \n\nQuizzService \n\nQuizzService  -->\n\nQuizzModule->QuizzService \n\n\n\n\n\nQuizzService\n\nQuizzService\n\nQuizzModule -->\n\nQuizzService->QuizzModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/quizz/quizz.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QuizzService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuizController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            QuestionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QuizzService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QuestionModule } from '../question/question.module';\nimport { UserModule } from '../user/user.module';\nimport { QuestionAttemptEntity } from './entities/question_attempt.entity';\nimport { QuizController } from './quizz.controller';\nimport { QuizzService } from './quizz.service';\nimport { QuizzAttemptEntity } from './entities/quizz_attempts.entity';\nimport QuizzEntity from './entities/quizz.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      QuizzEntity,\n      QuizzAttemptEntity,\n      QuestionAttemptEntity,\n    ]),\n    UserModule,\n    QuestionModule,\n  ],\n  controllers: [QuizController],\n  providers: [QuizzService],\n  exports: [QuizzService],\n})\nexport class QuizzModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/QuizzService.html": { "url": "injectables/QuizzService.html", "title": "injectable - QuizzService", "body": "\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuizzService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/quizz/quizz.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                addNewQuestion\n                            \n                            \n                                addOldQuestion\n                            \n                            \n                                createNewQuiz\n                            \n                            \n                                deleteQuiz\n                            \n                            \n                                finishQuizAttempt\n                            \n                            \n                                getQuiz\n                            \n                            \n                                    Private\n                                logger\n                            \n                            \n                                removeAllQuestions\n                            \n                            \n                                removeQuestion\n                            \n                            \n                                updateQuiz\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                attemptQuestion\n                            \n                            \n                                    Async\n                                attemptQuiz\n                            \n                            \n                                canAttemptQuiz\n                            \n                            \n                                    Async\n                                fetchQuestionForQuizAttempt\n                            \n                            \n                                    Async\n                                getQuizzes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(questionService: QuestionService, quizRepo: Repository, quizAttemptRepo: Repository, questionAttemptRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/quizz/quizz.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        quizRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        quizAttemptRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionAttemptRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            attemptQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    attemptQuestion(user: UserEntity, questionId: string, choosedOption: string, attemptId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/quizz/quizz.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    choosedOption\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    attemptId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            attemptQuiz\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    attemptQuiz(user: UserEntity, quizId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/quizz/quizz.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    quizId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canAttemptQuiz\n                        \n                        \n                    \n                \n            \n            \n                \ncanAttemptQuiz(quiz: QuizzEntity, user: UserEntity, checkForPreviousAttempts: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/quizz/quizz.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    quiz\n                                    \n                                                QuizzEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    checkForPreviousAttempts\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchQuestionForQuizAttempt\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchQuestionForQuizAttempt(attemptId: string, questionNumber: number, user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/quizz/quizz.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    attemptId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questionNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getQuizzes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getQuizzes(user: UserEntity, options: IPaginationOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/quizz/quizz.service.ts:336\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            IPaginationOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            addNewQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:202\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            addOldQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:231\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createNewQuiz\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:184\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteQuiz\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:344\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            finishQuizAttempt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:359\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getQuiz\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:180\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n                    \n                        \n                            Default value : new Logger('QuizzService')\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            removeAllQuestions\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:283\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            removeQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:257\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateQuiz\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:301\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { IPaginationOptions, paginate } from 'nestjs-typeorm-paginate';\nimport NewQuestionDto from '../question/dto/new.question';\nimport QAEntity from '../question/question.entity';\nimport { QuestionService } from '../question/question.service';\nimport UserEntity from '../user/user.entity';\nimport { Repository } from 'typeorm';\nimport { NewQuizDto } from './dto/new.quiz';\nimport { QuestionAttemptEntity } from './entities/question_attempt.entity';\nimport { QuizzEntity } from './entities/quizz.entity';\n\nimport  QuizzAttemptEntity  from './entities/quizz_attempts.entity';\nimport { WsException } from '@nestjs/websockets';\n\n@Injectable()\nexport class QuizzService {\n  constructor(\n    private questionService: QuestionService,\n    @InjectRepository(QuizzEntity)\n    private quizRepo: Repository,\n    @InjectRepository(QuizzAttemptEntity)\n    private quizAttemptRepo: Repository,\n    @InjectRepository(QuestionAttemptEntity)\n    private questionAttemptRepo: Repository,\n  ) {}\n\n  private logger: Logger = new Logger('QuizzService');\n\n  canAttemptQuiz(\n    quiz: QuizzEntity,\n    user: UserEntity,\n    checkForPreviousAttempts: boolean = true,\n  ) {\n    const result =\n      quiz &&\n      quiz.startDatetime.getTime()  Date.now() &&\n      (!checkForPreviousAttempts ||\n        user.userQuizAttempts.reduce((t, c) => {\n          if (quiz.quizzId === c.quizz.quizzId) {\n            return !c.attemptFinished;\n          } else {\n            return t;\n          }\n        }, true));\n\n    this.logger.debug(result, 'canAttemptQuiz');\n    return result;\n  }\n\n  async fetchQuestionForQuizAttempt(\n    attemptId: string,\n    questionNumber: number,\n    user: UserEntity,\n  ) {\n    const quizAttempt = await this.quizAttemptRepo.findOne(attemptId, {\n      relations: ['user'],\n    });\n\n    this.logger.debug(quizAttempt, 'fetchQuestionForQuizAttempt');\n    if (\n      this.canAttemptQuiz(quizAttempt.quizz, user, false) &&\n      !quizAttempt.attemptFinished &&\n      quizAttempt.user.userId === user.userId &&\n      questionNumber >= 0 &&\n      questionNumber  {\n        if (question && c.questionId === question.questionId) {\n          return c.optionChoosed;\n        } else {\n          return t;\n        }\n      }, undefined);\n      this.logger.debug(\n        question,\n        `Question returned by fetchQuestionForQuizAttempt for Question Number - ${questionNumber}`,\n      );\n      return { question, selectedOption };\n    } else {\n      throw new BadRequestException();\n    }\n  }\n\n  async attemptQuiz(user: UserEntity, quizId: string): Promise {\n    const quiz = await this.quizRepo.findOne(quizId, {\n      relations: ['quizzAttemptsByUsers'],\n    });\n    const quizAttempt = user.userQuizAttempts.reduce((t, c) => {\n      if (c.quizz.quizzId === quiz.quizzId) {\n        return c;\n      } else {\n        return t;\n      }\n    }, undefined);\n\n    if (!this.canAttemptQuiz(quiz, user)) {\n      throw new BadRequestException();\n    }\n\n    if (quizAttempt) {\n      return quizAttempt.quizzAttemptId;\n    }\n\n    const newQuizAttempt = new QuizzAttemptEntity();\n    newQuizAttempt.user = user;\n    newQuizAttempt.quizz = quiz;\n    newQuizAttempt.questionAttempts = [];\n    await newQuizAttempt.save();\n     this.logger.debug(newQuizAttempt,\"[new attemptQuiz]\")\n    return newQuizAttempt.quizzAttemptId;\n  }\n\n  async attemptQuestion(\n    user: UserEntity,\n    questionId: string,\n    choosedOption: string,\n    attemptId: string,\n  ) {\n    try {\n      let isNew = false;\n      const quizAttempt = await this.quizAttemptRepo.findOne(attemptId, {\n        relations: [],\n      });\n      const question = await this.questionService.findbyID(questionId);\n\n      if (\n        !question ||\n        !quizAttempt ||\n        !this.canAttemptQuiz(quizAttempt.quizz, user, false)\n      ) {\n        this.logger.error('Cannot Attempt Question');\n        throw new BadRequestException();\n      }\n      let questionAttempt = await this.questionAttemptRepo.findOne(\n        {\n          questionId,\n          quizAttempt: { quizzAttemptId: quizAttempt.quizzAttemptId },\n        },\n        { relations: ['quizAttempt'] },\n      );\n\n      this.logger.debug(\n        { question, quizAttempt, questionAttempt },\n        'attemptQuestion()',\n      );\n\n      if (!questionAttempt) {\n        isNew = true;\n        questionAttempt = new QuestionAttemptEntity();\n        this.logger.debug(question,\"Question\")\n        questionAttempt.questionId = question.questionId;\n        questionAttempt.quizAttempt = quizAttempt;\n      } else {\n        quizAttempt.totalScore -=\n          questionAttempt.optionChoosed === question.correctAnswer ? 1 : 0;\n      }\n\n      questionAttempt.optionChoosed = choosedOption;\n\n      if (isNew) {\n        quizAttempt.questionAttempts.push(questionAttempt);\n      }\n      quizAttempt.totalScore +=\n        questionAttempt.optionChoosed === question.correctAnswer ? 1 : 0;\n      questionAttempt.save();\n      quizAttempt.save();\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  getQuiz = async (id: string, relations: string[] = []) => {\n    return await this.quizRepo.findOneOrFail(id, { relations });\n  };\n\n  createNewQuiz = async (user: UserEntity, quizData: NewQuizDto) => {\n    const newQuiz = new QuizzEntity();\n\n    newQuiz.startDatetime = new Date(quizData.startDatetime);\n    newQuiz.endDatetime = new Date(quizData.endDatetime);\n    newQuiz.createdBy = user;\n    newQuiz.quizzTitle = quizData.quizzTitle;\n\n    const questions: QAEntity[] = [];\n    if (quizData.questions.length !== 0)\n      for (let i of quizData.questions) {\n        questions.push(await this.questionService.createNewQuestion(user, i));\n      }\n    newQuiz.questions = questions;\n    await newQuiz.save();\n    return newQuiz;\n  };\n\n  addNewQuestion = async (\n    user: UserEntity,\n    question: NewQuestionDto,\n    quizzId: string,\n  ) => {\n    const newQuestion = await this.questionService.createNewQuestion(user, question);\n\n    const quiz = await this.quizRepo.findOne(\n      { quizzId },\n      { relations: ['createdBy'] },\n    );\n\n    if (quiz.createdBy.userId !== user.userId) {\n      throw new UnauthorizedException();\n    }\n\n    if (!quiz) {\n      throw new BadRequestException('Invalid Quiz ID');\n    }\n\n    if (!quiz.questions) {\n      quiz.questions = [];\n    }\n\n    quiz.questions.push(newQuestion);\n    await quiz.save();\n    return quiz;\n  };\n\n  addOldQuestion = async (\n    user: UserEntity,\n    questionId: string,\n    quizzId: string,\n  ) => {\n    const question = await this.questionService.findbyID(questionId);\n    const quiz = await this.quizRepo.findOne(\n      {  quizzId },\n      { relations: ['createdBy'] },\n    );\n    if (!question || !quiz) {\n      throw new BadRequestException('No Question/Quiz Found with the given ID');\n    }\n    if (!quiz.questions) {\n      quiz.questions = [];\n    }\n\n    if (quiz.createdBy.userId !== user.userId) {\n      throw new UnauthorizedException();\n    }\n    quiz.questions.push(question);\n\n    await quiz.save();\n    return quiz;\n  };\n\n  removeQuestion = async (\n    user: UserEntity,\n    questionId: string,\n    quizzId: string,\n  ) => {\n    const quiz = await this.quizRepo.findOne(\n      {  quizzId },\n      { relations: ['createdBy'] },\n    );\n    if (!quiz) {\n      throw new BadRequestException('No Quiz Found with the given ID');\n    }\n    if (!quiz.questions) {\n      quiz.questions = [];\n    }\n\n    if (quiz.createdBy.userId !== user.userId) {\n      throw new UnauthorizedException();\n    }\n\n    quiz.questions = quiz.questions.filter(q => q.questionId !== questionId);\n\n    await quiz.save();\n    return quiz;\n  };\n\n  removeAllQuestions = async (user: UserEntity, quizzId: string) => {\n    const quiz = await this.quizRepo.findOne(\n      {  quizzId },\n      { relations: ['createdBy'] },\n    );\n    if (!quiz) {\n      throw new BadRequestException('No Quiz Found with the given ID');\n    }\n\n    if (quiz.createdBy.userId !== user.userId) {\n      throw new UnauthorizedException();\n    }\n\n    quiz.questions = [];\n    await quiz.save();\n    return quiz;\n  };\n\n  updateQuiz = async (\n    user: UserEntity,\n    quizzId: string,\n    startDatetime?: string,\n    endDatetime?: string,\n    quizzTitle?: string,\n  ) => {\n    const quiz = await this.quizRepo.findOne(\n      {  quizzId },\n      { relations: ['createdBy'] },\n    );\n    if (!quiz) {\n      throw new BadRequestException('No Quiz Found with the given ID');\n    }\n\n    if (quizzTitle) {\n      quiz.quizzTitle = quizzTitle;\n    }\n\n    if (quiz.createdBy.userId !== user.userId) {\n      throw new UnauthorizedException();\n    }\n\n    if (!startDatetime && !endDatetime) {\n      throw new BadRequestException();\n    }\n\n    if (startDatetime) quiz.startDatetime = new Date(startDatetime);\n\n    if (endDatetime) quiz.endDatetime = new Date(endDatetime);\n\n    await quiz.save();\n    return quiz;\n  };\n\n  async getQuizzes(user: UserEntity, options: IPaginationOptions) {\n    const q = this.quizRepo.createQueryBuilder('q');\n    q.where('q.createdBy= :userId', { userId: user.userId });\n    q.orderBy('q.updatedAt', 'DESC');\n\n    return await paginate(q, options);\n  }\n\n  deleteQuiz = async (quizzId: string, userId: string) => {\n    const quiz = await this.quizRepo.findOne(quizzId, { relations: ['createdBy'] });\n\n    if (!quiz) {\n      throw new BadRequestException();\n    }\n    console.debug(quiz.createdBy.userId,userId)\n\n    if (quiz.createdBy.userId === userId) {\n      await this.quizRepo.delete(quizzId);\n    } else {\n      throw new UnauthorizedException();\n    }\n  };\n\n  finishQuizAttempt = async (attemptId: string, user: UserEntity) => {\n    const quizAttempt = await this.quizAttemptRepo.findOne(attemptId, {\n      relations: ['user'],\n    });\n    if (user.userId !== quizAttempt.user.userId) {\n      throw new WsException('Forbidden');\n    }\n    if (!quizAttempt) {\n      throw new WsException('No Quiz Attempt Found');\n    }\n    quizAttempt.attemptFinished = true;\n    quizAttempt.save();\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/UpdateQuestionDto.html": { "url": "classes/UpdateQuestionDto.html", "title": "class - UpdateQuestionDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/dto/update.question.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                correctAnswer\n                            \n                            \n                                    Optional\n                                multipleChoices\n                            \n                            \n                                    Optional\n                                questionTitle\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            correctAnswer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()@IsNotEmpty()@IsString()@MinLength(5)@MaxLength(100)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/dto/update.question.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            multipleChoices\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()@IsNotEmpty()@IsArray()@ArrayMinSize(2)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/dto/update.question.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            questionTitle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()@IsNotEmpty()@IsString()@MinLength(5)@MaxLength(100)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/dto/update.question.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {  ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsString,\n  MinLength,\n  IsArray,\n  MaxLength,\n  ArrayMinSize\n} from 'class-validator';\n\nexport class UpdateQuestionDto {\n  @ApiPropertyOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(5)\n  @MaxLength(100)\n  correctAnswer?: string;\n\n  @ApiPropertyOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(5)\n  @MaxLength(100)\n  questionTitle?: string;\n\n  @ApiPropertyOptional()\n  @IsNotEmpty()\n  @IsArray()\n  @ArrayMinSize(2)\n  multipleChoices?: string[];\n}\n\nexport default UpdateQuestionDto;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/UserEntity.html": { "url": "classes/UserEntity.html", "title": "class - UserEntity", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userCreatedQuestions\n                            \n                            \n                                userCreatedQuizzes\n                            \n                            \n                                userEmail\n                            \n                            \n                                userId\n                            \n                            \n                                userName\n                            \n                            \n                                userPhotoURL\n                            \n                            \n                                userQuizAttempts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userCreatedQuestions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QAEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userCreatedQuizzes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuizzEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userEmail\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@Index()@Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userPhotoURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userQuizAttempts\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuizzAttemptEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToMany(undefined, undefined, {eager: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:42\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport QAEntity from '../question/question.entity';\nimport { QuizzEntity } from '../quizz/entities/quizz.entity';\nimport { QuizzAttemptEntity} from '../quizz/entities/quizz_attempts.entity';\nimport {\n  Entity,\n  BaseEntity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  Index,\n} from 'typeorm';\n\n@Entity()\nclass UserEntity extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  userId: string;\n\n  @Column()\n  userName: string;\n\n  @Exclude()\n  @Index()\n  @Column({ unique: true })\n  userEmail: string;\n\n  @Column({ nullable: true })\n  userPhotoURL: string;\n\n  @OneToMany(\n    type => QuizzEntity,\n    quiz => quiz.createdBy,\n  )\n  userCreatedQuizzes: QuizzEntity[];\n\n  @Exclude()\n  @OneToMany(\n    type => QuizzAttemptEntity,\n    quizAttempt => quizAttempt.user,\n    { eager: true },\n  )\n  userQuizAttempts: QuizzAttemptEntity[];\n\n  @OneToMany(\n    type => QAEntity,\n    qa => qa.createdBy,\n  )\n  userCreatedQuestions: QAEntity[];\n}\n\nexport default UserEntity;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/UserModule.html": { "url": "modules/UserModule.html", "title": "module - UserModule", "body": "\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport UserEntity from './user.entity';\nimport { UserService } from './user.service';\n\n@Module({\n    imports:[TypeOrmModule.forFeature([UserEntity])],\n    providers:[UserService],\n    exports:[UserService]\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/UserService.html": { "url": "injectables/UserService.html", "title": "injectable - UserService", "body": "\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                findByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userEntityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            findByEmail\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport {  Repository } from 'typeorm';\nimport UserEntity from './user.entity';\n\n@Injectable()\nexport class UserService {\n\n  constructor(\n    @InjectRepository(UserEntity)\n    private userEntityRepository: Repository) {\n  }\n\n  findByEmail = async (userEmail: string, relations: string[] = []) => {\n    const user = await this.userEntityRepository.findOne({ userEmail }, {  relations });\n    return user;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "guards/WsGuard.html": { "url": "guards/WsGuard.html", "title": "guard - WsGuard", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    WsGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/ws.gaurd.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/ws.gaurd.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/ws.gaurd.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate,  } from '@nestjs/common';\nimport { UNAUTHORIZED } from '../../common/ws.event.types';\nimport { UserService } from '../user/user.service';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class WsGuard implements CanActivate {\n  constructor(\n    private userService: UserService,\n    private authService: AuthService,\n  ) {}\n\n  async canActivate(context: any): Promise {\n    const bearerToken = context.args[0]?.handshake?.query?.token;\n\n    try {\n      const decoded = this.authService.verifyJwt(bearerToken) as any;\n      const user = await this.userService.findByEmail(decoded.email);\n      let data = context.switchToWs().getData();\n     if(typeof data==='object'){\n        data.user = user;\n      }\n\n      return true;\n    } catch (ex) {\n      console.log(ex);\n      context.args[0]?.server?.emit(UNAUTHORIZED);\n\n      return false;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "coverage.html": { "url": "coverage.html", "title": "coverage - coverage", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            ATTEMPT_QUESTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            CONNECT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            DISCONNECT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            FETCH_ATTEMPT_ID\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            FETCH_QUESTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            FETCH_QUIZ_DETAILS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            FINISH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            FINISHED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            NOT_FOUND\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            RECEIVED_QUESTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            RECEIVED_QUIZ_DETAILS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            START\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            UNAUTHORIZED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                config/env.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                config/typeorm.config.ts\n            \n            variable\n            TypeOrmConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                config/url.ts\n            \n            variable\n            baseURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/Jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/auth/auth.module.ts\n            \n            variable\n            passportAuthModules\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/jwt.gaurd.ts\n            \n            class\n            JwtGaurd\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.payload.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/ws.gaurd.ts\n            \n            guard\n            WsGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question/dto/new.question.ts\n            \n            class\n            NewQuestionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/question/dto/update.question.ts\n            \n            class\n            UpdateQuestionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/question/question.controller.ts\n            \n            controller\n            QuestionController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/question/question.entity.ts\n            \n            class\n            QuestionEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/question/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/quizz/dto/new.quiz.ts\n            \n            class\n            NewQuizDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/quizz/entities/question_attempt.entity.ts\n            \n            class\n            QuestionAttemptEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/quizz/entities/quizz.entity.ts\n            \n            class\n            QuizzEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/quizz/entities/quizz_attempts.entity.ts\n            \n            class\n            QuizzAttemptEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/quizz/quizz-attempt.gateway.ts\n            \n            class\n            QuizAttemptGateway\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/quizz/quizz.controller.ts\n            \n            controller\n            QuizController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/quizz/quizz.service.ts\n            \n            injectable\n            QuizzService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "dependencies.html": { "url": "dependencies.html", "title": "package-dependencies - dependencies", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/platform-socket.io : ^7.5.2\n        \n            @nestjs/swagger : ^4.7.5\n        \n            @nestjs/typeorm : ^7.1.4\n        \n            @nestjs/websockets : ^7.5.2\n        \n            @types/axios : ^0.14.0\n        \n            @types/connect-redis : 0.0.14\n        \n            @types/express-session : ^1.17.0\n        \n            @types/faker : ^5.1.4\n        \n            @types/passport-jwt : ^3.0.3\n        \n            @types/redis : ^2.8.27\n        \n            axios : ^0.20.0\n        \n            class-transformer : ^0.3.1\n        \n            class-transformer-validator : ^0.9.1\n        \n            class-validator : ^0.12.2\n        \n            connect-redis : ^5.0.0\n        \n            dotenv : ^8.2.0\n        \n            express-session : ^1.17.1\n        \n            faker : ^5.1.0\n        \n            nestjs-typeorm-paginate : ^2.2.1\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.3.3\n        \n            redis : ^3.0.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            swagger-ui-express : ^4.1.5\n        \n            typeorm : ^0.2.26\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "miscellaneous/functions.html": { "url": "miscellaneous/functions.html", "title": "miscellaneous-functions - functions", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "index.html": { "url": "index.html", "title": "overview - index", "body": "\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_QuestionModule\n\n\n\ncluster_QuestionModule_exports\n\n\n\ncluster_QuestionModule_providers\n\n\n\ncluster_QuizzModule\n\n\n\ncluster_QuizzModule_exports\n\n\n\ncluster_QuizzModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nQuestionModule\n\nQuestionModule\n\n\n\nQuizzModule\n\nQuizzModule\n\nQuizzModule -->\n\nQuestionModule->QuizzModule\n\n\n\nAppModule -->\n\nQuestionModule->AppModule\n\n\n\n\n\nQuestionService \n\nQuestionService \n\nQuestionService  -->\n\nQuestionModule->QuestionService \n\n\n\nAppModule -->\n\nQuizzModule->AppModule\n\n\n\n\n\nQuizzService \n\nQuizzService \n\nQuizzService  -->\n\nQuizzModule->QuizzService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nQuizzModule -->\n\nUserModule->QuizzModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionModule -->\n\nQuestionService->QuestionModule\n\n\n\n\n\nQuizzService\n\nQuizzService\n\nQuizzModule -->\n\nQuizzService->QuizzModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules.html": { "url": "modules.html", "title": "modules - modules", "body": "\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuestionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuizzModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "miscellaneous/variables.html": { "url": "miscellaneous/variables.html", "title": "miscellaneous-variables - variables", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ATTEMPT_QUESTION   (common/.../ws.event.types.ts)\n                        \n                        \n                            baseURL   (config/.../url.ts)\n                        \n                        \n                            CONNECT   (common/.../ws.event.types.ts)\n                        \n                        \n                            DISCONNECT   (common/.../ws.event.types.ts)\n                        \n                        \n                            ERROR   (common/.../ws.event.types.ts)\n                        \n                        \n                            FETCH_ATTEMPT_ID   (common/.../ws.event.types.ts)\n                        \n                        \n                            FETCH_QUESTION   (common/.../ws.event.types.ts)\n                        \n                        \n                            FETCH_QUIZ_DETAILS   (common/.../ws.event.types.ts)\n                        \n                        \n                            FINISH   (common/.../ws.event.types.ts)\n                        \n                        \n                            FINISHED   (common/.../ws.event.types.ts)\n                        \n                        \n                            NOT_FOUND   (common/.../ws.event.types.ts)\n                        \n                        \n                            passportAuthModules   (src/.../auth.module.ts)\n                        \n                        \n                            RECEIVED_QUESTION   (common/.../ws.event.types.ts)\n                        \n                        \n                            RECEIVED_QUIZ_DETAILS   (common/.../ws.event.types.ts)\n                        \n                        \n                            START   (common/.../ws.event.types.ts)\n                        \n                        \n                            TypeOrmConfig   (config/.../typeorm.config.ts)\n                        \n                        \n                            UNAUTHORIZED   (common/.../ws.event.types.ts)\n                        \n                        \n                               (config/.../env.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    common/ws.event.types.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ATTEMPT_QUESTION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ATTEMPT_QUESTION'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CONNECT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'connect'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DISCONNECT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'disconnect'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ERROR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"ERROR\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FETCH_ATTEMPT_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FETCH_ATTEMPT_ID'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FETCH_QUESTION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FETCH_QUESTION'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FETCH_QUIZ_DETAILS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FETCH_QUIZ_DETAILS'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FINISH\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FINISH'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FINISHED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"FINISHED\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NOT_FOUND\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'NOT_FOUND'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RECEIVED_QUESTION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'RECEIVED_QUESTION'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RECEIVED_QUIZ_DETAILS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"RECEIVED_QUIZ_DETAILS\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            START\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"START\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            UNAUTHORIZED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"UNAUTHORIZED\"\n                        \n                    \n\n\n            \n        \n\n    config/url.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            baseURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.BaseURL || 'http://localhost:5000/api'\n                        \n                    \n\n\n            \n        \n\n    src/auth/auth.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            passportAuthModules\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  PassportModule.register({\n    defaultStrategy: 'jwt',\n    session: false,\n  }),\n  JwtModule.register({\n    secret: JWT_SECRET,\n    signOptions: {\n      expiresIn: '7d',\n    },\n  }),\n]\n                        \n                    \n\n\n            \n        \n\n    config/typeorm.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TypeOrmConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: 'postgres',\n  host: env.POSTGRES_HOST,\n  port: parseInt(env.POSTGRES_PORT),\n  username: env.POSTGRES_USER,\n  password: env.POSTGRES_PASSWORD,\n  database: env.POSTGRES_DATABASE,\n  entities: ['dist/**/*.entity{.js,.ts}'],\n  cache: {\n    type: 'redis',\n    duration: 60000,\n    options: {\n      port: parseInt(env.DB_CACHE_PORT),\n      host: env.DB_CACHE_HOST,\n    },\n  },\n  synchronize: true,\n}\n                        \n                    \n\n\n            \n        \n\n    config/env.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" } }
};
//# sourceMappingURL=search_index.js.map