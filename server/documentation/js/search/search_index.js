var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.043,1,1.999]],["body/modules/AppModule.html",[0,1.711,1,3.999,2,1.497,3,1.497,4,1.8,5,1.8,6,1.497,7,2.379,8,1.8,9,2.878,10,2.878,11,3.345,12,0.034,13,3.028,14,3.345,15,2.756,16,2.379,17,1.8,18,1.8,19,0.256,20,0.256,21,0.213,22,3.455,23,2.165,24,2.927,25,2.628,26,2.628,27,3.302,28,0.541,29,0.748,30,3.455,31,3.455,32,2.215,33,1.497,34,2.498,35,2.878,36,3.455,37,2.927,38,3.455,39,3.455,40,2.498,41,3.455,42,3.455,43,3.455,44,3.455,45,3.455,46,0.256,47,0.131,48,0.018,49,0.024,50,0.018]],["title/controllers/AuthController.html",[24,1.999,51,1.479]],["body/controllers/AuthController.html",[12,0.033,19,0.303,20,0.303,21,0.252,23,1.936,24,3.258,28,0.444,29,0.884,46,0.303,47,0.155,48,0.021,49,0.026,50,0.021,51,1.936,52,3.402,53,2.953,54,5.793,55,0.47,56,2.202,57,2.016,58,4.083,59,0.991,60,1.254,61,5.083,62,0.731,63,4.083,64,1.487,65,1.487,66,0.531,67,1.365,68,4.235,69,1.769,70,2.953,71,2.953,72,2.624,73,2.953,74,4.083,75,2.35,76,4.083,77,1.487,78,1.487,79,4.083]],["title/modules/AuthModule.html",[0,1.043,11,1.795]],["body/modules/AuthModule.html",[0,1.698,2,1.474,3,1.474,4,1.773,5,1.773,6,1.474,7,2.644,8,2.644,11,3.582,12,0.034,15,2.744,16,2.355,17,1.773,18,1.773,19,0.253,20,0.253,21,0.21,27,3.27,28,0.516,29,0.737,34,2.461,46,0.335,47,0.129,48,0.018,49,0.023,50,0.018,72,2.951,73,2.461,80,2.835,81,2.835,82,2.835,83,3.404,84,3.582,85,2.461,86,3.404,87,2.461,88,3.404,89,2.182,90,2.898,91,2.461,92,3.404,93,1.474,94,3.27,95,2.835,96,2.835,97,2.182,98,2.461,99,1.614,100,2.835,101,2.461,102,2.835,103,2.835,104,2.835]],["title/injectables/AuthService.html",[72,1.479,105,0.958]],["body/injectables/AuthService.html",[12,0.034,19,0.192,20,0.192,21,0.159,28,0.478,29,0.559,46,0.192,47,0.098,48,0.013,49,0.019,50,0.013,55,0.297,57,1.596,59,0.912,62,0.951,64,0.94,65,1.596,66,0.336,67,0.864,68,2.151,72,1.77,77,1.934,78,1.855,87,1.867,90,2.393,91,1.867,93,2.207,99,1.224,101,1.867,105,1.147,106,1.345,107,2.151,108,0.966,109,4.384,110,4.384,111,4.384,112,4.384,113,4.384,114,1.77,115,1.867,116,2.3,117,5.476,118,2.582,119,1.318,120,2.654,121,2.582,122,2.582,123,2.582,124,2.582,125,2.582,126,3.17,127,3.11,128,1.236,129,1.224,130,1.867,131,2.148,132,2.151,133,1.944,134,3.652,135,3.733,136,4.384,137,2.283,138,2.582,139,2.582,140,2.582,141,2.582,142,2.582,143,2.582,144,2.151,145,1.749,146,1.867,147,2.582,148,2.582,149,2.582,150,2.582,151,2.582,152,2.582,153,2.81,154,1.655,155,2.582,156,3.733,157,3.733,158,2.393,159,2.582,160,2.582,161,2.582,162,2.582,163,2.582,164,1.655,165,1.867]],["title/classes/JwtGaurd.html",[47,0.118,166,1.795]],["body/classes/JwtGaurd.html",[12,0.032,19,0.35,20,0.35,21,0.291,28,0.412,46,0.412,47,0.179,48,0.024,49,0.029,50,0.024,89,3.023,119,1.22,166,3.391,167,1.577,168,3.928,169,4.716,170,2.236,171,4.716]],["title/interfaces/JwtPayload.html",[131,1.795,172,1.999]],["body/interfaces/JwtPayload.html",[12,0.032,19,0.347,20,0.347,21,0.289,46,0.347,48,0.024,49,0.028,50,0.024,55,0.539,59,0.989,66,0.609,108,1.429,131,3.179,134,4.895,172,3.002,173,4.683,174,3.902,175,4.683]],["title/injectables/JwtStrategy.html",[84,1.795,105,0.958]],["body/injectables/JwtStrategy.html",[12,0.034,19,0.269,20,0.269,21,0.224,28,0.514,29,0.785,46,0.269,47,0.138,48,0.019,49,0.024,50,0.019,55,0.418,56,2.043,57,1.908,62,0.844,64,1.717,65,1.717,66,0.613,67,1.577,69,1.572,75,2.088,77,1.321,78,1.321,84,2.714,89,2.326,90,3.023,91,2.624,93,1.572,97,2.326,99,1.72,105,1.449,106,1.89,114,1.72,115,2.624,116,2.403,130,2.624,131,3.192,132,3.023,137,1.89,144,3.023,145,1.717,146,2.624,158,2.326,170,1.72,176,3.023,177,4.716,178,3.629,179,4.716,180,3.629,181,3.629,182,3.629,183,3.023,184,3.629,185,3.41,186,3.629,187,3.629,188,3.629,189,3.629,190,3.629,191,3.629,192,3.629,193,3.629]],["title/classes/NewQuestionDto.html",[47,0.118,194,1.351]],["body/classes/NewQuestionDto.html",[12,0.033,19,0.286,20,0.286,21,0.237,28,0.428,46,0.364,47,0.186,48,0.02,49,0.025,50,0.02,55,0.444,59,1.072,60,1.656,62,0.965,66,0.7,108,1.268,119,0.997,167,1.289,194,2.335,195,3.21,196,3.898,197,3.455,198,3.898,199,4.902,200,3.853,201,3.853,202,3.853,203,3.853,204,4.726,205,2.47,206,4.102,207,3.853,208,2.787,209,3.853,210,2.787,211,3.21,212,3.898,213,4.083,214,2.47,215,4.083,216,4.083,217,3.21]],["title/classes/NewQuizDto.html",[47,0.118,218,1.795]],["body/classes/NewQuizDto.html",[12,0.033,19,0.28,20,0.28,21,0.233,28,0.466,46,0.28,47,0.184,48,0.019,49,0.025,50,0.019,55,0.435,59,1.067,60,1.73,62,1.008,66,0.732,108,1.252,167,1.264,194,2.314,204,4.851,205,2.422,206,4.21,208,2.733,210,2.733,212,3.501,214,2.422,218,2.786,219,3.148,220,3.424,221,3.862,222,3.862,223,3.424,224,4.841,225,3.779,226,3.779,227,3.779,228,3.779,229,3.779,230,3.779,231,5.341,232,3.779,233,3.779]],["title/classes/QuestionAttemptEntity.html",[47,0.118,234,1.625]],["body/classes/QuestionAttemptEntity.html",[12,0.033,19,0.274,20,0.274,21,0.228,28,0.417,46,0.354,47,0.14,48,0.019,49,0.025,50,0.019,55,0.426,59,1.06,60,1.716,62,1,66,0.752,108,1.235,119,0.956,167,1.236,170,2.263,234,2.753,235,3.08,236,3.042,237,5.286,238,5.286,239,3.042,240,3.581,241,3.042,242,3.697,243,2.747,244,3.697,245,4.773,246,3.697,247,2.648,248,2.674,249,1.926,250,3.06,251,3.06,252,3.697,253,2.747,254,3.06,255,2.128,256,1.346,257,3.08,258,3.697]],["title/controllers/QuestionController.html",[25,1.795,51,1.479]],["body/controllers/QuestionController.html",[12,0.033,19,0.226,20,0.226,21,0.187,23,1.442,25,2.411,28,0.473,29,0.658,46,0.226,47,0.116,48,0.016,49,0.022,50,0.016,51,1.442,53,2.199,55,0.35,56,1.815,57,2.16,59,1.003,60,1.472,62,0.858,64,1.745,65,1.745,66,0.623,67,1.603,69,2.076,70,3.03,71,2.199,75,1.75,77,1.745,78,1.745,166,1.75,194,2.237,259,2.533,260,2.199,261,4.19,262,4.19,263,4.793,264,3.041,265,5.13,266,4.513,267,3.041,268,3.041,269,3.678,270,3.041,271,2.533,272,3.041,273,5.6,274,3.041,275,2.972,276,3.041,277,3.041,278,2.199,279,2.533,280,2.533,281,2.533,282,2.533,283,2.533,284,2.533,285,2.533,286,2.533,287,2.533,288,2.272,289,2.533,290,3.041,291,2.533,292,3.993,293,3.993,294,3.041,295,3.041,296,3.041,297,3.041,298,3.041,299,2.533,300,3.041,301,3.041,302,3.041]],["title/classes/QuestionEntity.html",[47,0.118,303,1.625]],["body/classes/QuestionEntity.html",[12,0.033,19,0.256,20,0.256,21,0.212,28,0.446,46,0.256,47,0.173,48,0.018,49,0.023,50,0.018,55,0.397,59,1.077,60,1.737,62,1.012,66,0.755,108,1.179,119,0.891,128,1.533,129,1.634,145,1.255,167,1.153,170,2.161,196,3.694,197,3.275,198,3.694,236,2.94,239,2.94,241,3.128,243,2.623,249,1.795,250,2.922,251,2.922,253,2.623,254,2.922,255,1.983,256,1.255,303,2.661,304,2.871,305,2.94,306,3.446,307,3.446,308,3.446,309,3.446,310,4.559,311,4.559,312,1.975,313,3.446,314,3.446,315,3.446,316,3.694,317,3.446,318,1.983,319,3.446]],["title/modules/QuestionModule.html",[0,1.043,13,1.625]],["body/modules/QuestionModule.html",[0,1.826,2,1.718,3,1.718,4,2.065,5,2.065,6,1.718,7,2.845,8,2.599,12,0.033,13,3.189,16,2.599,17,2.065,18,2.065,19,0.294,20,0.294,21,0.244,23,2.366,25,3.143,28,0.516,29,0.858,32,2.542,33,1.718,46,0.294,47,0.151,48,0.02,49,0.026,50,0.02,288,3.001,289,3.303,303,2.065,320,3.303,321,3.303,322,3.303,323,3.965,324,3.965,325,3.303,326,3.965,327,3.965]],["title/injectables/QuestionService.html",[105,0.958,288,1.479]],["body/injectables/QuestionService.html",[12,0.034,19,0.174,20,0.174,21,0.144,28,0.464,29,0.507,33,1.015,46,0.258,47,0.089,48,0.012,49,0.018,50,0.012,55,0.27,56,1.506,57,1.784,59,0.919,62,0.951,64,1.266,65,1.266,66,0.539,67,1.163,69,1.015,77,1.509,78,1.67,93,2.122,105,1.068,106,1.221,108,0.899,114,1.649,119,1.327,120,2.551,126,2.514,128,1.169,129,1.111,133,2.767,137,2.551,145,1.67,158,2.229,185,2.514,194,1.506,197,1.502,239,3.057,256,0.854,260,4.16,269,2.657,275,1.349,286,1.953,287,1.953,288,1.965,303,1.811,305,2.001,312,1.015,325,1.953,328,1.953,329,4.145,330,4.145,331,3.711,332,4.145,333,3.477,334,4.145,335,2.344,336,3.316,337,2.344,338,3.477,339,3.477,340,2.344,341,2.514,342,2.344,343,2.344,344,3.477,345,2.344,346,2.344,347,2.344,348,1.695,349,2.344,350,3.477,351,3.477,352,2.344,353,1.695,354,2.344,355,1.953,356,1.695,357,2.344,358,2.344,359,2.344,360,1.953,361,1.695,362,2.344,363,2.897,364,3.82,365,3.477,366,3.453,367,2.344,368,2.344,369,2.344,370,2.344,371,3.477,372,2.344,373,3.477,374,1.953,375,3.477,376,2.344,377,2.344,378,1.953,379,2.344,380,2.344,381,2.344,382,2.344,383,1.695,384,2.344,385,2.344]],["title/classes/QuizAttemptGateway.html",[37,1.999,47,0.118]],["body/classes/QuizAttemptGateway.html",[12,0.034,19,0.14,20,0.14,21,0.116,28,0.457,29,0.409,37,1.891,46,0.14,47,0.112,48,0.01,49,0.015,50,0.01,55,0.217,56,1.278,57,2.02,59,0.528,60,1.449,62,0.978,64,1.856,65,1.856,66,0.775,67,1.705,69,2.208,75,1.087,77,1.074,78,1.074,93,1.278,108,0.763,114,0.895,119,0.488,120,0.984,128,1.024,129,0.895,133,1.89,137,1.536,145,1.62,146,3.218,153,3.647,154,2.326,164,1.891,165,2.133,167,0.632,278,1.366,305,1.087,318,1.087,331,3.41,366,2.457,386,4.621,387,1.573,388,2.457,389,3.629,390,3.629,391,3.629,392,6.106,393,4.102,394,2.457,395,2.95,396,3.629,397,3.629,398,2.95,399,2.95,400,2.95,401,1.888,402,1.945,403,1.888,404,2.457,405,2.95,406,1.888,407,3.629,408,1.888,409,1.888,410,3.629,411,1.888,412,5.358,413,1.888,414,1.888,415,1.888,416,1.888,417,1.888,418,1.888,419,2.95,420,1.888,421,1.888,422,2.95,423,1.888,424,2.95,425,4.927,426,3.629,427,1.888,428,4.102,429,2.95,430,1.888,431,1.888,432,1.888,433,1.888,434,1.888,435,1.888,436,1.366,437,1.573,438,1.21,439,1.888,440,1.366,441,1.366,442,1.366,443,1.366,444,1.366,445,1.366,446,1.366,447,1.366,448,1.366,449,1.366,450,1.573,451,1.366,452,1.888,453,1.278,454,1.366,455,1.888,456,1.888,457,1.888,458,1.888,459,1.888,460,1.888,461,1.888,462,2.95,463,2.95,464,1.888,465,2.457,466,1.888,467,1.573,468,1.888,469,2.624,470,1.891,471,1.888,472,1.888,473,1.888,474,1.888,475,1.888,476,1.888,477,1.573,478,1.888,479,1.888,480,1.888,481,1.573,482,1.573,483,1.573,484,1.573,485,1.888]],["title/controllers/QuizController.html",[26,1.795,51,1.479]],["body/controllers/QuizController.html",[12,0.033,19,0.154,20,0.154,21,0.128,23,0.986,26,1.829,28,0.445,29,0.45,46,0.154,47,0.079,48,0.011,49,0.016,50,0.011,51,0.986,53,1.504,55,0.239,56,1.377,57,2.216,59,1.084,60,1.567,62,0.914,64,1.858,65,1.858,66,0.663,67,1.706,69,2.21,70,2.299,71,1.504,75,1.197,77,1.858,78,1.858,128,0.587,153,2.473,166,1.197,194,1.871,218,2.485,220,2.473,223,2.038,239,2.22,256,0.758,265,5.18,266,5.131,269,1.334,271,1.733,278,1.504,279,1.733,280,1.733,281,1.733,282,1.733,283,1.733,284,1.733,285,1.733,291,1.733,292,4.251,293,3.876,299,1.733,355,3.214,356,2.789,402,1.507,404,1.733,451,1.504,486,1.733,487,1.733,488,2.648,489,2.648,490,3.214,491,3.214,492,3.857,493,2.081,494,2.081,495,2.081,496,2.081,497,3.598,498,2.081,499,2.081,500,2.789,501,2.081,502,4.836,503,2.081,504,2.081,505,2.081,506,2.081,507,2.081,508,2.081,509,2.081,510,2.081,511,2.081,512,2.081,513,2.081,514,2.081,515,2.081,516,2.081,517,1.504,518,1.504,519,2.081,520,1.733,521,1.733,522,2.081,523,2.081,524,2.081,525,3.179,526,2.081,527,4.319,528,2.081,529,2.081,530,2.081,531,2.081,532,4.319,533,2.081,534,2.081,535,2.081,536,2.081,537,2.081,538,2.081,539,2.081,540,2.081,541,2.081,542,2.081,543,2.081,544,2.081,545,2.081,546,2.081]],["title/classes/QuizzAttemptEntity.html",[47,0.118,247,1.479]],["body/classes/QuizzAttemptEntity.html",[12,0.034,19,0.23,20,0.23,21,0.191,28,0.455,46,0.315,47,0.118,48,0.016,49,0.022,50,0.016,55,0.357,59,0.761,60,1.731,62,1.009,66,0.774,99,2.296,108,1.099,119,1.253,128,1.469,129,1.471,145,1.897,167,1.038,170,2.014,234,2.713,236,2.787,241,2.787,243,2.444,247,2.296,248,3.072,249,2.523,250,2.723,251,1.989,253,2.444,254,3.105,255,1.786,256,1.13,312,1.84,453,2.257,470,1.989,487,4.035,547,2.585,548,4.844,549,4.844,550,4.035,551,4.844,552,3.539,553,4.248,554,3.103,555,2.585,556,3.503,557,3.103,558,2.585,559,3.103,560,3.103,561,3.539,562,3.072,563,3.103,564,3.103,565,3.072,566,3.103,567,3.103,568,3.103,569,3.103,570,3.103,571,2.585,572,2.585,573,3.103]],["title/classes/QuizzEntity.html",[47,0.118,453,1.351]],["body/classes/QuizzEntity.html",[12,0.033,19,0.215,20,0.215,21,0.178,28,0.464,46,0.3,47,0.154,48,0.015,49,0.021,50,0.015,55,0.333,59,0.905,60,1.802,62,1.051,66,0.781,108,1.047,119,0.748,128,1.426,129,1.372,145,1.054,167,0.968,170,1.919,220,2.992,221,3.375,222,3.375,223,2.992,236,2.686,240,1.855,241,3.257,243,2.329,248,2.092,249,2.108,250,2.594,251,2.594,253,2.329,254,2.594,255,1.665,256,1.054,257,2.41,303,2.633,305,2.686,312,1.253,316,3.847,318,1.665,453,2.022,469,3.375,556,2.927,565,2.927,574,2.41,575,4.668,576,3.889,577,4.668,578,5.775,579,2.893,580,2.893,581,2.893,582,2.893,583,2.893,584,2.893,585,2.893,586,5.055,587,2.41,588,2.893,589,2.893,590,2.893,591,2.893,592,2.893,593,2.893,594,4.047,595,4.047,596,2.893,597,4.047,598,2.092,599,2.893,600,2.893,601,2.893]],["title/modules/QuizzModule.html",[0,1.043,14,1.795]],["body/modules/QuizzModule.html",[0,1.721,2,1.516,3,1.516,4,1.823,5,1.823,6,1.516,7,2.681,8,2.681,12,0.033,13,3.039,14,3.574,15,2.766,16,2.398,17,1.823,18,1.823,19,0.26,20,0.26,21,0.216,23,2.183,26,2.962,27,3.33,28,0.533,29,0.757,32,2.243,33,1.516,34,2.53,35,2.915,46,0.26,47,0.133,48,0.018,49,0.024,50,0.018,234,2.398,247,2.183,402,2.964,451,2.53,453,1.995,454,2.53,602,2.915,603,3.499,604,2.915,605,2.915,606,3.499,607,2.915,608,3.499,609,2.915,610,3.499]],["title/injectables/QuizzService.html",[105,0.958,402,1.479]],["body/injectables/QuizzService.html",[12,0.034,19,0.072,20,0.072,21,0.06,28,0.403,29,0.21,33,0.419,46,0.072,47,0.037,48,0.012,49,0.009,50,0.005,55,0.111,56,0.733,57,1.91,59,1.006,62,0.879,64,1.23,65,1.23,66,0.473,67,1.13,69,1.331,77,1.842,78,1.964,93,2.22,99,1.069,105,0.52,106,0.504,108,0.438,114,0.802,119,1.13,120,2.275,126,2.443,128,1.508,129,0.459,133,1.895,137,2.873,145,1.964,154,0.62,158,3.243,164,0.62,165,0.7,185,2.63,194,0.733,218,0.974,220,1.446,221,1.224,222,1.631,223,1.446,234,0.882,239,2.093,240,2.8,247,0.802,249,0.882,256,0.616,260,3.339,269,2.166,288,1.602,305,1.944,312,1.331,331,2.443,336,3.051,341,1.224,348,0.7,353,1.224,356,0.7,361,3.339,363,2.56,364,3.215,374,1.41,378,1.41,383,1.956,394,2.254,402,0.802,436,0.7,453,1.331,454,0.7,465,2.815,467,0.806,469,3.158,470,3.536,481,1.41,482,1.879,483,1.41,484,0.806,488,1.879,489,1.41,490,1.879,491,1.879,497,2.254,500,1.956,502,1.879,517,0.7,518,1.224,520,0.806,521,0.806,550,0.806,552,1.879,561,2.254,562,1.956,571,2.254,572,0.806,576,0.806,598,0.7,607,0.806,609,0.806,611,0.806,612,2.255,613,2.255,614,2.255,615,2.255,616,2.255,617,2.255,618,1.693,619,2.705,620,3.073,621,1.693,622,0.968,623,2.255,624,2.255,625,2.255,626,0.968,627,0.968,628,2.705,629,0.968,630,1.693,631,0.968,632,0.968,633,2.705,634,0.968,635,0.968,636,3.379,637,0.968,638,1.693,639,0.968,640,0.968,641,0.968,642,0.968,643,0.968,644,0.968,645,0.968,646,1.693,647,0.968,648,0.968,649,0.968,650,0.968,651,1.41,652,0.968,653,0.968,654,0.968,655,0.968,656,0.968,657,0.968,658,0.968,659,1.693,660,2.255,661,0.968,662,2.255,663,0.968,664,1.693,665,1.693,666,1.693,667,0.968,668,0.968,669,1.693,670,0.968,671,0.968,672,0.968,673,0.968,674,1.693,675,0.968,676,0.968,677,0.968,678,0.968,679,0.968,680,0.968,681,2.255,682,1.693,683,0.968,684,1.693,685,0.968,686,0.968,687,0.968,688,1.693,689,2.255,690,0.968,691,0.968,692,1.693,693,0.968,694,0.968,695,0.968,696,0.968,697,0.968,698,0.968,699,0.968,700,0.968,701,0.968,702,0.968,703,0.968,704,0.968,705,1.693,706,0.968,707,0.968,708,3.073,709,3.379,710,0.968,711,3.859,712,0.968,713,3.073,714,2.705,715,0.968,716,2.705,717,0.968,718,0.968,719,0.968,720,0.968,721,0.968,722,0.968,723,0.968,724,0.968,725,0.968,726,0.968,727,0.968,728,0.968,729,0.968,730,0.968,731,0.968,732,0.968,733,0.968,734,0.968,735,0.968]],["title/classes/UpdateQuestionDto.html",[47,0.118,275,1.795]],["body/classes/UpdateQuestionDto.html",[12,0.033,19,0.283,20,0.283,21,0.235,28,0.425,46,0.361,47,0.185,48,0.02,49,0.025,50,0.02,55,0.439,59,1.069,60,1.647,62,0.96,66,0.697,67,1.996,108,1.259,119,0.986,167,1.274,196,3.877,197,3.437,198,3.877,205,2.443,206,4.085,208,2.756,210,2.756,211,3.175,212,3.877,213,4.054,214,2.443,215,4.054,216,4.054,217,3.175,275,3.086,736,3.175,737,4.867,738,3.811,739,3.811,740,3.811,741,3.811,742,5.65]],["title/classes/UserEntity.html",[47,0.118,128,0.88]],["body/classes/UserEntity.html",[12,0.034,19,0.225,20,0.225,21,0.187,28,0.472,46,0.225,47,0.159,48,0.016,49,0.022,50,0.016,55,0.551,59,1.046,60,1.761,62,1.027,66,0.78,108,1.082,119,0.785,128,1.35,167,1.015,170,1.983,236,2.755,240,1.945,241,3.115,243,2.407,247,2.446,249,2.494,253,2.407,255,1.746,256,1.105,312,2.424,316,3.462,318,1.746,383,3.462,453,2.235,470,1.945,555,3.485,556,3.025,558,2.528,565,3.731,587,2.528,598,2.194,651,4.299,743,2.528,744,4.787,745,4.787,746,3.988,747,3.988,748,4.787,749,4.787,750,3.034,751,3.034,752,3.034,753,3.034,754,3.034,755,3.034,756,3.034,757,3.034,758,3.034,759,3.034,760,3.034,761,3.034,762,3.034,763,3.034,764,3.034,765,3.034]],["title/modules/UserModule.html",[0,1.043,15,1.479]],["body/modules/UserModule.html",[0,1.851,2,1.769,3,1.769,4,2.127,5,2.127,6,1.769,7,2.648,8,2.648,12,0.033,15,2.921,16,2.648,17,2.127,18,2.127,19,0.303,20,0.303,21,0.252,28,0.506,29,0.884,32,2.617,33,1.769,46,0.303,47,0.155,48,0.021,49,0.026,50,0.021,116,2.739,128,1.152,766,3.402,767,3.402,768,3.402,769,4.083,770,3.402,771,4.083,772,4.083,773,4.083,774,4.083]],["title/injectables/UserService.html",[105,0.958,116,1.351]],["body/injectables/UserService.html",[12,0.034,19,0.285,20,0.285,21,0.237,28,0.495,29,0.832,33,1.665,46,0.285,47,0.146,48,0.02,49,0.025,50,0.02,55,0.442,57,1.399,59,0.876,62,0.876,64,1.399,65,1.399,66,0.499,67,1.285,77,1.399,78,1.399,93,1.665,105,1.503,106,2.001,108,1.266,114,2.32,116,2.119,119,0.994,120,2.001,128,1.084,133,2.001,145,1.782,256,1.399,336,4.098,348,2.779,361,3.538,746,4.076,770,3.201,775,3.201,776,5.383,777,3.843,778,3.843,779,4.893,780,3.843,781,3.843,782,3.843]],["title/guards/WsGuard.html",[438,1.999,783,2.256]],["body/guards/WsGuard.html",[12,0.034,19,0.261,20,0.261,21,0.217,28,0.478,29,0.761,46,0.261,47,0.134,48,0.018,49,0.024,50,0.018,55,0.405,56,2.002,57,1.879,62,0.827,64,1.683,65,1.683,66,0.6,67,1.545,69,1.524,72,2.823,73,2.543,77,1.683,78,1.281,93,2.235,99,1.667,105,1.419,114,2.191,115,2.543,116,2.531,130,2.543,133,2.407,145,1.683,153,2.255,154,2.255,164,2.255,312,1.524,341,3.341,388,2.93,438,2.962,450,2.93,477,2.93,784,3.517,785,2.93,786,5.48,787,3.517,788,4.621,789,3.517,790,3.517,791,2.543,792,3.517,793,3.517,794,3.517,795,3.517,796,3.517,797,3.517,798,3.517,799,3.517,800,3.517,801,3.517,802,3.517]],["title/coverage.html",[803,3.552]],["body/coverage.html",[6,1.156,12,0.033,21,0.164,24,1.71,25,1.535,26,1.535,37,1.71,40,1.929,47,0.222,48,0.014,49,0.02,50,0.014,51,2.117,52,2.223,66,0.347,72,1.265,84,1.535,85,1.929,94,1.929,105,1.585,107,2.223,116,1.156,128,0.752,131,1.535,137,1.39,166,1.535,168,2.223,172,1.71,174,2.223,176,2.223,194,1.156,195,2.223,218,1.535,219,2.223,234,1.39,235,2.223,247,1.265,259,2.223,275,1.535,288,1.265,303,1.39,304,2.223,328,2.223,386,2.223,387,2.223,402,1.265,438,1.71,440,1.929,441,1.929,442,1.929,443,1.929,444,1.929,445,1.929,446,1.929,447,1.929,448,1.929,449,1.929,453,1.156,486,2.223,547,2.223,562,4.686,574,2.223,611,2.223,736,2.223,743,2.223,775,2.223,783,1.929,785,2.223,791,1.929,803,2.223,804,2.668,805,2.668,806,2.668,807,5.058,808,6.207,809,6.256,810,1.929,811,2.223,812,2.223,813,2.223,814,2.223,815,2.223,816,2.223,817,4.465,818,3.822,819,3.822,820,2.223,821,2.668,822,4.465,823,2.668,824,4.465,825,3.822,826,2.668,827,2.668,828,2.668,829,2.668,830,2.668]],["title/dependencies.html",[3,1.626,831,2.602]],["body/dependencies.html",[3,1.512,12,0.034,29,0.755,33,1.512,47,0.195,48,0.018,49,0.024,50,0.018,87,2.524,89,2.237,97,2.947,98,3.324,127,2.908,183,4.283,205,2.237,214,2.947,256,1.674,318,2.645,436,2.524,437,2.908,517,2.524,518,2.524,810,2.524,832,5.141,833,3.49,834,4.597,835,4.597,836,5.141,837,4.597,838,3.49,839,3.49,840,3.49,841,3.49,842,3.49,843,4.283,844,3.49,845,3.49,846,3.49,847,3.49,848,3.49,849,3.49,850,3.49,851,3.49,852,3.49,853,3.49,854,3.49,855,3.49,856,3.49,857,3.49,858,3.49,859,3.49,860,3.49,861,3.49,862,3.49,863,3.49,864,3.49,865,3.49,866,3.49,867,3.49,868,3.49,869,3.49,870,3.49,871,4.597,872,3.49,873,3.49,874,3.49,875,3.49,876,3.49,877,3.49,878,3.49,879,3.49,880,3.49,881,3.49]],["title/miscellaneous/functions.html",[882,1.668,883,3.127]],["body/miscellaneous/functions.html",[6,2.597,12,0.029,48,0.025,49,0.029,50,0.025,55,0.566,820,4.098,882,3.153,883,4.098,884,4.919]],["title/index.html",[55,0.359,885,2.599]],["body/index.html",[0,1.127,1,3.924,2,1.46,3,1.46,4,1.755,5,1.755,6,1.46,7,1.755,8,1.755,9,2.808,10,2.808,11,3.552,12,0.033,13,3.069,14,3.523,15,2.838,16,2.34,17,1.755,18,1.755,23,1.598,48,0.017,49,0.023,50,0.017,72,2.794,80,2.808,81,2.808,82,2.808,84,3.391,106,1.755,116,2.553,167,1.127,172,2.16,288,2.794,320,2.808,321,2.808,322,2.808,353,3.248,402,2.794,602,2.808,604,2.808,605,2.808,766,2.808,767,2.808,768,2.808,783,2.437,885,2.808,886,4.492,887,3.37,888,3.37]],["title/modules.html",[2,1.847]],["body/modules.html",[1,2.962,2,2.001,11,2.659,12,0.028,13,2.406,14,2.659,15,2.19,48,0.024,49,0.028,50,0.024,889,6.169,890,6.169,891,6.169,892,6.169]],["title/miscellaneous/variables.html",[882,1.668,893,3.127]],["body/miscellaneous/variables.html",[12,0.034,40,2.818,48,0.014,49,0.02,50,0.014,55,0.316,59,1.092,66,0.809,85,1.983,90,1.758,94,2.818,95,2.285,96,2.285,97,1.758,98,1.983,99,1.3,100,2.285,101,1.983,102,2.285,103,2.285,104,2.285,119,1.611,120,3.244,312,1.188,360,2.285,440,3.279,441,3.279,442,3.279,443,3.279,444,3.279,445,3.279,446,3.279,447,3.279,448,3.279,449,3.279,500,1.983,747,2.285,791,3.279,807,2.285,810,3.279,811,3.777,812,3.777,813,2.285,814,2.285,815,2.285,816,3.247,843,2.285,882,1.758,893,2.285,894,6.099,895,2.743,896,2.743,897,2.743,898,2.743,899,2.743,900,2.743,901,2.743,902,2.743,903,3.898,904,2.743,905,3.898,906,2.743,907,2.743,908,2.743,909,2.743,910,2.743,911,2.743,912,2.743,913,2.743,914,2.743,915,2.743,916,2.743,917,2.743,918,2.743,919,2.743]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtGaurd.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"controllers/QuestionController.html":{},"classes/QuestionEntity.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":562,"title":{},"body":{"classes/QuizzAttemptEntity.html":{},"injectables/QuizzService.html":{},"coverage.html":{}}}],["0.0.14",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["0.2.26",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["0.20.0",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":809,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":826,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":827,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":828,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":818,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":817,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":822,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":825,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":823,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":819,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":824,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":353,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/QuizzService.html":{},"index.html":{}}}],["1.17.0",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["1.17.1",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":888,"title":{},"body":{"index.html":{}}}],["2.0.0",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["2.2.1",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["2.8.27",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":887,"title":{},"body":{"index.html":{}}}],["3.0.2",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["4.1.5",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["4.7.5",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":886,"title":{},"body":{"index.html":{}}}],["5.0.0",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["5.1.0",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["5.1.4",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.0.0",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["7.1.4",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["7.5.2",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["8.2.0",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["8.3.3",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["accesstoken",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["addnewquestion",{"_index":612,"title":{},"body":{"injectables/QuizzService.html":{}}}],["addoldquestion",{"_index":613,"title":{},"body":{"injectables/QuizzService.html":{}}}],["afterinit",{"_index":393,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["apiproperty",{"_index":204,"title":{},"body":{"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{}}}],["apiproperty()@isnotempty()@arrayminsize(1",{"_index":226,"title":{},"body":{"classes/NewQuizDto.html":{}}}],["apiproperty()@isnotempty()@isarray()@arrayminsize(2",{"_index":201,"title":{},"body":{"classes/NewQuestionDto.html":{}}}],["apiproperty()@isnotempty()@isdatestring",{"_index":224,"title":{},"body":{"classes/NewQuizDto.html":{}}}],["apiproperty()@isnotempty()@isstring",{"_index":228,"title":{},"body":{"classes/NewQuizDto.html":{}}}],["apiproperty()@isnotempty()@isstring()@minlength(5)@maxlength(100",{"_index":199,"title":{},"body":{"classes/NewQuestionDto.html":{}}}],["apipropertyoptional",{"_index":742,"title":{},"body":{"classes/UpdateQuestionDto.html":{}}}],["apipropertyoptional()@isnotempty()@isarray()@arrayminsize(2",{"_index":739,"title":{},"body":{"classes/UpdateQuestionDto.html":{}}}],["apipropertyoptional()@isnotempty()@isstring()@minlength(5)@maxlength(100",{"_index":737,"title":{},"body":{"classes/UpdateQuestionDto.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["args",{"_index":426,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["arr",{"_index":350,"title":{},"body":{"injectables/QuestionService.html":{}}}],["array",{"_index":311,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["arrayminsize",{"_index":210,"title":{},"body":{"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/UpdateQuestionDto.html":{}}}],["arrayminsize(1",{"_index":233,"title":{},"body":{"classes/NewQuizDto.html":{}}}],["arrayminsize(2",{"_index":217,"title":{},"body":{"classes/NewQuestionDto.html":{},"classes/UpdateQuestionDto.html":{}}}],["async",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"injectables/QuizzService.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{}}}],["attempt",{"_index":684,"title":{},"body":{"injectables/QuizzService.html":{}}}],["attempt.gateway",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["attempt.gateway.ts",{"_index":387,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"coverage.html":{}}}],["attempt.gateway.ts:114",{"_index":433,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["attempt.gateway.ts:131",{"_index":417,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["attempt.gateway.ts:163",{"_index":414,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["attempt.gateway.ts:33",{"_index":403,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["attempt.gateway.ts:36",{"_index":408,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["attempt.gateway.ts:37",{"_index":406,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["attempt.gateway.ts:39",{"_index":409,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["attempt.gateway.ts:43",{"_index":430,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["attempt.gateway.ts:49",{"_index":427,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["attempt.gateway.ts:56",{"_index":423,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["attempt.gateway.ts:73",{"_index":420,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["attempt_question",{"_index":440,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["attemptfinished",{"_index":548,"title":{},"body":{"classes/QuizzAttemptEntity.html":{}}}],["attemptid",{"_index":465,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{}}}],["attemptquestion",{"_index":394,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{}}}],["attemptquestion(server",{"_index":411,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["attemptquestion(user",{"_index":627,"title":{},"body":{"injectables/QuizzService.html":{}}}],["attemptquiz",{"_index":618,"title":{},"body":{"injectables/QuizzService.html":{}}}],["attemptquiz(user",{"_index":630,"title":{},"body":{"injectables/QuizzService.html":{}}}],["auth",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth(id_token",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.service",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"guards/WsGuard.html":{}}}],["auth/auth.controller",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt.gaurd",{"_index":285,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["auth/ws.gaurd",{"_index":439,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["authcontroller",{"_index":24,"title":{"controllers/AuthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["authcontroller,questioncontroller,quizcontroller",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["authenticateuser",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":169,"title":{},"body":{"classes/JwtGaurd.html":{}}}],["authguard('jwt",{"_index":171,"title":{},"body":{"classes/JwtGaurd.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{}}}],["authservice",{"_index":72,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/WsGuard.html":{},"coverage.html":{},"index.html":{}}}],["await",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"injectables/QuizzService.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{}}}],["axios",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["axios.get",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QuestionService.html":{},"injectables/QuizzService.html":{}}}],["badrequestexception('invalid",{"_index":710,"title":{},"body":{"injectables/QuizzService.html":{}}}],["badrequestexception('no",{"_index":714,"title":{},"body":{"injectables/QuizzService.html":{}}}],["baseentity",{"_index":236,"title":{},"body":{"classes/QuestionAttemptEntity.html":{},"classes/QuestionEntity.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"classes/UserEntity.html":{}}}],["baseurl",{"_index":816,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["bearertoken",{"_index":792,"title":{},"body":{"guards/WsGuard.html":{}}}],["body",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["body('enddatetime",{"_index":537,"title":{},"body":{"controllers/QuizController.html":{}}}],["body('id_token",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('startdatetime",{"_index":536,"title":{},"body":{"controllers/QuizController.html":{}}}],["boolean",{"_index":552,"title":{},"body":{"classes/QuizzAttemptEntity.html":{},"injectables/QuizzService.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QuestionModule.html":{},"modules/QuizzModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["browse",{"_index":892,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":889,"title":{},"body":{"modules.html":{}}}],["c",{"_index":482,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{}}}],["c.attemptfinished",{"_index":484,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{}}}],["c.optionchoosed",{"_index":668,"title":{},"body":{"injectables/QuizzService.html":{}}}],["c.questionid",{"_index":667,"title":{},"body":{"injectables/QuizzService.html":{}}}],["c.quizz.quizzid",{"_index":483,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{}}}],["cache",{"_index":360,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["canactivate",{"_index":786,"title":{},"body":{"guards/WsGuard.html":{}}}],["canactivate(context",{"_index":788,"title":{},"body":{"guards/WsGuard.html":{}}}],["canattemptquiz",{"_index":619,"title":{},"body":{"injectables/QuizzService.html":{}}}],["canattemptquiz(quiz",{"_index":632,"title":{},"body":{"injectables/QuizzService.html":{}}}],["canattemptquizz",{"_index":475,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["cascade",{"_index":251,"title":{},"body":{"classes/QuestionAttemptEntity.html":{},"classes/QuestionEntity.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{}}}],["cascade',eager:true",{"_index":573,"title":{},"body":{"classes/QuizzAttemptEntity.html":{}}}],["catch",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{},"guards/WsGuard.html":{}}}],["checkforpreviousattempts",{"_index":633,"title":{},"body":{"injectables/QuizzService.html":{}}}],["choosedoption",{"_index":628,"title":{},"body":{"injectables/QuizzService.html":{}}}],["class",{"_index":47,"title":{"classes/JwtGaurd.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"classes/QuestionEntity.html":{},"classes/QuizAttemptGateway.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtGaurd.html":{},"injectables/JwtStrategy.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"controllers/QuestionController.html":{},"classes/QuestionEntity.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":167,"title":{},"body":{"classes/JwtGaurd.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"classes/QuestionEntity.html":{},"classes/QuizAttemptGateway.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"index.html":{}}}],["classtoplain",{"_index":452,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["classtoplain(quiz",{"_index":474,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["client",{"_index":428,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["client.conn.remoteaddress",{"_index":463,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["client.id",{"_index":462,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_exports",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_questionmodule",{"_index":320,"title":{},"body":{"modules/QuestionModule.html":{},"index.html":{}}}],["cluster_questionmodule_exports",{"_index":321,"title":{},"body":{"modules/QuestionModule.html":{},"index.html":{}}}],["cluster_questionmodule_providers",{"_index":322,"title":{},"body":{"modules/QuestionModule.html":{},"index.html":{}}}],["cluster_quizzmodule",{"_index":602,"title":{},"body":{"modules/QuizzModule.html":{},"index.html":{}}}],["cluster_quizzmodule_exports",{"_index":604,"title":{},"body":{"modules/QuizzModule.html":{},"index.html":{}}}],["cluster_quizzmodule_imports",{"_index":603,"title":{},"body":{"modules/QuizzModule.html":{}}}],["cluster_quizzmodule_providers",{"_index":605,"title":{},"body":{"modules/QuizzModule.html":{},"index.html":{}}}],["cluster_usermodule",{"_index":766,"title":{},"body":{"modules/UserModule.html":{},"index.html":{}}}],["cluster_usermodule_exports",{"_index":767,"title":{},"body":{"modules/UserModule.html":{},"index.html":{}}}],["cluster_usermodule_providers",{"_index":768,"title":{},"body":{"modules/UserModule.html":{},"index.html":{}}}],["column",{"_index":241,"title":{},"body":{"classes/QuestionAttemptEntity.html":{},"classes/QuestionEntity.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"classes/UserEntity.html":{}}}],["column('text",{"_index":310,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["column('uuid",{"_index":245,"title":{},"body":{"classes/QuestionAttemptEntity.html":{}}}],["column()@exclude",{"_index":306,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["column({default",{"_index":553,"title":{},"body":{"classes/QuizzAttemptEntity.html":{}}}],["column({nullable",{"_index":756,"title":{},"body":{"classes/UserEntity.html":{}}}],["common/.../ws.event.types.ts",{"_index":894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["common/ws.event.types",{"_index":450,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"guards/WsGuard.html":{}}}],["common/ws.event.types.ts",{"_index":807,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["config/.../env.ts",{"_index":898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config/.../typeorm.config.ts",{"_index":897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config/.../url.ts",{"_index":895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config/env",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["config/env.ts",{"_index":813,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["config/typeorm.config",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["config/typeorm.config.ts",{"_index":814,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["config/url.ts",{"_index":815,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["connect",{"_index":810,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["connected",{"_index":464,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["console.debug(quiz.createdby.userid,userid",{"_index":732,"title":{},"body":{"injectables/QuizzService.html":{}}}],["console.log(e",{"_index":467,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{}}}],["console.log(ex",{"_index":801,"title":{},"body":{"guards/WsGuard.html":{}}}],["const",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{}}}],["constructor",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{}}}],["constructor(private",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/QuestionController.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{}}}],["constructor(questionentityrepository",{"_index":335,"title":{},"body":{"injectables/QuestionService.html":{}}}],["constructor(questionservice",{"_index":622,"title":{},"body":{"injectables/QuizzService.html":{}}}],["constructor(quizservice",{"_index":401,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["constructor(userentityrepository",{"_index":777,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/WsGuard.html":{}}}],["context",{"_index":790,"title":{},"body":{"guards/WsGuard.html":{}}}],["context.args[0]?.handshake?.query?.token",{"_index":793,"title":{},"body":{"guards/WsGuard.html":{}}}],["context.args[0]?.server?.emit(unauthorized",{"_index":802,"title":{},"body":{"guards/WsGuard.html":{}}}],["context.switchtows().getdata",{"_index":797,"title":{},"body":{"guards/WsGuard.html":{}}}],["controller",{"_index":51,"title":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/QuizController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/QuizController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('question",{"_index":290,"title":{},"body":{"controllers/QuestionController.html":{}}}],["controller('quizz",{"_index":522,"title":{},"body":{"controllers/QuizController.html":{}}}],["controllers",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"controllers/QuizController.html":{},"modules/QuizzModule.html":{},"index.html":{}}}],["correctanswer",{"_index":196,"title":{},"body":{"classes/NewQuestionDto.html":{},"classes/QuestionEntity.html":{},"classes/UpdateQuestionDto.html":{}}}],["coverage",{"_index":803,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":381,"title":{},"body":{"injectables/QuestionService.html":{}}}],["createdat",{"_index":575,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["createdatecolumn",{"_index":594,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["createdby",{"_index":305,"title":{},"body":{"classes/QuestionEntity.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{}}}],["createnewquestion",{"_index":329,"title":{},"body":{"injectables/QuestionService.html":{}}}],["createnewquiz",{"_index":614,"title":{},"body":{"injectables/QuizzService.html":{}}}],["createuserentity",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["data",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"guards/WsGuard.html":{}}}],["data.email",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.name",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.picture",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.user",{"_index":477,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"guards/WsGuard.html":{}}}],["data==='object",{"_index":799,"title":{},"body":{"guards/WsGuard.html":{}}}],["database",{"_index":910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":578,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["date(enddatetime",{"_index":724,"title":{},"body":{"injectables/QuizzService.html":{}}}],["date(quizdata.enddatetime",{"_index":698,"title":{},"body":{"injectables/QuizzService.html":{}}}],["date(quizdata.startdatetime",{"_index":696,"title":{},"body":{"injectables/QuizzService.html":{}}}],["date(startdatetime",{"_index":722,"title":{},"body":{"injectables/QuizzService.html":{}}}],["date.now",{"_index":658,"title":{},"body":{"injectables/QuizzService.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QuestionModule.html":{},"modules/QuizzModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["decoded",{"_index":794,"title":{},"body":{"guards/WsGuard.html":{}}}],["decorators",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"controllers/QuestionController.html":{},"classes/QuestionEntity.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{}}}],["default",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtGaurd.html":{},"classes/NewQuestionDto.html":{},"classes/QuestionAttemptEntity.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"controllers/QuestionController.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{}}}],["delete",{"_index":284,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["delete(':id",{"_index":299,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["delete(':id')@useguards(jwtgaurd",{"_index":494,"title":{},"body":{"controllers/QuizController.html":{}}}],["delete(':id')@useguards(jwtgaurd)@usepipes(validationpipe",{"_index":267,"title":{},"body":{"controllers/QuestionController.html":{}}}],["delete(':qid/all/questions",{"_index":533,"title":{},"body":{"controllers/QuizController.html":{}}}],["delete(':qid/all/questions')@useguards(jwtgaurd)@usepipes(validationpipe",{"_index":508,"title":{},"body":{"controllers/QuizController.html":{}}}],["delete(':qid/question/:questionid",{"_index":529,"title":{},"body":{"controllers/QuizController.html":{}}}],["delete(':qid/question/:questionid')@useguards(jwtgaurd)@usepipes(validationpipe",{"_index":511,"title":{},"body":{"controllers/QuizController.html":{}}}],["deleteqa",{"_index":261,"title":{},"body":{"controllers/QuestionController.html":{}}}],["deleteqa(@param('id",{"_index":300,"title":{},"body":{"controllers/QuestionController.html":{}}}],["deleteqa(id",{"_index":264,"title":{},"body":{"controllers/QuestionController.html":{}}}],["deletequestion",{"_index":330,"title":{},"body":{"injectables/QuestionService.html":{}}}],["deletequiz",{"_index":488,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizzService.html":{}}}],["deletequiz(@param('id",{"_index":541,"title":{},"body":{"controllers/QuizController.html":{}}}],["deletequiz(id",{"_index":493,"title":{},"body":{"controllers/QuizController.html":{}}}],["deleting",{"_index":380,"title":{},"body":{"injectables/QuestionService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QuestionModule.html":{},"modules/QuizzModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{}}}],["desc",{"_index":729,"title":{},"body":{"injectables/QuizzService.html":{}}}],["disconnect",{"_index":811,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["disconnected",{"_index":461,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["dist/**/*.entity{.js,.ts",{"_index":913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":804,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["dto/new.question",{"_index":286,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["dto/new.quiz",{"_index":521,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizzService.html":{}}}],["dto/update.question",{"_index":287,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["duration",{"_index":914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{}}}],["eager",{"_index":556,"title":{},"body":{"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"classes/UserEntity.html":{}}}],["email",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{}}}],["email:string",{"_index":175,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["enddatetime",{"_index":220,"title":{},"body":{"classes/NewQuizDto.html":{},"controllers/QuizController.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{}}}],["entities",{"_index":912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/question_attempt.entity",{"_index":607,"title":{},"body":{"modules/QuizzModule.html":{},"injectables/QuizzService.html":{}}}],["entities/quizz.entity",{"_index":454,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{}}}],["entities/quizz_attempts.entity",{"_index":609,"title":{},"body":{"modules/QuizzModule.html":{},"injectables/QuizzService.html":{}}}],["entity",{"_index":253,"title":{},"body":{"classes/QuestionAttemptEntity.html":{},"classes/QuestionEntity.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"classes/UserEntity.html":{}}}],["env.db_cache_host",{"_index":917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env.postgres_database",{"_index":911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env.postgres_host",{"_index":904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env.postgres_password",{"_index":909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env.postgres_user",{"_index":907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":441,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ex",{"_index":800,"title":{},"body":{"guards/WsGuard.html":{}}}],["exclude",{"_index":316,"title":{},"body":{"classes/QuestionEntity.html":{},"classes/QuizzEntity.html":{},"classes/UserEntity.html":{}}}],["exclude()@createdatecolumn",{"_index":579,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["exclude()@index()@column({unique",{"_index":752,"title":{},"body":{"classes/UserEntity.html":{}}}],["exclude()@manytomany(undefined",{"_index":583,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["exclude()@manytoone(undefined",{"_index":308,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["exclude()@onetomany(undefined",{"_index":587,"title":{},"body":{"classes/QuizzEntity.html":{},"classes/UserEntity.html":{}}}],["exclude()@updatedatecolumn",{"_index":592,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["expiresin",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtGaurd.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"controllers/QuestionController.html":{},"classes/QuestionEntity.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QuestionModule.html":{},"modules/QuizzModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["exports:[questionservice",{"_index":327,"title":{},"body":{"modules/QuestionModule.html":{}}}],["exports:[userservice",{"_index":774,"title":{},"body":{"modules/UserModule.html":{}}}],["express",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":170,"title":{},"body":{"classes/JwtGaurd.html":{},"injectables/JwtStrategy.html":{},"classes/QuestionAttemptEntity.html":{},"classes/QuestionEntity.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"classes/UserEntity.html":{}}}],["extractjwt",{"_index":181,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":190,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["faker",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["false",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QuizzAttemptEntity.html":{},"injectables/QuizzService.html":{},"guards/WsGuard.html":{},"miscellaneous/variables.html":{}}}],["fetch_attempt_id",{"_index":442,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fetch_question",{"_index":443,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fetch_quiz_details",{"_index":444,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fetchdata",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{}}}],["fetchquestion",{"_index":395,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["fetchquestion(server",{"_index":415,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["fetchquestionforquizattempt",{"_index":620,"title":{},"body":{"injectables/QuizzService.html":{}}}],["fetchquestionforquizattempt(attemptid",{"_index":635,"title":{},"body":{"injectables/QuizzService.html":{}}}],["fetchquizdetails",{"_index":396,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["fetchquizdetails(server",{"_index":418,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtGaurd.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"controllers/QuestionController.html":{},"classes/QuestionEntity.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{},"coverage.html":{}}}],["find",{"_index":385,"title":{},"body":{"injectables/QuestionService.html":{}}}],["findbyemail",{"_index":776,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":334,"title":{},"body":{"injectables/QuestionService.html":{}}}],["findbyid(questionid",{"_index":339,"title":{},"body":{"injectables/QuestionService.html":{}}}],["finish",{"_index":448,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["finished",{"_index":812,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["finishquiz",{"_index":397,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["finishquiz(server",{"_index":421,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["finishquizattempt",{"_index":615,"title":{},"body":{"injectables/QuizzService.html":{}}}],["found",{"_index":363,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/QuizzService.html":{}}}],["function",{"_index":821,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":883,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get()@useguards(jwtgaurd",{"_index":498,"title":{},"body":{"controllers/QuizController.html":{}}}],["get(@query",{"_index":539,"title":{},"body":{"controllers/QuizController.html":{}}}],["get(options",{"_index":496,"title":{},"body":{"controllers/QuizController.html":{}}}],["getquiz",{"_index":616,"title":{},"body":{"injectables/QuizzService.html":{}}}],["getquizzes",{"_index":621,"title":{},"body":{"injectables/QuizzService.html":{}}}],["getquizzes(user",{"_index":638,"title":{},"body":{"injectables/QuizzService.html":{}}}],["getuserandaccesstoken",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["given",{"_index":716,"title":{},"body":{"injectables/QuizzService.html":{}}}],["google",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["guard",{"_index":783,"title":{"guards/WsGuard.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["guards",{"_index":784,"title":{},"body":{"guards/WsGuard.html":{}}}],["handleconnection",{"_index":398,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["handleconnection(client",{"_index":424,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["handledisconnect",{"_index":399,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["handledisconnect(client",{"_index":429,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["him/her",{"_index":370,"title":{},"body":{"injectables/QuestionService.html":{}}}],["host",{"_index":903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:5000/api",{"_index":900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${id_token.trim",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus",{"_index":281,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["id",{"_index":269,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/QuizController.html":{},"injectables/QuizzService.html":{}}}],["id:string,@req",{"_index":542,"title":{},"body":{"controllers/QuizController.html":{}}}],["id_token",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["id_token:string",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["identifier",{"_index":805,"title":{},"body":{"coverage.html":{}}}],["if(!user",{"_index":193,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["if(typeof",{"_index":798,"title":{},"body":{"guards/WsGuard.html":{}}}],["ignoreexpiration",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["implements",{"_index":388,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"guards/WsGuard.html":{}}}],["import",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtGaurd.html":{},"injectables/JwtStrategy.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"controllers/QuestionController.html":{},"classes/QuestionEntity.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{}}}],["imports",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QuizzModule.html":{}}}],["imports:[typeormmodule.forfeature([questionentity",{"_index":326,"title":{},"body":{"modules/QuestionModule.html":{}}}],["imports:[typeormmodule.forfeature([userentity",{"_index":772,"title":{},"body":{"modules/UserModule.html":{}}}],["index",{"_index":55,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"controllers/QuestionController.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtGaurd.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"controllers/QuestionController.html":{},"classes/QuestionEntity.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{}}}],["injectable",{"_index":105,"title":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{},"injectables/QuizzService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{},"injectables/QuizzService.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{},"injectables/QuizzService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["injectrepository",{"_index":348,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/QuizzService.html":{},"injectables/UserService.html":{}}}],["injectrepository(questionattemptentity",{"_index":656,"title":{},"body":{"injectables/QuizzService.html":{}}}],["injectrepository(questionentity",{"_index":349,"title":{},"body":{"injectables/QuestionService.html":{}}}],["injectrepository(quizzattemptentity",{"_index":655,"title":{},"body":{"injectables/QuizzService.html":{}}}],["injectrepository(quizzentity",{"_index":654,"title":{},"body":{"injectables/QuizzService.html":{}}}],["injectrepository(userentity",{"_index":781,"title":{},"body":{"injectables/UserService.html":{}}}],["interface",{"_index":172,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":173,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["ipaginationoptions",{"_index":497,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizzService.html":{}}}],["isarray",{"_index":213,"title":{},"body":{"classes/NewQuestionDto.html":{},"classes/UpdateQuestionDto.html":{}}}],["isdatestring",{"_index":231,"title":{},"body":{"classes/NewQuizDto.html":{}}}],["isnew",{"_index":681,"title":{},"body":{"injectables/QuizzService.html":{}}}],["isnotempty",{"_index":206,"title":{},"body":{"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/UpdateQuestionDto.html":{}}}],["isnumber",{"_index":209,"title":{},"body":{"classes/NewQuestionDto.html":{}}}],["isquizzattemptfinished",{"_index":480,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["isstring",{"_index":212,"title":{},"body":{"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/UpdateQuestionDto.html":{}}}],["jointable",{"_index":595,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["jwt",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.payload",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["jwt.strategy",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_secret",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":189,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtgaurd",{"_index":166,"title":{"classes/JwtGaurd.html":{}},"body":{"classes/JwtGaurd.html":{},"controllers/QuestionController.html":{},"controllers/QuizController.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["jwtpayload",{"_index":131,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":84,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QuestionModule.html":{},"modules/QuizzModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["literal",{"_index":412,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["logger",{"_index":331,"title":{},"body":{"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{}}}],["logger('questionservice",{"_index":344,"title":{},"body":{"injectables/QuestionService.html":{}}}],["logger('quizzgateway",{"_index":405,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["logger('quizzservice",{"_index":646,"title":{},"body":{"injectables/QuizzService.html":{}}}],["made",{"_index":369,"title":{},"body":{"injectables/QuestionService.html":{}}}],["manytomany",{"_index":596,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["manytomany(type",{"_index":599,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["manytoone",{"_index":254,"title":{},"body":{"classes/QuestionAttemptEntity.html":{},"classes/QuestionEntity.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{}}}],["manytoone(undefined",{"_index":248,"title":{},"body":{"classes/QuestionAttemptEntity.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{}}}],["matching",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtGaurd.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"controllers/QuestionController.html":{},"classes/QuestionEntity.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":211,"title":{},"body":{"classes/NewQuestionDto.html":{},"classes/UpdateQuestionDto.html":{}}}],["maxlength(100",{"_index":216,"title":{},"body":{"classes/NewQuestionDto.html":{},"classes/UpdateQuestionDto.html":{}}}],["metadata",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"injectables/QuizzService.html":{},"guards/WsGuard.html":{}}}],["min",{"_index":207,"title":{},"body":{"classes/NewQuestionDto.html":{}}}],["minlength",{"_index":208,"title":{},"body":{"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/UpdateQuestionDto.html":{}}}],["minlength(5",{"_index":215,"title":{},"body":{"classes/NewQuestionDto.html":{},"classes/UpdateQuestionDto.html":{}}}],["miscellaneous",{"_index":882,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["modify",{"_index":368,"title":{},"body":{"injectables/QuestionService.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QuestionModule.html":{},"modules/QuizzModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QuestionModule.html":{},"modules/QuizzModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QuestionModule.html":{},"modules/QuizzModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{}}}],["multiplechoices",{"_index":197,"title":{},"body":{"classes/NewQuestionDto.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{}}}],["multiplechoices.length",{"_index":358,"title":{},"body":{"injectables/QuestionService.html":{}}}],["name",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"injectables/QuizzService.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{}}}],["nestjs",{"_index":517,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizzService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{},"classes/JwtGaurd.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":205,"title":{},"body":{"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/UpdateQuestionDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":436,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{},"dependencies.html":{}}}],["new",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{},"coverage.html":{}}}],["newarr",{"_index":351,"title":{},"body":{"injectables/QuestionService.html":{}}}],["newarr.indexof(i",{"_index":352,"title":{},"body":{"injectables/QuestionService.html":{}}}],["newarr.push(i",{"_index":354,"title":{},"body":{"injectables/QuestionService.html":{}}}],["newqa",{"_index":262,"title":{},"body":{"controllers/QuestionController.html":{}}}],["newqa(@body",{"_index":294,"title":{},"body":{"controllers/QuestionController.html":{}}}],["newqa(qadata",{"_index":270,"title":{},"body":{"controllers/QuestionController.html":{}}}],["newquestion",{"_index":356,"title":{},"body":{"injectables/QuestionService.html":{},"controllers/QuizController.html":{},"injectables/QuizzService.html":{}}}],["newquestion(questiondata",{"_index":501,"title":{},"body":{"controllers/QuizController.html":{}}}],["newquestiondto",{"_index":194,"title":{"classes/NewQuestionDto.html":{}},"body":{"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/QuizController.html":{},"injectables/QuizzService.html":{},"coverage.html":{}}}],["newquiz",{"_index":489,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizzService.html":{}}}],["newquiz(@body",{"_index":523,"title":{},"body":{"controllers/QuizController.html":{}}}],["newquiz(data",{"_index":505,"title":{},"body":{"controllers/QuizController.html":{}}}],["newquiz.createdby",{"_index":699,"title":{},"body":{"injectables/QuizzService.html":{}}}],["newquiz.enddatetime",{"_index":697,"title":{},"body":{"injectables/QuizzService.html":{}}}],["newquiz.questions",{"_index":706,"title":{},"body":{"injectables/QuizzService.html":{}}}],["newquiz.quizztitle",{"_index":700,"title":{},"body":{"injectables/QuizzService.html":{}}}],["newquiz.save",{"_index":707,"title":{},"body":{"injectables/QuizzService.html":{}}}],["newquiz.startdatetime",{"_index":695,"title":{},"body":{"injectables/QuizzService.html":{}}}],["newquizattempt",{"_index":675,"title":{},"body":{"injectables/QuizzService.html":{}}}],["newquizattempt.questionattempts",{"_index":678,"title":{},"body":{"injectables/QuizzService.html":{}}}],["newquizattempt.quizz",{"_index":677,"title":{},"body":{"injectables/QuizzService.html":{}}}],["newquizattempt.quizzattemptid",{"_index":680,"title":{},"body":{"injectables/QuizzService.html":{}}}],["newquizattempt.save",{"_index":679,"title":{},"body":{"injectables/QuizzService.html":{}}}],["newquizattempt.user",{"_index":676,"title":{},"body":{"injectables/QuizzService.html":{}}}],["newquizdto",{"_index":218,"title":{"classes/NewQuizDto.html":{}},"body":{"classes/NewQuizDto.html":{},"controllers/QuizController.html":{},"injectables/QuizzService.html":{},"coverage.html":{}}}],["newuser",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.save",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.useremail",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.username",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.userphotourl",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["not_found",{"_index":449,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":558,"title":{},"body":{"classes/QuizzAttemptEntity.html":{},"classes/UserEntity.html":{}}}],["number",{"_index":561,"title":{},"body":{"classes/QuizzAttemptEntity.html":{},"injectables/QuizzService.html":{}}}],["oauth20",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["ondelete",{"_index":250,"title":{},"body":{"classes/QuestionAttemptEntity.html":{},"classes/QuestionEntity.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{}}}],["onetomany",{"_index":565,"title":{},"body":{"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"classes/UserEntity.html":{}}}],["onetomany(undefined",{"_index":555,"title":{},"body":{"classes/QuizzAttemptEntity.html":{},"classes/UserEntity.html":{}}}],["ongatewayconnection",{"_index":390,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["ongatewaydisconnect",{"_index":391,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["ongatewayinit",{"_index":389,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["optional",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{}}}],["optionchoosed",{"_index":237,"title":{},"body":{"classes/QuestionAttemptEntity.html":{}}}],["options",{"_index":500,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizzService.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QuestionModule.html":{},"modules/QuizzModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["overview",{"_index":885,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":831,"title":{"dependencies.html":{}},"body":{}}],["paginate",{"_index":518,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizzService.html":{},"dependencies.html":{}}}],["paginate(q",{"_index":730,"title":{},"body":{"injectables/QuizzService.html":{}}}],["param",{"_index":283,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["param('id",{"_index":297,"title":{},"body":{"controllers/QuestionController.html":{}}}],["param('qid",{"_index":527,"title":{},"body":{"controllers/QuizController.html":{}}}],["param('questionid",{"_index":530,"title":{},"body":{"controllers/QuizController.html":{}}}],["parameters",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"injectables/QuizzService.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{}}}],["parseint(env.db_cache_port",{"_index":916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(env.postgres_port",{"_index":906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passport",{"_index":183,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportauthmodules",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["passportmodule",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["passportstrategy",{"_index":184,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":186,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":282,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["patch(':id",{"_index":296,"title":{},"body":{"controllers/QuestionController.html":{}}}],["patch(':id')@useguards(jwtgaurd)@usepipes(validationpipe",{"_index":276,"title":{},"body":{"controllers/QuestionController.html":{}}}],["patch(':qid",{"_index":535,"title":{},"body":{"controllers/QuizController.html":{}}}],["patch(':qid')@useguards(jwtgaurd)@usepipes(validationpipe",{"_index":514,"title":{},"body":{"controllers/QuizController.html":{}}}],["payload",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QuizAttemptGateway.html":{}}}],["pg",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["photourl",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["polling",{"_index":459,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["port",{"_index":905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["post(':qid/question/new",{"_index":526,"title":{},"body":{"controllers/QuizController.html":{}}}],["post(':qid/question/new')@useguards(jwtgaurd)@usepipes(validationpipe",{"_index":503,"title":{},"body":{"controllers/QuizController.html":{}}}],["post('google",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('new",{"_index":291,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["post('new')@useguards(jwtgaurd)@usepipes(validationpipe",{"_index":271,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["postgres",{"_index":902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["primarygeneratedcolumn",{"_index":255,"title":{},"body":{"classes/QuestionAttemptEntity.html":{},"classes/QuestionEntity.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"classes/UserEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":243,"title":{},"body":{"classes/QuestionAttemptEntity.html":{},"classes/QuestionEntity.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"classes/UserEntity.html":{}}}],["private",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{}}}],["process.env",{"_index":919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.baseurl",{"_index":899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":341,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/QuizzService.html":{},"guards/WsGuard.html":{}}}],["properties",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QuestionModule.html":{},"modules/QuizzModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["providers:[userservice",{"_index":773,"title":{},"body":{"modules/UserModule.html":{}}}],["q",{"_index":725,"title":{},"body":{"injectables/QuizzService.html":{}}}],["q.orderby('q.updatedat",{"_index":728,"title":{},"body":{"injectables/QuizzService.html":{}}}],["q.questionid",{"_index":719,"title":{},"body":{"injectables/QuizzService.html":{}}}],["q.where('q.createdby",{"_index":727,"title":{},"body":{"injectables/QuizzService.html":{}}}],["qa",{"_index":764,"title":{},"body":{"classes/UserEntity.html":{}}}],["qa.createdby",{"_index":765,"title":{},"body":{"classes/UserEntity.html":{}}}],["qadata",{"_index":273,"title":{},"body":{"controllers/QuestionController.html":{}}}],["qaentity",{"_index":651,"title":{},"body":{"injectables/QuizzService.html":{},"classes/UserEntity.html":{}}}],["query",{"_index":516,"title":{},"body":{"controllers/QuizController.html":{}}}],["question",{"_index":260,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/QuizzService.html":{}}}],["question.controller",{"_index":324,"title":{},"body":{"modules/QuestionModule.html":{}}}],["question.correctanswer",{"_index":374,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/QuizzService.html":{}}}],["question.createdby.userid",{"_index":365,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.entity",{"_index":325,"title":{},"body":{"modules/QuestionModule.html":{},"injectables/QuestionService.html":{}}}],["question.multiplechoices",{"_index":372,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.questionid",{"_index":378,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/QuizzService.html":{}}}],["question.questiontitle",{"_index":376,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.save",{"_index":379,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.service",{"_index":289,"title":{},"body":{"controllers/QuestionController.html":{},"modules/QuestionModule.html":{}}}],["question/dto/new.question",{"_index":520,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizzService.html":{}}}],["question/question.controller",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["question/question.entity",{"_index":598,"title":{},"body":{"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{},"classes/UserEntity.html":{}}}],["question/question.module",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/QuizzModule.html":{}}}],["question/question.service",{"_index":652,"title":{},"body":{"injectables/QuizzService.html":{}}}],["question/quiz",{"_index":715,"title":{},"body":{"injectables/QuizzService.html":{}}}],["question_attempt.entity",{"_index":567,"title":{},"body":{"classes/QuizzAttemptEntity.html":{}}}],["questionattempt",{"_index":571,"title":{},"body":{"classes/QuizzAttemptEntity.html":{},"injectables/QuizzService.html":{}}}],["questionattempt.optionchoosed",{"_index":689,"title":{},"body":{"injectables/QuizzService.html":{}}}],["questionattempt.questionid",{"_index":687,"title":{},"body":{"injectables/QuizzService.html":{}}}],["questionattempt.quizattempt",{"_index":572,"title":{},"body":{"classes/QuizzAttemptEntity.html":{},"injectables/QuizzService.html":{}}}],["questionattempt.save",{"_index":691,"title":{},"body":{"injectables/QuizzService.html":{}}}],["questionattemptentity",{"_index":234,"title":{"classes/QuestionAttemptEntity.html":{}},"body":{"classes/QuestionAttemptEntity.html":{},"classes/QuizzAttemptEntity.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{},"coverage.html":{}}}],["questionattemptid",{"_index":238,"title":{},"body":{"classes/QuestionAttemptEntity.html":{}}}],["questionattemptrepo",{"_index":625,"title":{},"body":{"injectables/QuizzService.html":{}}}],["questionattempts",{"_index":549,"title":{},"body":{"classes/QuizzAttemptEntity.html":{}}}],["questioncontroller",{"_index":25,"title":{"controllers/QuestionController.html":{}},"body":{"modules/AppModule.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"coverage.html":{}}}],["questiondata",{"_index":355,"title":{},"body":{"injectables/QuestionService.html":{},"controllers/QuizController.html":{}}}],["questiondata.correctanswer",{"_index":373,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questiondata.multiplechoices",{"_index":371,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questiondata.questiontitle",{"_index":375,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionentity",{"_index":303,"title":{"classes/QuestionEntity.html":{}},"body":{"classes/QuestionEntity.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/QuizzEntity.html":{},"coverage.html":{}}}],["questionentityrepository",{"_index":338,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionid",{"_index":239,"title":{},"body":{"classes/QuestionAttemptEntity.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionService.html":{},"controllers/QuizController.html":{},"injectables/QuizzService.html":{}}}],["questionmodule",{"_index":13,"title":{"modules/QuestionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QuestionModule.html":{},"modules/QuizzModule.html":{},"index.html":{},"modules.html":{}}}],["questionnumber",{"_index":636,"title":{},"body":{"injectables/QuizzService.html":{}}}],["questions",{"_index":221,"title":{},"body":{"classes/NewQuizDto.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{}}}],["questions.push(await",{"_index":704,"title":{},"body":{"injectables/QuizzService.html":{}}}],["questionservice",{"_index":288,"title":{"injectables/QuestionService.html":{}},"body":{"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"injectables/QuizzService.html":{},"coverage.html":{},"index.html":{}}}],["questiontitle",{"_index":198,"title":{},"body":{"classes/NewQuestionDto.html":{},"classes/QuestionEntity.html":{},"classes/UpdateQuestionDto.html":{}}}],["quiz",{"_index":470,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"classes/QuizzAttemptEntity.html":{},"injectables/QuizzService.html":{},"classes/UserEntity.html":{}}}],["quiz.createdby",{"_index":762,"title":{},"body":{"classes/UserEntity.html":{}}}],["quiz.createdby.userid",{"_index":709,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quiz.enddatetime",{"_index":723,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quiz.enddatetime.gettime",{"_index":485,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["quiz.questions",{"_index":711,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quiz.questions.filter(q",{"_index":718,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quiz.questions.length",{"_index":479,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["quiz.questions.push(newquestion",{"_index":712,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quiz.questions.push(question",{"_index":717,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quiz.quizzattemptsbyusers",{"_index":568,"title":{},"body":{"classes/QuizzAttemptEntity.html":{}}}],["quiz.quizzid",{"_index":659,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quiz.quizztitle",{"_index":720,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quiz.save",{"_index":713,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quiz.startdatetime",{"_index":721,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quiz.startdatetime.gettime",{"_index":657,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quizattempt",{"_index":240,"title":{},"body":{"classes/QuestionAttemptEntity.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{},"classes/UserEntity.html":{}}}],["quizattempt.attemptfinished",{"_index":665,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quizattempt.questionattempts",{"_index":258,"title":{},"body":{"classes/QuestionAttemptEntity.html":{}}}],["quizattempt.questionattempts.push(questionattempt",{"_index":690,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quizattempt.quizz",{"_index":601,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["quizattempt.quizzattemptid",{"_index":674,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quizattempt.save",{"_index":692,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quizattempt.totalscore",{"_index":688,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quizattempt.user",{"_index":763,"title":{},"body":{"classes/UserEntity.html":{}}}],["quizattempt.user.userid",{"_index":666,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quizattemptentity",{"_index":586,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["quizattemptgateway",{"_index":37,"title":{"classes/QuizAttemptGateway.html":{}},"body":{"modules/AppModule.html":{},"classes/QuizAttemptGateway.html":{},"coverage.html":{}}}],["quizattemptrepo",{"_index":624,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quizcontroller",{"_index":26,"title":{"controllers/QuizController.html":{}},"body":{"modules/AppModule.html":{},"controllers/QuizController.html":{},"modules/QuizzModule.html":{},"coverage.html":{}}}],["quizdata",{"_index":694,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quizdata.questions",{"_index":703,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quizdata.questions.length",{"_index":702,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quizdata.quizztitle",{"_index":701,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quizid",{"_index":502,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizzService.html":{}}}],["quizrepo",{"_index":623,"title":{},"body":{"injectables/QuizzService.html":{}}}],["quizservice",{"_index":404,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{}}}],["quizz",{"_index":487,"title":{},"body":{"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{}}}],["quizz.controller",{"_index":608,"title":{},"body":{"modules/QuizzModule.html":{}}}],["quizz.entity",{"_index":566,"title":{},"body":{"classes/QuizzAttemptEntity.html":{}}}],["quizz.service",{"_index":451,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"modules/QuizzModule.html":{}}}],["quizz/entities/quizz.entity",{"_index":759,"title":{},"body":{"classes/UserEntity.html":{}}}],["quizz/entities/quizz_attempts.entity",{"_index":760,"title":{},"body":{"classes/UserEntity.html":{}}}],["quizz/quizz",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["quizz/quizz.controller",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["quizz/quizz.module",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["quizz_attempts.entity",{"_index":257,"title":{},"body":{"classes/QuestionAttemptEntity.html":{},"classes/QuizzEntity.html":{}}}],["quizzattemptentity",{"_index":247,"title":{"classes/QuizzAttemptEntity.html":{}},"body":{"classes/QuestionAttemptEntity.html":{},"classes/QuizzAttemptEntity.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["quizzattemptid",{"_index":550,"title":{},"body":{"classes/QuizzAttemptEntity.html":{},"injectables/QuizzService.html":{}}}],["quizzattemptsbyusers",{"_index":576,"title":{},"body":{"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{}}}],["quizzentity",{"_index":453,"title":{"classes/QuizzEntity.html":{}},"body":{"classes/QuizAttemptGateway.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["quizzid",{"_index":469,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{}}}],["quizzmodule",{"_index":14,"title":{"modules/QuizzModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QuizzModule.html":{},"index.html":{},"modules.html":{}}}],["quizzservice",{"_index":402,"title":{"injectables/QuizzService.html":{}},"body":{"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{},"coverage.html":{},"index.html":{}}}],["quizztitle",{"_index":222,"title":{},"body":{"classes/NewQuizDto.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{}}}],["received_question",{"_index":447,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["received_quiz_details",{"_index":445,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["redis",{"_index":843,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["reflect",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["relations",{"_index":361,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/QuizzService.html":{},"injectables/UserService.html":{}}}],["removeallquestions",{"_index":490,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizzService.html":{}}}],["removeallquestions(quizid",{"_index":507,"title":{},"body":{"controllers/QuizController.html":{}}}],["removequestion",{"_index":491,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizzService.html":{}}}],["removequestion(questionid",{"_index":510,"title":{},"body":{"controllers/QuizController.html":{}}}],["repository",{"_index":336,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/QuizzService.html":{},"injectables/UserService.html":{}}}],["req",{"_index":265,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["req,@res",{"_index":543,"title":{},"body":{"controllers/QuizController.html":{}}}],["req.user",{"_index":545,"title":{},"body":{"controllers/QuizController.html":{}}}],["res",{"_index":266,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["res.sendstatus(httpstatus.created",{"_index":525,"title":{},"body":{"controllers/QuizController.html":{}}}],["res.sendstatus(httpstatus.ok",{"_index":532,"title":{},"body":{"controllers/QuizController.html":{}}}],["res.status(httpstatus.ok).send",{"_index":302,"title":{},"body":{"controllers/QuestionController.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QuestionModule.html":{},"modules/QuizzModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["result",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtGaurd.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"controllers/QuestionController.html":{},"classes/QuestionEntity.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtGaurd.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"controllers/QuestionController.html":{},"classes/QuestionEntity.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"injectables/QuizzService.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{}}}],["returned",{"_index":670,"title":{},"body":{"injectables/QuizzService.html":{}}}],["returns",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"injectables/QuizzService.html":{},"guards/WsGuard.html":{}}}],["rimraf",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["rxjs",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["secret",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":191,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["selectedoption",{"_index":671,"title":{},"body":{"injectables/QuizzService.html":{}}}],["server",{"_index":392,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["server.emit(error",{"_index":468,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["server.emit(not_found",{"_index":472,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["server.emit(received_quiz_details",{"_index":473,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["session",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["signoptions",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["socket",{"_index":425,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["socket.io",{"_index":437,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"dependencies.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtGaurd.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"controllers/QuestionController.html":{},"classes/QuestionEntity.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"modules/QuizzModule.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{}}}],["src/.../auth.module.ts",{"_index":896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":884,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:9",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.service.ts",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:16",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:28",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:35",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:46",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt.gaurd.ts",{"_index":168,"title":{},"body":{"classes/JwtGaurd.html":{},"coverage.html":{}}}],["src/auth/jwt.payload.ts",{"_index":174,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":176,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:10",{"_index":178,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:19",{"_index":180,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/ws.gaurd.ts",{"_index":785,"title":{},"body":{"guards/WsGuard.html":{},"coverage.html":{}}}],["src/auth/ws.gaurd.ts:13",{"_index":789,"title":{},"body":{"guards/WsGuard.html":{}}}],["src/auth/ws.gaurd.ts:7",{"_index":787,"title":{},"body":{"guards/WsGuard.html":{}}}],["src/main.ts",{"_index":820,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/question/dto/new.question",{"_index":232,"title":{},"body":{"classes/NewQuizDto.html":{}}}],["src/question/dto/new.question.ts",{"_index":195,"title":{},"body":{"classes/NewQuestionDto.html":{},"coverage.html":{}}}],["src/question/dto/new.question.ts:20",{"_index":200,"title":{},"body":{"classes/NewQuestionDto.html":{}}}],["src/question/dto/new.question.ts:27",{"_index":203,"title":{},"body":{"classes/NewQuestionDto.html":{}}}],["src/question/dto/new.question.ts:33",{"_index":202,"title":{},"body":{"classes/NewQuestionDto.html":{}}}],["src/question/dto/update.question.ts",{"_index":736,"title":{},"body":{"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["src/question/dto/update.question.ts:17",{"_index":738,"title":{},"body":{"classes/UpdateQuestionDto.html":{}}}],["src/question/dto/update.question.ts:24",{"_index":741,"title":{},"body":{"classes/UpdateQuestionDto.html":{}}}],["src/question/dto/update.question.ts:30",{"_index":740,"title":{},"body":{"classes/UpdateQuestionDto.html":{}}}],["src/question/question.controller.ts",{"_index":259,"title":{},"body":{"controllers/QuestionController.html":{},"coverage.html":{}}}],["src/question/question.controller.ts:27",{"_index":272,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.controller.ts:34",{"_index":277,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.controller.ts:45",{"_index":268,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.entity.ts",{"_index":304,"title":{},"body":{"classes/QuestionEntity.html":{},"coverage.html":{}}}],["src/question/question.entity.ts:14",{"_index":314,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/question/question.entity.ts:17",{"_index":315,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/question/question.entity.ts:21",{"_index":307,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/question/question.entity.ts:24",{"_index":313,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/question/question.entity.ts:32",{"_index":309,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["src/question/question.module.ts",{"_index":323,"title":{},"body":{"modules/QuestionModule.html":{}}}],["src/question/question.service.ts",{"_index":328,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["src/question/question.service.ts:15",{"_index":337,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:21",{"_index":345,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:23",{"_index":346,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:33",{"_index":342,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:53",{"_index":347,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:88",{"_index":343,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:98",{"_index":340,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/quizz/dto/new.quiz.ts",{"_index":219,"title":{},"body":{"classes/NewQuizDto.html":{},"coverage.html":{}}}],["src/quizz/dto/new.quiz.ts:16",{"_index":229,"title":{},"body":{"classes/NewQuizDto.html":{}}}],["src/quizz/dto/new.quiz.ts:21",{"_index":230,"title":{},"body":{"classes/NewQuizDto.html":{}}}],["src/quizz/dto/new.quiz.ts:26",{"_index":225,"title":{},"body":{"classes/NewQuizDto.html":{}}}],["src/quizz/dto/new.quiz.ts:31",{"_index":227,"title":{},"body":{"classes/NewQuizDto.html":{}}}],["src/quizz/entities/question_attempt.entity.ts",{"_index":235,"title":{},"body":{"classes/QuestionAttemptEntity.html":{},"coverage.html":{}}}],["src/quizz/entities/question_attempt.entity.ts:13",{"_index":244,"title":{},"body":{"classes/QuestionAttemptEntity.html":{}}}],["src/quizz/entities/question_attempt.entity.ts:16",{"_index":246,"title":{},"body":{"classes/QuestionAttemptEntity.html":{}}}],["src/quizz/entities/question_attempt.entity.ts:23",{"_index":252,"title":{},"body":{"classes/QuestionAttemptEntity.html":{}}}],["src/quizz/entities/question_attempt.entity.ts:26",{"_index":242,"title":{},"body":{"classes/QuestionAttemptEntity.html":{}}}],["src/quizz/entities/quizz.entity.ts",{"_index":574,"title":{},"body":{"classes/QuizzEntity.html":{},"coverage.html":{}}}],["src/quizz/entities/quizz.entity.ts:21",{"_index":589,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["src/quizz/entities/quizz.entity.ts:24",{"_index":590,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["src/quizz/entities/quizz.entity.ts:27",{"_index":591,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["src/quizz/entities/quizz.entity.ts:30",{"_index":582,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["src/quizz/entities/quizz.entity.ts:35",{"_index":585,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["src/quizz/entities/quizz.entity.ts:42",{"_index":581,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["src/quizz/entities/quizz.entity.ts:49",{"_index":588,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["src/quizz/entities/quizz.entity.ts:53",{"_index":580,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["src/quizz/entities/quizz.entity.ts:57",{"_index":593,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["src/quizz/entities/quizz_attempts.entity.ts",{"_index":547,"title":{},"body":{"classes/QuizzAttemptEntity.html":{},"coverage.html":{}}}],["src/quizz/entities/quizz_attempts.entity.ts:16",{"_index":560,"title":{},"body":{"classes/QuizzAttemptEntity.html":{}}}],["src/quizz/entities/quizz_attempts.entity.ts:23",{"_index":559,"title":{},"body":{"classes/QuizzAttemptEntity.html":{}}}],["src/quizz/entities/quizz_attempts.entity.ts:29",{"_index":564,"title":{},"body":{"classes/QuizzAttemptEntity.html":{}}}],["src/quizz/entities/quizz_attempts.entity.ts:36",{"_index":557,"title":{},"body":{"classes/QuizzAttemptEntity.html":{}}}],["src/quizz/entities/quizz_attempts.entity.ts:39",{"_index":563,"title":{},"body":{"classes/QuizzAttemptEntity.html":{}}}],["src/quizz/entities/quizz_attempts.entity.ts:42",{"_index":554,"title":{},"body":{"classes/QuizzAttemptEntity.html":{}}}],["src/quizz/quizz",{"_index":386,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"coverage.html":{}}}],["src/quizz/quizz.controller.ts",{"_index":486,"title":{},"body":{"controllers/QuizController.html":{},"coverage.html":{}}}],["src/quizz/quizz.controller.ts:31",{"_index":506,"title":{},"body":{"controllers/QuizController.html":{}}}],["src/quizz/quizz.controller.ts:40",{"_index":504,"title":{},"body":{"controllers/QuizController.html":{}}}],["src/quizz/quizz.controller.ts:53",{"_index":512,"title":{},"body":{"controllers/QuizController.html":{}}}],["src/quizz/quizz.controller.ts:66",{"_index":509,"title":{},"body":{"controllers/QuizController.html":{}}}],["src/quizz/quizz.controller.ts:78",{"_index":515,"title":{},"body":{"controllers/QuizController.html":{}}}],["src/quizz/quizz.controller.ts:91",{"_index":499,"title":{},"body":{"controllers/QuizController.html":{}}}],["src/quizz/quizz.controller.ts:98",{"_index":495,"title":{},"body":{"controllers/QuizController.html":{}}}],["src/quizz/quizz.module.ts",{"_index":606,"title":{},"body":{"modules/QuizzModule.html":{}}}],["src/quizz/quizz.service.ts",{"_index":611,"title":{},"body":{"injectables/QuizzService.html":{},"coverage.html":{}}}],["src/quizz/quizz.service.ts:120",{"_index":629,"title":{},"body":{"injectables/QuizzService.html":{}}}],["src/quizz/quizz.service.ts:179",{"_index":645,"title":{},"body":{"injectables/QuizzService.html":{}}}],["src/quizz/quizz.service.ts:183",{"_index":642,"title":{},"body":{"injectables/QuizzService.html":{}}}],["src/quizz/quizz.service.ts:201",{"_index":640,"title":{},"body":{"injectables/QuizzService.html":{}}}],["src/quizz/quizz.service.ts:22",{"_index":626,"title":{},"body":{"injectables/QuizzService.html":{}}}],["src/quizz/quizz.service.ts:230",{"_index":641,"title":{},"body":{"injectables/QuizzService.html":{}}}],["src/quizz/quizz.service.ts:256",{"_index":649,"title":{},"body":{"injectables/QuizzService.html":{}}}],["src/quizz/quizz.service.ts:282",{"_index":648,"title":{},"body":{"injectables/QuizzService.html":{}}}],["src/quizz/quizz.service.ts:300",{"_index":650,"title":{},"body":{"injectables/QuizzService.html":{}}}],["src/quizz/quizz.service.ts:33",{"_index":647,"title":{},"body":{"injectables/QuizzService.html":{}}}],["src/quizz/quizz.service.ts:335",{"_index":639,"title":{},"body":{"injectables/QuizzService.html":{}}}],["src/quizz/quizz.service.ts:343",{"_index":643,"title":{},"body":{"injectables/QuizzService.html":{}}}],["src/quizz/quizz.service.ts:35",{"_index":634,"title":{},"body":{"injectables/QuizzService.html":{}}}],["src/quizz/quizz.service.ts:358",{"_index":644,"title":{},"body":{"injectables/QuizzService.html":{}}}],["src/quizz/quizz.service.ts:57",{"_index":637,"title":{},"body":{"injectables/QuizzService.html":{}}}],["src/quizz/quizz.service.ts:92",{"_index":631,"title":{},"body":{"injectables/QuizzService.html":{}}}],["src/user/user.entity",{"_index":519,"title":{},"body":{"controllers/QuizController.html":{}}}],["src/user/user.entity.ts",{"_index":743,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:17",{"_index":754,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.entity.ts:20",{"_index":755,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.entity.ts:25",{"_index":753,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.entity.ts:28",{"_index":757,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.entity.ts:34",{"_index":751,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.entity.ts:42",{"_index":758,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.entity.ts:48",{"_index":750,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/user/user.module.ts",{"_index":769,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":775,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:14",{"_index":780,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:7",{"_index":778,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":446,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["startdatetime",{"_index":223,"title":{},"body":{"classes/NewQuizDto.html":{},"controllers/QuizController.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{}}}],["startquiz",{"_index":400,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["startquiz(server",{"_index":431,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["statements",{"_index":806,"title":{},"body":{"coverage.html":{}}}],["strategy",{"_index":182,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"controllers/QuestionController.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["subscribemessage",{"_index":434,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["subscribemessage(attempt_question",{"_index":413,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["subscribemessage(fetch_question",{"_index":416,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["subscribemessage(fetch_quiz_details",{"_index":419,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["subscribemessage(finish",{"_index":422,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["subscribemessage(start",{"_index":432,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["super",{"_index":188,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":890,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":891,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t",{"_index":660,"title":{},"body":{"injectables/QuizzService.html":{}}}],["table",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["this.authservice.authenticateuser(id_token",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifyjwt(bearertoken",{"_index":795,"title":{},"body":{"guards/WsGuard.html":{}}}],["this.canattemptquiz(quiz",{"_index":673,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.canattemptquiz(quizattempt.quizz",{"_index":664,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.createuserentity",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.fetchdata(id_token",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getuserandaccesstoken(newuser",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getuserandaccesstoken(user",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug",{"_index":669,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.logger.debug(question,\"question",{"_index":686,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.logger.debug(quizattempt",{"_index":663,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.logger.debug(result",{"_index":661,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.logger.error('cannot",{"_index":683,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.logger.log",{"_index":366,"title":{},"body":{"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{}}}],["this.logger.log('init",{"_index":460,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["this.logger.log(`no",{"_index":362,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.logger.log(`updated",{"_index":377,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.questionattemptrepo.findone",{"_index":685,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.questionentityrepository.delete",{"_index":382,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.questionentityrepository.findone",{"_index":359,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.questionentityrepository.findone(questionid",{"_index":384,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.questionservice.createnewquestion(req.user",{"_index":295,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.createnewquestion(user",{"_index":705,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.questionservice.deletequestion(req.user",{"_index":301,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.findbyid(questionid",{"_index":682,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.questionservice.updatequestion(req.user",{"_index":298,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.quizattemptrepo.findone(attemptid",{"_index":662,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.quizrepo.createquerybuilder('q",{"_index":726,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.quizrepo.delete(quizzid",{"_index":733,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.quizrepo.findone",{"_index":708,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.quizrepo.findone(quizid",{"_index":672,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.quizrepo.findone(quizzid",{"_index":731,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.quizrepo.findoneorfail(id",{"_index":693,"title":{},"body":{"injectables/QuizzService.html":{}}}],["this.quizservice.addnewquestion(req.user",{"_index":528,"title":{},"body":{"controllers/QuizController.html":{}}}],["this.quizservice.canattemptquiz(quiz",{"_index":476,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["this.quizservice.createnewquiz(req.user",{"_index":524,"title":{},"body":{"controllers/QuizController.html":{}}}],["this.quizservice.deletequiz(id",{"_index":544,"title":{},"body":{"controllers/QuizController.html":{}}}],["this.quizservice.finishquizattempt(attemptid",{"_index":466,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["this.quizservice.getquiz(quizzid",{"_index":471,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["this.quizservice.getquizzes(req.user",{"_index":540,"title":{},"body":{"controllers/QuizController.html":{}}}],["this.quizservice.removeallquestions(req.user",{"_index":534,"title":{},"body":{"controllers/QuizController.html":{}}}],["this.quizservice.removequestion(req.user",{"_index":531,"title":{},"body":{"controllers/QuizController.html":{}}}],["this.quizservice.updatequiz(req.user,quizid,startdatetime,enddatetime",{"_index":538,"title":{},"body":{"controllers/QuizController.html":{}}}],["this.uniqueelements(questiondata.multiplechoices",{"_index":357,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.userentityrepository.findone",{"_index":782,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findbyemail(data.email",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyemail(decoded.email",{"_index":796,"title":{},"body":{"guards/WsGuard.html":{}}}],["this.userservice.findbyemail(payload.email",{"_index":192,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["throw",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{},"injectables/QuizzService.html":{}}}],["token",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["totalnumberofquestions",{"_index":478,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["totalscore",{"_index":551,"title":{},"body":{"classes/QuizzAttemptEntity.html":{}}}],["transform",{"_index":317,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["transformer",{"_index":318,"title":{},"body":{"classes/QuestionEntity.html":{},"classes/QuizAttemptGateway.html":{},"classes/QuizzEntity.html":{},"classes/UserEntity.html":{},"dependencies.html":{}}}],["transports",{"_index":457,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["tried",{"_index":367,"title":{},"body":{"injectables/QuestionService.html":{}}}],["true",{"_index":312,"title":{},"body":{"classes/QuestionEntity.html":{},"injectables/QuestionService.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{},"classes/UserEntity.html":{},"guards/WsGuard.html":{},"miscellaneous/variables.html":{}}}],["true,nullable:false",{"_index":569,"title":{},"body":{"classes/QuizzAttemptEntity.html":{}}}],["true})@jointable",{"_index":584,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["try",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{},"guards/WsGuard.html":{}}}],["type",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/QuestionAttemptEntity.html":{},"controllers/QuestionController.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{},"classes/UpdateQuestionDto.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":256,"title":{},"body":{"classes/QuestionAttemptEntity.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionService.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormconfig",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/QuestionModule.html":{},"modules/QuizzModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature",{"_index":610,"title":{},"body":{"modules/QuizzModule.html":{}}}],["typeormmodule.forroot(typeormconfig",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types/axios",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["types/connect",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["types/express",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["types/faker",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["types/redis",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["ui",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":791,"title":{},"body":{"guards/WsGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":185,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{},"injectables/QuizzService.html":{}}}],["undefined",{"_index":249,"title":{},"body":{"classes/QuestionAttemptEntity.html":{},"classes/QuestionEntity.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{},"classes/UserEntity.html":{}}}],["unique",{"_index":761,"title":{},"body":{"classes/UserEntity.html":{}}}],["uniqueelements",{"_index":332,"title":{},"body":{"injectables/QuestionService.html":{}}}],["updatedat",{"_index":577,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["updatedatecolumn",{"_index":597,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["updateqa",{"_index":263,"title":{},"body":{"controllers/QuestionController.html":{}}}],["updateqa(qadata",{"_index":274,"title":{},"body":{"controllers/QuestionController.html":{}}}],["updatequestion",{"_index":333,"title":{},"body":{"injectables/QuestionService.html":{}}}],["updatequestiondto",{"_index":275,"title":{"classes/UpdateQuestionDto.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["updatequiz",{"_index":617,"title":{},"body":{"injectables/QuizzService.html":{}}}],["updatequiztime",{"_index":492,"title":{},"body":{"controllers/QuizController.html":{}}}],["updatequiztime(startdatetime",{"_index":513,"title":{},"body":{"controllers/QuizController.html":{}}}],["useguards",{"_index":278,"title":{},"body":{"controllers/QuestionController.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{}}}],["useguards(jwtgaurd",{"_index":292,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["useguards(wsguard",{"_index":455,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["usepipes",{"_index":279,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["usepipes(validationpipe",{"_index":293,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["user",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{}}}],["user.entity",{"_index":770,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":771,"title":{},"body":{"modules/UserModule.html":{}}}],["user.usercreatedquestions",{"_index":319,"title":{},"body":{"classes/QuestionEntity.html":{}}}],["user.usercreatedquizzes",{"_index":600,"title":{},"body":{"classes/QuizzEntity.html":{}}}],["user.useremail",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.userid",{"_index":364,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/QuizzService.html":{}}}],["user.userquizattempts",{"_index":570,"title":{},"body":{"classes/QuizzAttemptEntity.html":{}}}],["user.userquizattempts.reduce((t",{"_index":481,"title":{},"body":{"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{}}}],["user/user.entity",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{}}}],["user/user.module",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QuizzModule.html":{}}}],["user/user.service",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/WsGuard.html":{}}}],["usercreatedquestions",{"_index":744,"title":{},"body":{"classes/UserEntity.html":{}}}],["usercreatedquizzes",{"_index":745,"title":{},"body":{"classes/UserEntity.html":{}}}],["useremail",{"_index":746,"title":{},"body":{"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["userentity",{"_index":128,"title":{"classes/UserEntity.html":{}},"body":{"injectables/AuthService.html":{},"classes/QuestionEntity.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"controllers/QuizController.html":{},"classes/QuizzAttemptEntity.html":{},"classes/QuizzEntity.html":{},"injectables/QuizzService.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userentity).userid",{"_index":546,"title":{},"body":{"controllers/QuizController.html":{}}}],["userentityrepository",{"_index":779,"title":{},"body":{"injectables/UserService.html":{}}}],["userid",{"_index":383,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/QuizzService.html":{},"classes/UserEntity.html":{}}}],["usermodule",{"_index":15,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QuizzModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{}}}],["username",{"_index":747,"title":{},"body":{"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["userphotourl",{"_index":748,"title":{},"body":{"classes/UserEntity.html":{}}}],["userquizattempts",{"_index":749,"title":{},"body":{"classes/UserEntity.html":{}}}],["userservice",{"_index":116,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WsGuard.html":{},"coverage.html":{},"index.html":{}}}],["userservice:userservice",{"_index":187,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate",{"_index":177,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":179,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationpipe",{"_index":280,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuizController.html":{}}}],["validator",{"_index":214,"title":{},"body":{"classes/NewQuestionDto.html":{},"classes/NewQuizDto.html":{},"classes/UpdateQuestionDto.html":{},"dependencies.html":{}}}],["value",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QuestionService.html":{},"classes/QuizAttemptGateway.html":{},"injectables/QuizzService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":808,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":893,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifyjwt",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{}}}],["void",{"_index":410,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["websocket",{"_index":458,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["websocketgateway",{"_index":435,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["websocketgateway(undefined",{"_index":456,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["websocketserver",{"_index":407,"title":{},"body":{"classes/QuizAttemptGateway.html":{}}}],["wsexception",{"_index":653,"title":{},"body":{"injectables/QuizzService.html":{}}}],["wsexception('forbidden",{"_index":734,"title":{},"body":{"injectables/QuizzService.html":{}}}],["wsexception('no",{"_index":735,"title":{},"body":{"injectables/QuizzService.html":{}}}],["wsguard",{"_index":438,"title":{"guards/WsGuard.html":{}},"body":{"classes/QuizAttemptGateway.html":{},"guards/WsGuard.html":{},"coverage.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QuestionModule.html":{},"modules/QuizzModule.html":{},"modules/UserModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nQuestionModule\n\nQuestionModule\n\nAppModule -->\n\nQuestionModule->AppModule\n\n\n\n\n\nQuizzModule\n\nQuizzModule\n\nAppModule -->\n\nQuizzModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            QuestionController\n                        \n                        \n                            QuizController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            QuestionModule\n                        \n                        \n                            QuizzModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth/auth.controller';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserModule } from './user/user.module';\nimport { QuestionModule } from './question/question.module';\nimport { QuizzModule } from './quizz/quizz.module';\nimport { QuizAttemptGateway } from './quizz/quizz-attempt.gateway';\nimport TypeOrmConfig from '../config/typeorm.config';\nimport { QuestionController } from './question/question.controller';\nimport { QuizController } from './quizz/quizz.controller';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(TypeOrmConfig),\n    AuthModule,\n    UserModule,\n    QuestionModule,\n    QuizzModule,\n  ],\n  controllers: [AuthController,QuestionController,QuizController],\n  providers: [QuizAttemptGateway],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                auth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            auth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    auth(id_token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('google')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id_token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('google')\n  async auth(\n    @Body('id_token') id_token: string) {\n  return await this.authService.authenticateUser(id_token);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserModule } from '../user/user.module';\nimport { JWT_SECRET } from '../../config/env';\nimport { JwtStrategy } from './Jwt.strategy';\nimport { AuthService } from './auth.service';\n\nexport const passportAuthModules = [\n  PassportModule.register({\n    defaultStrategy: 'jwt',\n    session: false,\n  }),\n  JwtModule.register({\n    secret: JWT_SECRET,\n    signOptions: {\n      expiresIn: '7d',\n    },\n  }),\n];\n\n@Module({\n  imports: [...passportAuthModules, UserModule],\n  providers: [JwtStrategy, AuthService],\n  exports: [JwtStrategy, AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authenticateUser\n                            \n                            \n                                createUserEntity\n                            \n                            \n                                fetchData\n                            \n                            \n                                getUserAndAccessToken\n                            \n                            \n                                verifyJwt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            authenticateUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.service.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createUserEntity\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchData\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.service.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getUserAndAccessToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.service.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            verifyJwt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.service.ts:28\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport axios from 'axios';\nimport UserEntity from '../user/user.entity';\nimport { UserService } from '../user/user.service';\nimport { JwtPayload } from './jwt.payload';\nimport { JWT_SECRET } from '../../config/env';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private userService: UserService,\n    private jwtService: JwtService,\n  ) {}\n\n  createUserEntity = async (\n    email: string,\n    name: string,\n    photoURL: string,\n  ) => {\n    const newUser = new UserEntity();\n    newUser.userEmail = email;\n    newUser.userName = name;\n    newUser.userPhotoURL = photoURL || '';\n    await newUser.save();\n    return newUser;\n  };\n  verifyJwt = (token: string) => {\n    return this.jwtService.verify(token, {\n      ignoreExpiration: false,\n      secret: JWT_SECRET,\n    });\n  };\n\n  getUserAndAccessToken = (user: UserEntity) => {\n    const payload: JwtPayload = { email: user.userEmail };\n    return { user, accessToken: this.jwtService.sign(payload) };\n  };\n\n   fetchData = async (id_token:string) => {\n    return  (await axios.get(\n        `https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${id_token.trim()}`,\n      )).data;\n  }\n\n  authenticateUser = async (id_token: string) => {\n    try {\n      const  data  = await this.fetchData(id_token);\n\n      if (!data || !data.email || !data.name) {\n        throw new BadRequestException();\n      }\n\n      const user = await this.userService.findByEmail(data.email);\n\n      if (user) {\n        return this.getUserAndAccessToken(user);\n      } else {\n        const newUser = await this.createUserEntity(\n          data.email,\n          data.name,\n          data.picture,\n        );\n\n        return this.getUserAndAccessToken(newUser);\n      }\n    } catch (e) {\n      throw new BadRequestException();\n    }\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtGaurd.html":{"url":"classes/JwtGaurd.html","title":"class - JwtGaurd","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtGaurd\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.gaurd.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\n\nexport class JwtGaurd extends AuthGuard('jwt') {}\n\nexport default JwtGaurd;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.payload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n    email:string\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/Jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/Jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/Jwt.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport {JWT_SECRET} from '../../config/env';\nimport { JwtPayload } from './jwt.payload';\nimport { UserService } from '../user/user.service';\n\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private userService:UserService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: JWT_SECRET,\n    });\n  }\n\n  async validate(payload: JwtPayload) {\n    const user = await this.userService.findByEmail(payload.email);\n    if(!user){\n        throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NewQuestionDto.html":{"url":"classes/NewQuestionDto.html","title":"class - NewQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/dto/new.question.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                correctAnswer\n                            \n                            \n                                multipleChoices\n                            \n                            \n                                questionTitle\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            correctAnswer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@IsString()@MinLength(5)@MaxLength(100)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/dto/new.question.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            multipleChoices\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@IsArray()@ArrayMinSize(2)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/dto/new.question.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionTitle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@IsString()@MinLength(5)@MaxLength(100)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/dto/new.question.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  Min,\n  MinLength,\n  IsNumber,\n  ArrayMinSize,\n  MaxLength,\n  IsString,\n  IsArray,\n} from 'class-validator';\n\nexport class NewQuestionDto {\n  \n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(5)\n  @MaxLength(100)\n  correctAnswer: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(5)\n  @MaxLength(100)\n  questionTitle: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsArray()\n  @ArrayMinSize(2)\n  multipleChoices: string[];\n}\n\nexport default NewQuestionDto;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NewQuizDto.html":{"url":"classes/NewQuizDto.html","title":"class - NewQuizDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewQuizDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/quizz/dto/new.quiz.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                endDatetime\n                            \n                            \n                                questions\n                            \n                            \n                                quizzTitle\n                            \n                            \n                                startDatetime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endDatetime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@IsDateString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/dto/new.quiz.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NewQuestionDto[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@ArrayMinSize(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/dto/new.quiz.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            quizzTitle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/dto/new.quiz.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startDatetime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@IsDateString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/dto/new.quiz.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsDateString,\n  MinLength,\n  ArrayMinSize,\n  IsString,\n} from 'class-validator';\n\nimport NewQuestionDto from 'src/question/dto/new.question';\n\nexport class NewQuizDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  quizzTitle: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsDateString()\n  startDatetime: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsDateString()\n  endDatetime: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @ArrayMinSize(1)\n  questions: NewQuestionDto[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionAttemptEntity.html":{"url":"classes/QuestionAttemptEntity.html","title":"class - QuestionAttemptEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionAttemptEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/quizz/entities/question_attempt.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                optionChoosed\n                            \n                            \n                                questionAttemptId\n                            \n                            \n                                questionId\n                            \n                            \n                                quizAttempt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            optionChoosed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/question_attempt.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionAttemptId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/question_attempt.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/question_attempt.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            quizAttempt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuizzAttemptEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/question_attempt.entity.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport  QuizzAttemptEntity  from './quizz_attempts.entity';\n\n@Entity()\nexport class QuestionAttemptEntity extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  questionAttemptId: string;\n  \n  @Column('uuid')\n  questionId: string;\n\n  @ManyToOne(\n    type => QuizzAttemptEntity,\n    quizAttempt => quizAttempt.questionAttempts,\n    { onDelete: 'CASCADE' },\n  )\n  quizAttempt: QuizzAttemptEntity;\n\n  @Column()\n  optionChoosed: string;\n}\n\n\nexport default QuestionAttemptEntity;\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionController.html":{"url":"controllers/QuestionController.html","title":"controller - QuestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/question.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteQa\n                            \n                            \n                                    Async\n                                newQa\n                            \n                            \n                                    Async\n                                updateQa\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteQa\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteQa(id: string, req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtGaurd)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/question/question.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            newQa\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newQa(qaData: NewQuestionDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('new')@UseGuards(JwtGaurd)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/question/question.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    qaData\n                                    \n                                                NewQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateQa\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateQa(qaData: UpdateQuestionDto, id: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(JwtGaurd)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/question/question.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    qaData\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  Req,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n  Res,\n  HttpStatus,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport JwtGaurd from '../auth/jwt.gaurd';\nimport NewQuestionDto from './dto/new.question';\nimport UpdateQuestionDto from './dto/update.question';\nimport { QuestionService } from './question.service';\n\n@Controller('question')\nexport class QuestionController {\n  constructor(private questionService: QuestionService) {}\n\n  @Post('new')\n  @UseGuards(JwtGaurd)\n  @UsePipes(ValidationPipe)\n  async newQa(@Body() qaData: NewQuestionDto, @Req() req) {\n    return await this.questionService.createNewQuestion(req.user, qaData);\n  }\n\n  @Patch(':id')\n  @UseGuards(JwtGaurd)\n  @UsePipes(ValidationPipe)\n  async updateQa(\n    @Body() qaData: UpdateQuestionDto,\n    @Param('id') id: string,\n    @Req() req,\n  ) {\n    return await this.questionService.updateQuestion(req.user, qaData, id);\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtGaurd)\n  @UsePipes(ValidationPipe)\n  async deleteQa(@Param('id') id: string, @Req() req, @Res() res) {\n    await this.questionService.deleteQuestion(req.user, id);\n    return res.status(HttpStatus.OK).send();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionEntity.html":{"url":"classes/QuestionEntity.html","title":"class - QuestionEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/question.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                correctAnswer\n                            \n                            \n                                createdBy\n                            \n                            \n                                multipleChoices\n                            \n                            \n                                questionId\n                            \n                            \n                                questionTitle\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            correctAnswer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdBy\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            multipleChoices\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text', {array: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionTitle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.entity.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude, Transform } from 'class-transformer';\nimport UserEntity from '../user/user.entity';\nimport {\n  BaseEntity,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nclass QuestionEntity extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  questionId: string;\n\n  @Column()\n  questionTitle: string;\n\n  @Column()\n  @Exclude()\n  correctAnswer: string;\n\n  @Column('text', { array: true })\n  multipleChoices: string[];\n\n  @Exclude()\n  @ManyToOne(\n    type => UserEntity,\n    user => user.userCreatedQuestions,\n    { onDelete: 'CASCADE' },\n  )\n  createdBy: UserEntity;\n}\n\nexport default QuestionEntity;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuestionModule.html":{"url":"modules/QuestionModule.html","title":"module - QuestionModule","body":"\n                   \n\n\n\n\n    Modules\n    QuestionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuestionModule\n\n\n\ncluster_QuestionModule_exports\n\n\n\ncluster_QuestionModule_providers\n\n\n\n\nQuestionService \n\nQuestionService \n\n\n\nQuestionModule\n\nQuestionModule\n\nQuestionService  -->\n\nQuestionModule->QuestionService \n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionModule -->\n\nQuestionService->QuestionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/question/question.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QuestionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuestionController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QuestionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QuestionService } from './question.service';\nimport { QuestionController } from './question.controller';\nimport QuestionEntity from './question.entity';\n\n@Module({\n    imports:[TypeOrmModule.forFeature([QuestionEntity])],\n    providers:[ QuestionService],\n    exports:[QuestionService],\n    controllers: [QuestionController]\n})\nexport class QuestionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/question.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createNewQuestion\n                            \n                            \n                                deleteQuestion\n                            \n                            \n                                    Private\n                                logger\n                            \n                            \n                                    Private\n                                uniqueElements\n                            \n                            \n                                updateQuestion\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findbyID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(questionEntityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/question/question.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        questionEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findbyID\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findbyID(questionID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/question/question.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createNewQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.service.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.service.ts:88\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n                    \n                        \n                            Default value : new Logger('QuestionService')\n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.service.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            uniqueElements\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.service.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/question/question.service.ts:53\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport UserEntity from '../user/user.entity';\nimport { Repository } from 'typeorm';\nimport NewQuestionDto from './dto/new.question';\nimport UpdateQuestionDto from './dto/update.question';\nimport QuestionEntity from './question.entity';\n\n@Injectable()\nexport class QuestionService {\n  constructor(\n    @InjectRepository(QuestionEntity)\n    private questionEntityRepository: Repository,\n  ) {}\n\n  private logger: Logger = new Logger('QuestionService');\n\n  private uniqueElements = (arr: string[]) => {\n    const newArr: string[] = [];\n    for (let i of arr) {\n      if (newArr.indexOf(i) === -1) {\n        newArr.push(i);\n      }\n    }\n    return newArr;\n  };\n\n  createNewQuestion = async (\n    user: UserEntity,\n    questionData: NewQuestionDto,\n  ) => {\n    const newQuestion = new QuestionEntity();\n    const multipleChoices = this.uniqueElements(questionData.multipleChoices);\n    if (multipleChoices.length  {\n    const question = await this.questionEntityRepository.findOne(\n      { questionId },\n      { cache: true, relations: ['createdBy'] },\n    );\n\n    if (!question) {\n      this.logger.log(`No question found with ID ${questionId}`);\n      throw new BadRequestException();\n    }\n\n    if (user.userId !== question.createdBy.userId) {\n      this.logger.log(\n        `User with ID - ${user.userId} tried to modify question not made by him/her of ${question.createdBy.userId}`,\n      );\n      throw new UnauthorizedException();\n    }\n\n    if (questionData.multipleChoices)\n      question.multipleChoices = questionData.multipleChoices;\n\n    if (questionData.correctAnswer)\n      question.correctAnswer = questionData.correctAnswer;\n\n    if (questionData.questionTitle)\n      question.questionTitle = questionData.questionTitle;\n    this.logger.log(`Updated Question ${question.questionId}`);\n    await question.save();\n    return question;\n  };\n\n  deleteQuestion = async (user: UserEntity, questionId: string) => {\n    this.logger.log(\n      `Deleting Question - ${questionId} created By user - ${user.userId}`,\n    );\n    await this.questionEntityRepository.delete({\n      questionId,\n      createdBy: { userId: user.userId },\n    });\n  };\n\n  async findbyID(questionID: string): Promise {\n    const question = await this.questionEntityRepository.findOne(questionID);\n    this.logger.log(\n      `[findByID] ${\n        question ? 'Found' : 'Did not find'\n      } a question with ID ${questionID} `,\n    );\n    return question;\n  }\n}\n\nexport default QuestionService;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuizAttemptGateway.html":{"url":"classes/QuizAttemptGateway.html","title":"class - QuizAttemptGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuizAttemptGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/quizz/quizz-attempt.gateway.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayInit\n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                afterInit\n                            \n                            \n                                    Async\n                                attemptQuestion\n                            \n                            \n                                    Async\n                                fetchQuestion\n                            \n                            \n                                    Async\n                                fetchQuizDetails\n                            \n                            \n                                    Async\n                                finishQuiz\n                            \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    Async\n                                startQuiz\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(quizService: QuizzService)\n                    \n                \n                        \n                            \n                                Defined in src/quizz/quizz-attempt.gateway.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        quizService\n                                                  \n                                                        \n                                                                        QuizzService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n                    \n                        \n                            Default value : new Logger('QuizzGateway')\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz-attempt.gateway.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Server\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @WebSocketServer()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz-attempt.gateway.ts:36\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            afterInit\n                        \n                        \n                    \n                \n            \n            \n                \nafterInit()\n                \n            \n\n\n            \n                \n                    Defined in src/quizz/quizz-attempt.gateway.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            attemptQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    attemptQuestion(server: Server, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(ATTEMPT_QUESTION)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz-attempt.gateway.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    server\n                                    \n                                            Server\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchQuestion(server: Server, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(FETCH_QUESTION)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz-attempt.gateway.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    server\n                                    \n                                            Server\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchQuizDetails\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchQuizDetails(server: Server, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(FETCH_QUIZ_DETAILS)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz-attempt.gateway.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    server\n                                    \n                                            Server\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            finishQuiz\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    finishQuiz(server: Server, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(FINISH)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz-attempt.gateway.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    server\n                                    \n                                            Server\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleConnection\n                        \n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket, ...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/quizz/quizz-attempt.gateway.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleDisconnect\n                        \n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/quizz/quizz-attempt.gateway.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            startQuiz\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    startQuiz(server: Server, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(START)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz-attempt.gateway.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    server\n                                    \n                                            Server\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  SubscribeMessage,\n  WebSocketGateway,\n  OnGatewayInit,\n  WebSocketServer,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Logger, UseGuards } from '@nestjs/common';\nimport { Socket, Server } from 'socket.io';\n\nimport { WsGuard } from '../auth/ws.gaurd';\nimport {\n  ATTEMPT_QUESTION,\n  ERROR,\n  FETCH_ATTEMPT_ID,\n  FETCH_QUESTION,\n  FETCH_QUIZ_DETAILS,\n  RECEIVED_QUIZ_DETAILS,\n  START,\n  RECEIVED_QUESTION,\n  FINISH,\n  NOT_FOUND,\n} from '../../common/ws.event.types';\nimport UserEntity from '../user/user.entity';\nimport { QuizzService } from './quizz.service';\nimport { classToPlain } from 'class-transformer';\nimport QuizzEntity from './entities/quizz.entity';\n\n@UseGuards(WsGuard)\n@WebSocketGateway(undefined, { transports: ['websocket', 'polling'] })\nexport class QuizAttemptGateway\n  implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {\n  constructor(private quizService: QuizzService) {}\n\n  @WebSocketServer() server: Server;\n  private logger: Logger = new Logger('QuizzGateway');\n\n  afterInit() {\n    this.logger.log('Init');\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(\n      `Client disconnected: ${client.id} ${client.conn.remoteAddress}`,\n    );\n  }\n\n  handleConnection(client: Socket, ...args: any[]) {\n    this.logger.log(\n      `Client connected: ${client.id} ${client.conn.remoteAddress}`,\n    );\n  }\n\n  @SubscribeMessage(FINISH)\n  async finishQuiz(\n    server: Server,\n    data: { payload: { attemptId: string }; user: UserEntity },\n  ) {\n    try {\n      const {\n        payload: { attemptId },\n        user,\n      } = data;\n      await this.quizService.finishQuizAttempt(attemptId, user);\n    } catch (e) {\n      console.log(e);\n      server.emit(ERROR);\n    }\n  }\n\n  @SubscribeMessage(FETCH_QUIZ_DETAILS)\n  async fetchQuizDetails(\n    server: Server,\n    data: { payload: { quizzId: string }; user: UserEntity },\n  ) {\n    const {\n      user,\n      payload: { quizzId },\n    } = data;\n    try {\n      let quiz: QuizzEntity;\n\n      try {\n        quiz = await this.quizService.getQuiz(quizzId, ['createdBy']);\n      } catch (e) {\n        return server.emit(NOT_FOUND);\n      }\n\n      server.emit(RECEIVED_QUIZ_DETAILS, {\n        payload: {\n          ...classToPlain(quiz),\n          canAttemptQuizz: this.quizService.canAttemptQuiz(quiz, data.user),\n          totalNumberOfQuestions: quiz.questions.length,\n          isQuizzAttemptFinished: user.userQuizAttempts.reduce((t, c) => {\n            if (c.quizz.quizzId === quizzId) {\n              return c.attemptFinished ||\n                quiz.endDatetime.getTime() \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuizController.html":{"url":"controllers/QuizController.html","title":"controller - QuizController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuizController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/quizz/quizz.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                quizz\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteQuiz\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                newQuestion\n                            \n                            \n                                    Async\n                                newQuiz\n                            \n                            \n                                    Async\n                                removeAllQuestions\n                            \n                            \n                                    Async\n                                removeQuestion\n                            \n                            \n                                    Async\n                                updateQuizTime\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteQuiz\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteQuiz(id: string, req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtGaurd)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(options: IPaginationOptions, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtGaurd)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            IPaginationOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            newQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newQuestion(questionData: NewQuestionDto, quizId: string, req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':qid/question/new')@UseGuards(JwtGaurd)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questionData\n                                    \n                                                NewQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    quizId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            newQuiz\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newQuiz(data: NewQuizDto, req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('new')@UseGuards(JwtGaurd)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                NewQuizDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeAllQuestions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeAllQuestions(quizId: string, req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':qid/all/questions')@UseGuards(JwtGaurd)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    quizId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeQuestion(questionID: string, quizId: string, req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':qid/question/:questionID')@UseGuards(JwtGaurd)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questionID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    quizId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateQuizTime\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateQuizTime(startDatetime: string, endDatetime: string, quizId, req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':qid')@UseGuards(JwtGaurd)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/quizz/quizz.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    startDatetime\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    endDatetime\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    quizId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpStatus,\n  Param,\n  Post,\n  Req,\n  Res,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n  Delete,\n  Patch,\n  Get,\n  Query\n} from '@nestjs/common';\nimport { IPaginationOptions } from 'nestjs-typeorm-paginate';\nimport UserEntity from 'src/user/user.entity';\nimport JwtGaurd from '../auth/jwt.gaurd';\nimport NewQuestionDto from '../question/dto/new.question';\nimport { NewQuizDto } from './dto/new.quiz';\nimport { QuizzService } from './quizz.service';\n\n@Controller('quizz')\nexport class QuizController {\n  constructor(private quizService: QuizzService) {}\n\n  @Post('new')\n  @UseGuards(JwtGaurd)\n  @UsePipes(ValidationPipe)\n  async newQuiz(@Body() data: NewQuizDto, @Req() req, @Res() res) {\n   await this.quizService.createNewQuiz(req.user, data);\n  return res.sendStatus(HttpStatus.CREATED);\n  }\n\n\n  @Post(':qid/question/new')\n  @UseGuards(JwtGaurd)\n  @UsePipes(ValidationPipe)\n  async newQuestion(\n    @Body() questionData: NewQuestionDto,\n    @Param('qid') quizId: string,\n    @Req() req,\n    @Res() res,\n  ) {\n    await this.quizService.addNewQuestion(req.user, questionData, quizId);\n    return res.sendStatus(HttpStatus.CREATED);\n  }\n\n  @Delete(':qid/question/:questionID')\n  @UseGuards(JwtGaurd)\n  @UsePipes(ValidationPipe)\n  async removeQuestion(\n    @Param('questionID') questionID: string,\n    @Param('qid') quizId: string,\n    @Req() req,\n    @Res() res,\n  ) {\n    await this.quizService.removeQuestion(req.user, questionID, quizId);\n    return res.sendStatus(HttpStatus.OK);\n  }\n\n  @Delete(':qid/all/questions')\n  @UseGuards(JwtGaurd)\n  @UsePipes(ValidationPipe)\n  async removeAllQuestions(\n    @Param('qid') quizId: string,\n    @Req() req,\n    @Res() res,\n  ) {\n    await this.quizService.removeAllQuestions(req.user, quizId);\n    return res.sendStatus(HttpStatus.OK);\n  }\n\n  @Patch(':qid')\n  @UseGuards(JwtGaurd)\n  @UsePipes(ValidationPipe)\n  async updateQuizTime(\n    @Body('startDatetime') startDatetime: string,\n    @Body('endDatetime') endDatetime: string,\n    @Param('qid') quizId,\n    @Req() req,\n    @Res() res,\n  ) {\n    await this.quizService.updateQuiz(req.user,quizId,startDatetime,endDatetime );\n    return res.sendStatus(HttpStatus.OK);\n  }\n\n  @Get()\n  @UseGuards(JwtGaurd)\n  async get(@Query() options: IPaginationOptions, @Req() req) {\n   \n    return await  this.quizService.getQuizzes(req.user, options);\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtGaurd)\n  async deleteQuiz(@Param('id') id:string,@Req() req,@Res() res) {\n    await this.quizService.deleteQuiz(id, (req.user as UserEntity).userId);\n    return res.sendStatus(HttpStatus.OK);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuizzAttemptEntity.html":{"url":"classes/QuizzAttemptEntity.html","title":"class - QuizzAttemptEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuizzAttemptEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/quizz/entities/quizz_attempts.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                attemptFinished\n                            \n                            \n                                questionAttempts\n                            \n                            \n                                quizz\n                            \n                            \n                                quizzAttemptId\n                            \n                            \n                                totalScore\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attemptFinished\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz_attempts.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionAttempts\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuestionAttemptEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined, {onDelete: 'CASCADE', eager: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz_attempts.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            quizz\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuizzEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {eager: true, nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz_attempts.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            quizzAttemptId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz_attempts.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            totalScore\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz_attempts.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz_attempts.entity.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { QuizzEntity } from './quizz.entity';\nimport { QuestionAttemptEntity } from './question_attempt.entity';\nimport UserEntity from '../../user/user.entity';\n\n@Entity()\nexport class QuizzAttemptEntity extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  quizzAttemptId: string;\n\n  @ManyToOne(\n    type => QuizzEntity,\n    quiz => quiz.quizzAttemptsByUsers,\n    { eager: true,nullable:false },\n  )\n  quizz: QuizzEntity;\n\n  @ManyToOne(\n    type => UserEntity,\n    user => user.userQuizAttempts,\n  )\n  user: UserEntity;\n\n  @OneToMany(\n    type => QuestionAttemptEntity,\n    questionAttempt => questionAttempt.quizAttempt,\n    { onDelete: 'CASCADE',eager:true },\n  )\n  questionAttempts: QuestionAttemptEntity[];\n\n  @Column({ default: 0 })\n  totalScore: number;\n\n  @Column({ default: false })\n  attemptFinished: boolean;\n}\n\nexport default QuizzAttemptEntity;\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuizzEntity.html":{"url":"classes/QuizzEntity.html","title":"class - QuizzEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuizzEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/quizz/entities/quizz.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                createdBy\n                            \n                            \n                                endDatetime\n                            \n                            \n                                questions\n                            \n                            \n                                quizzAttemptsByUsers\n                            \n                            \n                                quizzId\n                            \n                            \n                                quizzTitle\n                            \n                            \n                                startDatetime\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdBy\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endDatetime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuestionEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@ManyToMany(undefined, {eager: true})@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            quizzAttemptsByUsers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QuizAttemptEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            quizzId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            quizzTitle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startDatetime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/entities/quizz.entity.ts:57\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport {\n  BaseEntity,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport QuestionEntity from '../../question/question.entity';\nimport UserEntity from '../../user/user.entity';\nimport  QuizAttemptEntity  from './quizz_attempts.entity';\n\n@Entity()\nexport class QuizzEntity extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  quizzId: string;\n\n  @Column()\n  quizzTitle: string;\n\n  @Column()\n  startDatetime: Date;\n\n  @Column()\n  endDatetime: Date;\n\n  @Exclude()\n  @ManyToMany(type => QuestionEntity, { eager: true })\n  @JoinTable()\n  questions: QuestionEntity[];\n\n  @ManyToOne(\n    type => UserEntity,\n    user => user.userCreatedQuizzes,\n    { onDelete: 'CASCADE' },\n  )\n  createdBy: UserEntity;\n\n  @Exclude()\n  @OneToMany(\n    type => QuizAttemptEntity,\n    quizAttempt => quizAttempt.quizz,\n  )\n  quizzAttemptsByUsers: QuizAttemptEntity[];\n\n  @Exclude()\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @Exclude()\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n\nexport default QuizzEntity;\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuizzModule.html":{"url":"modules/QuizzModule.html","title":"module - QuizzModule","body":"\n                   \n\n\n\n\n    Modules\n    QuizzModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuizzModule\n\n\n\ncluster_QuizzModule_imports\n\n\n\ncluster_QuizzModule_exports\n\n\n\ncluster_QuizzModule_providers\n\n\n\n\nQuestionModule\n\nQuestionModule\n\n\n\nQuizzModule\n\nQuizzModule\n\nQuizzModule -->\n\nQuestionModule->QuizzModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nQuizzModule -->\n\nUserModule->QuizzModule\n\n\n\n\n\nQuizzService \n\nQuizzService \n\nQuizzService  -->\n\nQuizzModule->QuizzService \n\n\n\n\n\nQuizzService\n\nQuizzService\n\nQuizzModule -->\n\nQuizzService->QuizzModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/quizz/quizz.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QuizzService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuizController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            QuestionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QuizzService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QuestionModule } from '../question/question.module';\nimport { UserModule } from '../user/user.module';\nimport { QuestionAttemptEntity } from './entities/question_attempt.entity';\nimport { QuizController } from './quizz.controller';\nimport { QuizzService } from './quizz.service';\nimport { QuizzAttemptEntity } from './entities/quizz_attempts.entity';\nimport QuizzEntity from './entities/quizz.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      QuizzEntity,\n      QuizzAttemptEntity,\n      QuestionAttemptEntity,\n    ]),\n    UserModule,\n    QuestionModule,\n  ],\n  controllers: [QuizController],\n  providers: [QuizzService],\n  exports: [QuizzService],\n})\nexport class QuizzModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuizzService.html":{"url":"injectables/QuizzService.html","title":"injectable - QuizzService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuizzService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/quizz/quizz.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                addNewQuestion\n                            \n                            \n                                addOldQuestion\n                            \n                            \n                                createNewQuiz\n                            \n                            \n                                deleteQuiz\n                            \n                            \n                                finishQuizAttempt\n                            \n                            \n                                getQuiz\n                            \n                            \n                                    Private\n                                logger\n                            \n                            \n                                removeAllQuestions\n                            \n                            \n                                removeQuestion\n                            \n                            \n                                updateQuiz\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                attemptQuestion\n                            \n                            \n                                    Async\n                                attemptQuiz\n                            \n                            \n                                canAttemptQuiz\n                            \n                            \n                                    Async\n                                fetchQuestionForQuizAttempt\n                            \n                            \n                                    Async\n                                getQuizzes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(questionService: QuestionService, quizRepo: Repository, quizAttemptRepo: Repository, questionAttemptRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/quizz/quizz.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        quizRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        quizAttemptRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionAttemptRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            attemptQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    attemptQuestion(user: UserEntity, questionId: string, choosedOption: string, attemptId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/quizz/quizz.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    choosedOption\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    attemptId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            attemptQuiz\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    attemptQuiz(user: UserEntity, quizId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/quizz/quizz.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    quizId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canAttemptQuiz\n                        \n                        \n                    \n                \n            \n            \n                \ncanAttemptQuiz(quiz: QuizzEntity, user: UserEntity, checkForPreviousAttempts: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/quizz/quizz.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    quiz\n                                    \n                                                QuizzEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    checkForPreviousAttempts\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchQuestionForQuizAttempt\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchQuestionForQuizAttempt(attemptId: string, questionNumber: number, user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/quizz/quizz.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    attemptId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questionNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getQuizzes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getQuizzes(user: UserEntity, options: IPaginationOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/quizz/quizz.service.ts:335\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            IPaginationOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            addNewQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:201\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            addOldQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:230\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createNewQuiz\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:183\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteQuiz\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:343\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            finishQuizAttempt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:358\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getQuiz\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:179\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n                    \n                        \n                            Default value : new Logger('QuizzService')\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            removeAllQuestions\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:282\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            removeQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:256\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateQuiz\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/quizz/quizz.service.ts:300\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { IPaginationOptions, paginate } from 'nestjs-typeorm-paginate';\nimport NewQuestionDto from '../question/dto/new.question';\nimport QAEntity from '../question/question.entity';\nimport { QuestionService } from '../question/question.service';\nimport UserEntity from '../user/user.entity';\nimport { Repository } from 'typeorm';\nimport { NewQuizDto } from './dto/new.quiz';\nimport { QuestionAttemptEntity } from './entities/question_attempt.entity';\nimport { QuizzEntity } from './entities/quizz.entity';\n\nimport  QuizzAttemptEntity  from './entities/quizz_attempts.entity';\nimport { WsException } from '@nestjs/websockets';\n\n@Injectable()\nexport class QuizzService {\n  constructor(\n    private questionService: QuestionService,\n    @InjectRepository(QuizzEntity)\n    private quizRepo: Repository,\n    @InjectRepository(QuizzAttemptEntity)\n    private quizAttemptRepo: Repository,\n    @InjectRepository(QuestionAttemptEntity)\n    private questionAttemptRepo: Repository,\n  ) {}\n\n  private logger: Logger = new Logger('QuizzService');\n\n  canAttemptQuiz(\n    quiz: QuizzEntity,\n    user: UserEntity,\n    checkForPreviousAttempts: boolean = true,\n  ) {\n    const result =\n      quiz &&\n      quiz.startDatetime.getTime()  Date.now() &&\n      (!checkForPreviousAttempts ||\n        user.userQuizAttempts.reduce((t, c) => {\n          if (quiz.quizzId === c.quizz.quizzId) {\n            return !c.attemptFinished;\n          } else {\n            return t;\n          }\n        }, true));\n\n    this.logger.debug(result, 'canAttemptQuiz');\n    return result;\n  }\n\n  async fetchQuestionForQuizAttempt(\n    attemptId: string,\n    questionNumber: number,\n    user: UserEntity,\n  ) {\n    const quizAttempt = await this.quizAttemptRepo.findOne(attemptId, {\n      relations: ['user'],\n    });\n\n    this.logger.debug(quizAttempt, 'fetchQuestionForQuizAttempt');\n    if (\n      this.canAttemptQuiz(quizAttempt.quizz, user, false) &&\n      !quizAttempt.attemptFinished &&\n      quizAttempt.user.userId === user.userId &&\n      questionNumber >= 0 &&\n      questionNumber  {\n        if (question && c.questionId === question.questionId) {\n          return c.optionChoosed;\n        } else {\n          return t;\n        }\n      }, undefined);\n      this.logger.debug(\n        question,\n        `Question returned by fetchQuestionForQuizAttempt for Question Number - ${questionNumber}`,\n      );\n      return { question, selectedOption };\n    } else {\n      throw new BadRequestException();\n    }\n  }\n\n  async attemptQuiz(user: UserEntity, quizId: string): Promise {\n    const quiz = await this.quizRepo.findOne(quizId, {\n      relations: ['quizzAttemptsByUsers'],\n    });\n    const quizAttempt = user.userQuizAttempts.reduce((t, c) => {\n      if (c.quizz.quizzId === quiz.quizzId) {\n        return c;\n      } else {\n        return t;\n      }\n    }, undefined);\n\n    if (!this.canAttemptQuiz(quiz, user)) {\n      throw new BadRequestException();\n    }\n\n    if (quizAttempt) {\n      return quizAttempt.quizzAttemptId;\n    }\n\n    const newQuizAttempt = new QuizzAttemptEntity();\n    newQuizAttempt.user = user;\n    newQuizAttempt.quizz = quiz;\n    newQuizAttempt.questionAttempts = [];\n    await newQuizAttempt.save();\n    return newQuizAttempt.quizzAttemptId;\n  }\n\n  async attemptQuestion(\n    user: UserEntity,\n    questionId: string,\n    choosedOption: string,\n    attemptId: string,\n  ) {\n    try {\n      let isNew = false;\n      const quizAttempt = await this.quizAttemptRepo.findOne(attemptId, {\n        relations: [],\n      });\n      const question = await this.questionService.findbyID(questionId);\n\n      if (\n        !question ||\n        !quizAttempt ||\n        !this.canAttemptQuiz(quizAttempt.quizz, user, false)\n      ) {\n        this.logger.error('Cannot Attempt Question');\n        throw new BadRequestException();\n      }\n      let questionAttempt = await this.questionAttemptRepo.findOne(\n        {\n          questionId,\n          quizAttempt: { quizzAttemptId: quizAttempt.quizzAttemptId },\n        },\n        { relations: ['quizAttempt'] },\n      );\n\n      this.logger.debug(\n        { question, quizAttempt, questionAttempt },\n        'attemptQuestion()',\n      );\n\n      if (!questionAttempt) {\n        isNew = true;\n        questionAttempt = new QuestionAttemptEntity();\n        this.logger.debug(question,\"Question\")\n        questionAttempt.questionId = question.questionId;\n        questionAttempt.quizAttempt = quizAttempt;\n      } else {\n        quizAttempt.totalScore -=\n          questionAttempt.optionChoosed === question.correctAnswer ? 1 : 0;\n      }\n\n      questionAttempt.optionChoosed = choosedOption;\n\n      if (isNew) {\n        quizAttempt.questionAttempts.push(questionAttempt);\n      }\n      quizAttempt.totalScore +=\n        questionAttempt.optionChoosed === question.correctAnswer ? 1 : 0;\n      questionAttempt.save();\n      quizAttempt.save();\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  getQuiz = async (id: string, relations: string[] = []) => {\n    return await this.quizRepo.findOneOrFail(id, { relations });\n  };\n\n  createNewQuiz = async (user: UserEntity, quizData: NewQuizDto) => {\n    const newQuiz = new QuizzEntity();\n\n    newQuiz.startDatetime = new Date(quizData.startDatetime);\n    newQuiz.endDatetime = new Date(quizData.endDatetime);\n    newQuiz.createdBy = user;\n    newQuiz.quizzTitle = quizData.quizzTitle;\n\n    const questions: QAEntity[] = [];\n    if (quizData.questions.length !== 0)\n      for (let i of quizData.questions) {\n        questions.push(await this.questionService.createNewQuestion(user, i));\n      }\n    newQuiz.questions = questions;\n    await newQuiz.save();\n    return newQuiz;\n  };\n\n  addNewQuestion = async (\n    user: UserEntity,\n    question: NewQuestionDto,\n    quizzId: string,\n  ) => {\n    const newQuestion = await this.questionService.createNewQuestion(user, question);\n\n    const quiz = await this.quizRepo.findOne(\n      { quizzId },\n      { relations: ['createdBy'] },\n    );\n\n    if (quiz.createdBy.userId !== user.userId) {\n      throw new UnauthorizedException();\n    }\n\n    if (!quiz) {\n      throw new BadRequestException('Invalid Quiz ID');\n    }\n\n    if (!quiz.questions) {\n      quiz.questions = [];\n    }\n\n    quiz.questions.push(newQuestion);\n    await quiz.save();\n    return quiz;\n  };\n\n  addOldQuestion = async (\n    user: UserEntity,\n    questionId: string,\n    quizzId: string,\n  ) => {\n    const question = await this.questionService.findbyID(questionId);\n    const quiz = await this.quizRepo.findOne(\n      {  quizzId },\n      { relations: ['createdBy'] },\n    );\n    if (!question || !quiz) {\n      throw new BadRequestException('No Question/Quiz Found with the given ID');\n    }\n    if (!quiz.questions) {\n      quiz.questions = [];\n    }\n\n    if (quiz.createdBy.userId !== user.userId) {\n      throw new UnauthorizedException();\n    }\n    quiz.questions.push(question);\n\n    await quiz.save();\n    return quiz;\n  };\n\n  removeQuestion = async (\n    user: UserEntity,\n    questionId: string,\n    quizzId: string,\n  ) => {\n    const quiz = await this.quizRepo.findOne(\n      {  quizzId },\n      { relations: ['createdBy'] },\n    );\n    if (!quiz) {\n      throw new BadRequestException('No Quiz Found with the given ID');\n    }\n    if (!quiz.questions) {\n      quiz.questions = [];\n    }\n\n    if (quiz.createdBy.userId !== user.userId) {\n      throw new UnauthorizedException();\n    }\n\n    quiz.questions = quiz.questions.filter(q => q.questionId !== questionId);\n\n    await quiz.save();\n    return quiz;\n  };\n\n  removeAllQuestions = async (user: UserEntity, quizzId: string) => {\n    const quiz = await this.quizRepo.findOne(\n      {  quizzId },\n      { relations: ['createdBy'] },\n    );\n    if (!quiz) {\n      throw new BadRequestException('No Quiz Found with the given ID');\n    }\n\n    if (quiz.createdBy.userId !== user.userId) {\n      throw new UnauthorizedException();\n    }\n\n    quiz.questions = [];\n    await quiz.save();\n    return quiz;\n  };\n\n  updateQuiz = async (\n    user: UserEntity,\n    quizzId: string,\n    startDatetime?: string,\n    endDatetime?: string,\n    quizzTitle?: string,\n  ) => {\n    const quiz = await this.quizRepo.findOne(\n      {  quizzId },\n      { relations: ['createdBy'] },\n    );\n    if (!quiz) {\n      throw new BadRequestException('No Quiz Found with the given ID');\n    }\n\n    if (quizzTitle) {\n      quiz.quizzTitle = quizzTitle;\n    }\n\n    if (quiz.createdBy.userId !== user.userId) {\n      throw new UnauthorizedException();\n    }\n\n    if (!startDatetime && !endDatetime) {\n      throw new BadRequestException();\n    }\n\n    if (startDatetime) quiz.startDatetime = new Date(startDatetime);\n\n    if (endDatetime) quiz.endDatetime = new Date(endDatetime);\n\n    await quiz.save();\n    return quiz;\n  };\n\n  async getQuizzes(user: UserEntity, options: IPaginationOptions) {\n    const q = this.quizRepo.createQueryBuilder('q');\n    q.where('q.createdBy= :userId', { userId: user.userId });\n    q.orderBy('q.updatedAt', 'DESC');\n\n    return await paginate(q, options);\n  }\n\n  deleteQuiz = async (quizzId: string, userId: string) => {\n    const quiz = await this.quizRepo.findOne(quizzId, { relations: ['createdBy'] });\n\n    if (!quiz) {\n      throw new BadRequestException();\n    }\n    console.debug(quiz.createdBy.userId,userId)\n\n    if (quiz.createdBy.userId === userId) {\n      await this.quizRepo.delete(quizzId);\n    } else {\n      throw new UnauthorizedException();\n    }\n  };\n\n  finishQuizAttempt = async (attemptId: string, user: UserEntity) => {\n    const quizAttempt = await this.quizAttemptRepo.findOne(attemptId, {\n      relations: ['user'],\n    });\n    if (user.userId !== quizAttempt.user.userId) {\n      throw new WsException('Forbidden');\n    }\n    if (!quizAttempt) {\n      throw new WsException('No Quiz Attempt Found');\n    }\n    quizAttempt.attemptFinished = true;\n    quizAttempt.save();\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionDto.html":{"url":"classes/UpdateQuestionDto.html","title":"class - UpdateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/dto/update.question.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                correctAnswer\n                            \n                            \n                                    Optional\n                                multipleChoices\n                            \n                            \n                                    Optional\n                                questionTitle\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            correctAnswer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()@IsNotEmpty()@IsString()@MinLength(5)@MaxLength(100)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/dto/update.question.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            multipleChoices\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()@IsNotEmpty()@IsArray()@ArrayMinSize(2)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/dto/update.question.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            questionTitle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()@IsNotEmpty()@IsString()@MinLength(5)@MaxLength(100)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question/dto/update.question.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {  ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsString,\n  MinLength,\n  IsArray,\n  MaxLength,\n  ArrayMinSize\n} from 'class-validator';\n\nexport class UpdateQuestionDto {\n  @ApiPropertyOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(5)\n  @MaxLength(100)\n  correctAnswer?: string;\n\n  @ApiPropertyOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(5)\n  @MaxLength(100)\n  questionTitle?: string;\n\n  @ApiPropertyOptional()\n  @IsNotEmpty()\n  @IsArray()\n  @ArrayMinSize(2)\n  multipleChoices?: string[];\n}\n\nexport default UpdateQuestionDto;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userCreatedQuestions\n                            \n                            \n                                userCreatedQuizzes\n                            \n                            \n                                userEmail\n                            \n                            \n                                userId\n                            \n                            \n                                userName\n                            \n                            \n                                userPhotoURL\n                            \n                            \n                                userQuizAttempts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userCreatedQuestions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QAEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userCreatedQuizzes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuizzEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userEmail\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@Index()@Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userPhotoURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userQuizAttempts\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuizzAttemptEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToMany(undefined, undefined, {eager: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:42\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport QAEntity from '../question/question.entity';\nimport { QuizzEntity } from '../quizz/entities/quizz.entity';\nimport { QuizzAttemptEntity} from '../quizz/entities/quizz_attempts.entity';\nimport {\n  Entity,\n  BaseEntity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  Index,\n} from 'typeorm';\n\n@Entity()\nclass UserEntity extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  userId: string;\n\n  @Column()\n  userName: string;\n\n  @Exclude()\n  @Index()\n  @Column({ unique: true })\n  userEmail: string;\n\n  @Column({ nullable: true })\n  userPhotoURL: string;\n\n  @OneToMany(\n    type => QuizzEntity,\n    quiz => quiz.createdBy,\n  )\n  userCreatedQuizzes: QuizzEntity[];\n\n  @Exclude()\n  @OneToMany(\n    type => QuizzAttemptEntity,\n    quizAttempt => quizAttempt.user,\n    { eager: true },\n  )\n  userQuizAttempts: QuizzAttemptEntity[];\n\n  @OneToMany(\n    type => QAEntity,\n    qa => qa.createdBy,\n  )\n  userCreatedQuestions: QAEntity[];\n}\n\nexport default UserEntity;\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport UserEntity from './user.entity';\nimport { UserService } from './user.service';\n\n@Module({\n    imports:[TypeOrmModule.forFeature([UserEntity])],\n    providers:[UserService],\n    exports:[UserService]\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                findByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userEntityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            findByEmail\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport {  Repository } from 'typeorm';\nimport UserEntity from './user.entity';\n\n@Injectable()\nexport class UserService {\n\n  constructor(\n    @InjectRepository(UserEntity)\n    private userEntityRepository: Repository) {\n  }\n\n  findByEmail = async (userEmail: string, relations: string[] = []) => {\n    const user = await this.userEntityRepository.findOne({ userEmail }, {  relations });\n    return user;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/WsGuard.html":{"url":"guards/WsGuard.html","title":"guard - WsGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    WsGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/ws.gaurd.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/ws.gaurd.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/ws.gaurd.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate,  } from '@nestjs/common';\nimport { UNAUTHORIZED } from '../../common/ws.event.types';\nimport { UserService } from '../user/user.service';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class WsGuard implements CanActivate {\n  constructor(\n    private userService: UserService,\n    private authService: AuthService,\n  ) {}\n\n  async canActivate(context: any): Promise {\n    const bearerToken = context.args[0]?.handshake?.query?.token;\n\n    try {\n      const decoded = this.authService.verifyJwt(bearerToken) as any;\n      const user = await this.userService.findByEmail(decoded.email);\n      let data = context.switchToWs().getData();\n     if(typeof data==='object'){\n        data.user = user;\n      }\n\n      return true;\n    } catch (ex) {\n      console.log(ex);\n      context.args[0]?.server?.emit(UNAUTHORIZED);\n\n      return false;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            ATTEMPT_QUESTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            CONNECT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            DISCONNECT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            FETCH_ATTEMPT_ID\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            FETCH_QUESTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            FETCH_QUIZ_DETAILS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            FINISH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            FINISHED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            NOT_FOUND\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            RECEIVED_QUESTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            RECEIVED_QUIZ_DETAILS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            START\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                common/ws.event.types.ts\n            \n            variable\n            UNAUTHORIZED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                config/env.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                config/typeorm.config.ts\n            \n            variable\n            TypeOrmConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                config/url.ts\n            \n            variable\n            baseURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/Jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.module.ts\n            \n            variable\n            passportAuthModules\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/jwt.gaurd.ts\n            \n            class\n            JwtGaurd\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.payload.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/ws.gaurd.ts\n            \n            guard\n            WsGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question/dto/new.question.ts\n            \n            class\n            NewQuestionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/question/dto/update.question.ts\n            \n            class\n            UpdateQuestionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/question/question.controller.ts\n            \n            controller\n            QuestionController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/question/question.entity.ts\n            \n            class\n            QuestionEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/question/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/quizz/dto/new.quiz.ts\n            \n            class\n            NewQuizDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/quizz/entities/question_attempt.entity.ts\n            \n            class\n            QuestionAttemptEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/quizz/entities/quizz.entity.ts\n            \n            class\n            QuizzEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/quizz/entities/quizz_attempts.entity.ts\n            \n            class\n            QuizzAttemptEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/quizz/quizz-attempt.gateway.ts\n            \n            class\n            QuizAttemptGateway\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/quizz/quizz.controller.ts\n            \n            controller\n            QuizController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/quizz/quizz.service.ts\n            \n            injectable\n            QuizzService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/platform-socket.io : ^7.5.2\n        \n            @nestjs/swagger : ^4.7.5\n        \n            @nestjs/typeorm : ^7.1.4\n        \n            @nestjs/websockets : ^7.5.2\n        \n            @types/axios : ^0.14.0\n        \n            @types/connect-redis : 0.0.14\n        \n            @types/express-session : ^1.17.0\n        \n            @types/faker : ^5.1.4\n        \n            @types/passport-jwt : ^3.0.3\n        \n            @types/redis : ^2.8.27\n        \n            axios : ^0.20.0\n        \n            class-transformer : ^0.3.1\n        \n            class-transformer-validator : ^0.9.1\n        \n            class-validator : ^0.12.2\n        \n            connect-redis : ^5.0.0\n        \n            dotenv : ^8.2.0\n        \n            express-session : ^1.17.1\n        \n            faker : ^5.1.0\n        \n            nestjs-typeorm-paginate : ^2.2.1\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.3.3\n        \n            redis : ^3.0.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            swagger-ui-express : ^4.1.5\n        \n            typeorm : ^0.2.26\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_QuestionModule\n\n\n\ncluster_QuestionModule_exports\n\n\n\ncluster_QuestionModule_providers\n\n\n\ncluster_QuizzModule\n\n\n\ncluster_QuizzModule_exports\n\n\n\ncluster_QuizzModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nQuestionModule\n\nQuestionModule\n\n\n\nQuizzModule\n\nQuizzModule\n\nQuizzModule -->\n\nQuestionModule->QuizzModule\n\n\n\nAppModule -->\n\nQuestionModule->AppModule\n\n\n\n\n\nQuestionService \n\nQuestionService \n\nQuestionService  -->\n\nQuestionModule->QuestionService \n\n\n\nAppModule -->\n\nQuizzModule->AppModule\n\n\n\n\n\nQuizzService \n\nQuizzService \n\nQuizzService  -->\n\nQuizzModule->QuizzService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nQuizzModule -->\n\nUserModule->QuizzModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionModule -->\n\nQuestionService->QuestionModule\n\n\n\n\n\nQuizzService\n\nQuizzService\n\nQuizzModule -->\n\nQuizzService->QuizzModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuestionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuizzModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ATTEMPT_QUESTION   (common/.../ws.event.types.ts)\n                        \n                        \n                            baseURL   (config/.../url.ts)\n                        \n                        \n                            CONNECT   (common/.../ws.event.types.ts)\n                        \n                        \n                            DISCONNECT   (common/.../ws.event.types.ts)\n                        \n                        \n                            ERROR   (common/.../ws.event.types.ts)\n                        \n                        \n                            FETCH_ATTEMPT_ID   (common/.../ws.event.types.ts)\n                        \n                        \n                            FETCH_QUESTION   (common/.../ws.event.types.ts)\n                        \n                        \n                            FETCH_QUIZ_DETAILS   (common/.../ws.event.types.ts)\n                        \n                        \n                            FINISH   (common/.../ws.event.types.ts)\n                        \n                        \n                            FINISHED   (common/.../ws.event.types.ts)\n                        \n                        \n                            NOT_FOUND   (common/.../ws.event.types.ts)\n                        \n                        \n                            passportAuthModules   (src/.../auth.module.ts)\n                        \n                        \n                            RECEIVED_QUESTION   (common/.../ws.event.types.ts)\n                        \n                        \n                            RECEIVED_QUIZ_DETAILS   (common/.../ws.event.types.ts)\n                        \n                        \n                            START   (common/.../ws.event.types.ts)\n                        \n                        \n                            TypeOrmConfig   (config/.../typeorm.config.ts)\n                        \n                        \n                            UNAUTHORIZED   (common/.../ws.event.types.ts)\n                        \n                        \n                               (config/.../env.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    common/ws.event.types.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ATTEMPT_QUESTION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ATTEMPT_QUESTION'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CONNECT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'connect'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DISCONNECT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'disconnect'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ERROR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"ERROR\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FETCH_ATTEMPT_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FETCH_ATTEMPT_ID'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FETCH_QUESTION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FETCH_QUESTION'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FETCH_QUIZ_DETAILS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FETCH_QUIZ_DETAILS'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FINISH\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FINISH'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FINISHED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"FINISHED\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NOT_FOUND\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'NOT_FOUND'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RECEIVED_QUESTION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'RECEIVED_QUESTION'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RECEIVED_QUIZ_DETAILS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"RECEIVED_QUIZ_DETAILS\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            START\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"START\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            UNAUTHORIZED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"UNAUTHORIZED\"\n                        \n                    \n\n\n            \n        \n\n    config/url.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            baseURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.BaseURL || 'http://localhost:5000/api'\n                        \n                    \n\n\n            \n        \n\n    src/auth/auth.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            passportAuthModules\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  PassportModule.register({\n    defaultStrategy: 'jwt',\n    session: false,\n  }),\n  JwtModule.register({\n    secret: JWT_SECRET,\n    signOptions: {\n      expiresIn: '7d',\n    },\n  }),\n]\n                        \n                    \n\n\n            \n        \n\n    config/typeorm.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TypeOrmConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: 'postgres',\n  host: env.POSTGRES_HOST,\n  port: parseInt(env.POSTGRES_PORT),\n  username: env.POSTGRES_USER,\n  password: env.POSTGRES_PASSWORD,\n  database: env.POSTGRES_DATABASE,\n  entities: ['dist/**/*.entity{.js,.ts}'],\n  cache: {\n    type: 'redis',\n    duration: 60000,\n    options: {\n      port: parseInt(env.DB_CACHE_PORT),\n      host: env.DB_CACHE_HOST,\n    },\n  },\n  synchronize: true,\n}\n                        \n                    \n\n\n            \n        \n\n    config/env.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
